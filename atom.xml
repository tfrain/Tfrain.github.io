<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tfrain - Tfrain&#39;s Blog</title>
  
  
  <link href="https://programmerscareer.com/atom.xml" rel="self"/>
  
  <link href="https://programmerscareer.com/"/>
  <updated>2024-05-12T13:00:48.287Z</updated>
  <id>https://programmerscareer.com/</id>
  
  <author>
    <name>tfrain</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL面试问题:假设创建一个复合索引(a, b, c)，如果查询字段a和c，会使用这个复合索引吗?</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview19/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview19/</id>
    <published>2024-05-12T18:35:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>让我们创建一个以MySQL为重点的课程计划，特别是理解复合索引的应用</p><p><img src="https://images.unsplash.com/reserve/d1Ntvq9mSVmV0RcnWN1Y_23rd%20Studios%20Photography%20Boulder%20Colorado.jpg?crop=entropy&amp;cs=srgb&amp;fm=jpg&amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MTAxMjl8&amp;ixlib=rb-4.0.3&amp;q=85&amp;w=500&amp;h=500" alt="photo by Paul Talbot on Unsplash"></p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：1-1-MySQL的复合索引介绍"><a href="#主题：1-1-MySQL的复合索引介绍" class="headerlink" title="主题：1.1 MySQL的复合索引介绍"></a><strong>主题：1.1 MySQL的复合索引介绍</strong></h1><p>复合索引，也称为联合或多列索引，是数据库表中两个或多个列组成的索引。这些列按照特定的顺序排列，并由此列的顺序所导向。</p><p>以图书馆为例，单列索引就像根据作者的名字来排列书籍。而复合索引就像根据作者和书名来排列书籍。</p><p>在 MySQL 中，复合索引起着非常重要的作用，帮助提高数据库操作的效率。要了解的是，MySQL 可以使用复合索引来加速包含任何列的查询，但是它的效率最高是在使用左侧前缀的索引列表中。</p><p>MySQL 复合索引的一个重要特性是“左侧前缀”。在复合索引中，列的顺序很重要。例如，在复合索引 (a, b, c) 中，MySQL 可以使用这个索引来加速包含 ‘a’ 或 ‘a 和 b’ 的查询，但不能使用 ‘b 和 c’，因为 ‘b 和 c’ 不是复合索引的左侧前缀。</p><p>复合索引可以大大提高查询的性能，但是它们的有效使用取决于如何查询数据。</p><h1 id="主题：1-2-创建复合索引"><a href="#主题：1-2-创建复合索引" class="headerlink" title="主题：1.2 创建复合索引"></a><strong>主题：1.2 创建复合索引</strong></h1><p>在 MySQL 中创建复合索引与创建单列索引的语法有些差异。</p><p>下面是创建复合索引的基本语法：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name  </span><br><span class="line">ON table_name(col1, col2, ...);</span><br></pre></td></tr></tbody></table></figure><ul><li><code>index_name</code> 是您想要为索引命名的名称。</li><li><code>table_name</code> 是要创建索引的表的名称。</li><li><code>(col1, col2, …)</code> 是要包含在索引中的列的名称，按照您希望它们出现的顺序排列。</li></ul><p>让我们考虑一个具体的例子。 假设有一个 <code>sales</code> 表，其中包含 <code>ProductID</code>、<code>OrderDate</code> 和 <code>Region</code> 列。 如果您经常执行过滤或排序操作，并使用 <code>ProductID</code> 和 <code>OrderDate</code>，复合索引将会有所帮助。 下面是如何创建它：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_sales  </span><br><span class="line">ON sales(ProductID, OrderDate);</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，<code>idx_sales</code> 是一个复合索引，在 <code>sales</code> 表上包含 <code>ProductID</code> 和 <code>OrderDate</code>。 索引的顺序很重要，因为 MySQL 将使用索引来加速包含 <code>ProductID</code> 的查询，或者包含 <code>ProductID</code> 和 <code>OrderDate</code> 的查询，但不是 <code>OrderDate</code> 的查询。</p><p>要记住的是，使用复合索引来提高查询性能是有代价的。 虽然它们可以大大提高查询性能，但它们可能会慢下来写操作（例如，INSERT、UPDATE、DELETE），因为 MySQL 必须更新索引。 要优化数据库性能，需要找到一个合理的平衡。</p><h1 id="主题：1-3-查询字段-A-和-C"><a href="#主题：1-3-查询字段-A-和-C" class="headerlink" title="主题：1.3 查询字段 A 和 C"></a><strong>主题：1.3 查询字段 A 和 C</strong></h1><p>本主题讨论了一个重要的问题：如果你只查询字段 A 和 C，MySQL 会使用复合索引 (a, b, c)？</p><p>答案主要取决于 SQL 查询和索引的结构。如果 WHERE 子句中使用的列是复合索引的前 N 个连续列，则可以使用索引。因此，如果你在复合 (a, b, c) 索引中查询字段 A 和 C，但不查询字段 B，索引可能不会很有效。</p><p>例如，考虑下面的复合索引：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX comp_index  </span><br><span class="line">ON table(a, b, c);</span><br></pre></td></tr></tbody></table></figure><p>并且假设我们有这样的查询：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *  </span><br><span class="line">FROM table  </span><br><span class="line">WHERE a = 1 AND c = 3;</span><br></pre></td></tr></tbody></table></figure><p>在这种情况下，MySQL 将只使用字段 a 的索引，并忽略字段 c 的索引，因为字段 c 不是与字段 a 在复合索引的左侧前缀中连续的。</p><p>为了确保字段 a 和 c 的索引被使用，您可以重构复合索引为 (a, c, b) 或 (c, a, b)，并相应地调整查询。主要是 WHERE 子句中的字段应该与复合索引的左侧前缀中的字段对齐。</p><p>请记，总是一个好主意定期分析查询的性能并根据需要调整索引。MySQL 的 EXPLAIN 语句是一个有用的工具来了解如何查询与索引的交互。</p><p>在下一节中，我们将学习如何优化 MySQL 中的复合索引来获取更好的结果。</p><h1 id="主题：1-4-复合索引优化"><a href="#主题：1-4-复合索引优化" class="headerlink" title="主题：1.4 复合索引优化"></a><strong>主题：1.4 复合索引优化</strong></h1><p>优化 MySQL 中的复合索引可以显著提高数据库查询的效率和速度。记住，有效地实现索引可以节省时间、资源并提高整个应用的性能。</p><p>下面是优化复合索引的几个关键点：</p><ol><li><strong>索引列的顺序：</strong> 索引列的顺序可能会有显著的差异。如果 WHERE 子句中使用的列与复合索引的左侧前缀中的列对齐，MySQL 可以高效地使用索引。如果 WHERE 子句中使用了多个列，您可能会得到多个索引或复合索引，选择这些选项取决于特定的应用要求。</li><li><strong>索引卡 Cardinality：</strong> 索引卡 Cardinality 是索引值的多样性。索引列中具有更高卡 Cardinality 的列会导致更少的行扫描并提高查询性能。因此，在复合索引中，列的优先级应该是从左到右的。</li><li><strong>等式与范围条件：</strong> 在复合索引中，MySQL 可以对所有列进行等式检查，并对最后一列进行范围检查。如果 WHERE 子句中的范围条件位于中间，MySQL 不能使用右侧的索引部分。</li><li><strong>过度索引：</strong> 虽然索引可以加速数据检索，但它会慢下数据修改操作（如 INSERT、UPDATE 和 DELETE）的速度，因为每次修改索引列数据都需要更新索引结构。确保您不会过度索引表格——每个索引都应该有目的。</li><li><strong>使用 EXPLAIN：</strong> MySQL 的 EXPLAIN 关键字显示优化器如何选择索引来执行查询。定期使用 EXPLAIN 来了解如何查询与索引的交互。</li></ol><h1 id="主题：1-5-回顾和评估"><a href="#主题：1-5-回顾和评估" class="headerlink" title="主题：1.5 回顾和评估"></a><strong>主题：1.5 回顾和评估</strong></h1><p>在会话中，我们学习了 MySQL 中的复合索引的结构和区别，并学习了创建复合索引的语法并演示了一个例子。我们然后探讨了如何通过特定的字段，例如 A 和 C，来查询复合索引。我们进一步深入了解了如何优化使用复合索引的方法。</p><p>我们学习的关键概念包括：</p><ol><li><strong>复合索引</strong>：它是多列的索引，可以显著加快查询执行的速度。</li><li><strong>创建复合索引</strong>：我们学习了语法并演示了一个例子。</li><li><strong>查询 A 和 C 字段</strong>：我们观察到 MySQL 只能使用索引中的列的左到右的部分，并且不会跳过任何列，只要 WHERE 子句中的列被引用。</li><li><strong>复合索引优化</strong>：我们学习了优化复合索引的有效技巧和技巧，包括索引列的顺序、索引卡inal性、区分等式和范围条件、避免过索引和使用 EXPLAIN 关键字。</li></ol><p>现在是时候评估你对复合索引的了解了。</p><p>例子问题：</p><p>假设你是运营一个线上书店，书库中有千千本书。主要的 <code>books</code> 表在 MySQL 数据库中具有以下列：<code>id, title, author, genre, publication_year 和 price</code>。你发现自己经常执行以下查询：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *  </span><br><span class="line">FROM books  </span><br><span class="line">WHERE genre = '科幻' AND publication_year = 2018;</span><br></pre></td></tr></tbody></table></figure><p>为了优化这个查询，你创建了以下复合索引：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX genre_year_index  </span><br><span class="line">ON books (genre, publication_year);</span><br></pre></td></tr></tbody></table></figure><p>这个复合索引应该会使你的常用查询变得更快。</p><p>现在，它是你的回合！</p><p>问题：圣诞节到来了，你的商店正在为许多书籍提供折扣。你打算通过电子邮件向所有购买了《科幻》书籍发表后 2010 年的用户发送邮件。从 <code>orders</code> 表中获取用户 ID 列表，该表具有以下列：<code>order_id, user_id, book_id, order_date</code>。假设还有一个名为 <code>orders_books</code> 的中间表具有 <code>order_id, book_id</code>。</p><hr><p>要从 <code>orders</code> 表中获取购买了《科幻》书籍发表后 2010 年的用户 ID，我们可以使用 JOIN 来合并 <code>orders</code>、<code>orders_books</code> 和 <code>books</code> 表中的信息。</p><p>您的 SQL 查询可能会像下面这样：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT o.user_id  </span><br><span class="line">FROM orders AS o  </span><br><span class="line">JOIN orders_books AS ob ON o.order_id = ob.order_id  </span><br><span class="line">JOIN books AS b ON ob.book_id = b.id  </span><br><span class="line">WHERE b.genre = '科幻' AND b.publication_year &gt; 2010;</span><br></pre></td></tr></tbody></table></figure><p>这个查询检查每个订单中的书的类别和出版年份，并返回用户 ID，其中匹配了条件。 <code>DISTINCT</code> 关键字用于删除结果集中的重复 <code>user_id</code>。</p><p>记住，了解数据的结构和如何相互关联是在使用 SQL 和数据库时至关重要的。同时，确保为您的查询设置了正确的索引是至关重要的。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview19/">https://programmerscareer.com/mysql-interview19/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;让我们创建一个以MySQL为重点的课程计划，特别是理解复合索引的应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/reserve/d1Ntvq9mSVmV0RcnWN1Y_23rd%20Studios%20Photography%20Boulder%20Colorado.jpg?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MTAxMjl8&amp;amp;ixlib=rb-4.0.3&amp;amp;q=85&amp;amp;w=500&amp;amp;h=500&quot; alt=&quot;photo by Paul Talbot on Unsplash&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试问题:MySQL常用的存储引擎有哪些?有什么区别?</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview18/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview18/</id>
    <published>2024-05-12T18:34:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>这里是MySQL存储引擎学习计划的详细课程</p><p><img src="https://images.unsplash.com/photo-1515595967223-f9fa59af5a3b?crop=entropy&amp;cs=srgb&amp;fm=jpg&amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MTAwNjJ8&amp;ixlib=rb-4.0.3&amp;q=85&amp;w=500&amp;h=500" alt="photo by Chua Bing Quan on Unsplash"></p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：1-1-MySQL存储引擎简介"><a href="#主题：1-1-MySQL存储引擎简介" class="headerlink" title="主题：1.1 MySQL存储引擎简介"></a><strong>主题：1.1 MySQL存储引擎简介</strong></h1><p>在 MySQL 中，存储引擎是数据库管理系统使用的底层软件组件，负责创建、读取、更新和删除（CRUD）数据的管理。简单来说，它就是负责数据库中信息的管理。您可以将其视为与磁盘上的文件系统类似的组件。</p><p>每个 MySQL 数据库中的表都是使用特定的存储引擎创建的。 MySQL 提供了多种存储引擎，例如 InnoDB、MyISAM、MEMORY 等，可帮助我们选择最合适的一种。</p><p>与数据库交互时，我们主要不需要关心存储引擎——我们可以只关注写 SQL 查询。但是，存储引擎的选择会影响数据库的各种特性，例如：</p><ul><li><strong>事务支持：</strong> 事务允许多次数据修改在数据库中处理为一个单元的工作，或者所有数据修改都被提交到数据库中，或者未被提交。 InnoDB 支持事务，MyISAM 不支持。</li><li><strong>锁定级别：</strong> 锁定防止多个进程相互干扰。不同的存储引擎使用不同的锁定机制，从行级到表级锁定。</li><li><strong>数据持久性和崩溃恢复：</strong> 这是数据库在崩溃或电源失败时的恢复能力。 InnoDB 具有强的数据持久性和崩溃恢复能力。</li></ul><p>您可能正在问：<em>可以在一个数据库中使用多个存储引擎吗？</em> 是的！事实上，每张表可以使用不同的存储引擎。</p><h1 id="主题：1-2-了解-InnoDB-引擎"><a href="#主题：1-2-了解-InnoDB-引擎" class="headerlink" title="主题：1.2 了解 InnoDB 引擎"></a><strong>主题：1.2 了解 InnoDB 引擎</strong></h1><p>InnoDB 是 MySQL 的默认存储引擎。它提供了标准的 ACID 事务特性，并且具有行级锁定和外键关系。这些是为什么它在数据完整性和性能方面非常受欢迎的原因。</p><p>让我们来详细了解这些特性：</p><ul><li><strong>ACID 兼容性：</strong> ACID 是事务处理的关键概念。它保证数据的完整性和可靠性，并且确保数据在所有操作中保持一致和可靠。</li><li><strong>行级锁定：</strong> 与 MyISAM 中的表级锁定相比，InnoDB 使用行级锁定，其中每行被修改的过程中锁定该特定行，并允许其他进程修改其他行。</li><li><strong>外键关系：</strong> 外键强制在数据库中相关的表之间维护引用完整性。换句话说，它帮助防止破坏链接之间的表。</li></ul><p>InnoDB 还具有崩溃恢复能力。这意味着 InnoDB 可以自动修正因预 mature 关闭或主要故障而导致的任何不一致性。</p><p>在性能方面，InnoDB 使用多版本并发控制（MVCC）来避免在执行 SELECT 语句时需要读锁定。这是在具有忙站点的繁忙网站上非常有帮助的，因为 SELECT 语句非常常见，并且数据完整性是至关重要的。</p><h1 id="主题：1-3-了解-MyISAM-引擎"><a href="#主题：1-3-了解-MyISAM-引擎" class="headerlink" title="主题：1.3 了解 MyISAM 引擎"></a><strong>主题：1.3 了解 MyISAM 引擎</strong></h1><p>MyISAM 是 MySQL 中最早的存储引擎之一，在 MySQL 版本 5.5 之前，MyISAM 是默认的存储引擎。MyISAM 有一些特别的特性和用例，使它在特定的场景中非常有效。</p><p>MyISAM 使用完整的表级锁定来处理 INSERT、UPDATE 和 DELETE 操作。这意味着当行被写入或更新时，整个表，该行是一部分，被锁定，并且其他操作不能在同一表上写入，直到写入或更新过程完成。</p><p>虽然这可能被看作是 InnoDB 所提供的行级锁定的缺点，但在读操作远远多于写操作的场景中，表级锁定是完美的。例如，在博客或网站上，大多数时间你只是显示数据，并且数据更新非常少频。</p><p>另一项重要特性是 MyISAM 支持全文搜索索引，允许自然语言搜索在字符字段中。虽然 InnoDB 现在也支持这个特性了，但 MyISAM 曾经是全文搜索的主要选择很长时间。</p><p>然而，MyISAM 不支持事务和外键约束，这可能是某些应用的重大缺点。此外，它缺少崩溃恢复，因此崩溃可能会导致数据丢失或数据损坏。</p><h1 id="主题：1-4-其他-MySQL-存储引擎"><a href="#主题：1-4-其他-MySQL-存储引擎" class="headerlink" title="主题：1.4 其他 MySQL 存储引擎"></a><strong>主题：1.4 其他 MySQL 存储引擎</strong></h1><p>除了 InnoDB 和 MyISAM 之外，MySQL 还提供了其他存储引擎，每个引擎都有其特别的优势和最佳使用案例。让我们来了解一下：</p><ul><li><strong>MEMORY 引擎：</strong> 名字就说明了，这个引擎保存所有数据在内存中，提供了非常快的数据访问时间。但是，请记住，使用 MEMORY 引擎的表中的数据在服务器关闭或崩溃时会丢失。它非常适合存储会话或临时数据。</li><li><strong>CSV 引擎：</strong> 这个引擎允许您以逗号分隔值 (CSV) 格式访问数据。您甚至可以使用任何文本编辑器来查看和编辑表中的数据。它不支持索引，因此每行搜索都是全表扫描。</li><li><strong>ARCHIVE 引擎：</strong> 如果您需要存储大量未索引的数据，例如日志，这是您所需要的引擎。它使用压缩来节省空间并以易于备份和传输的方式存储数据。虽然 ARCHIVE 引擎允许简单的 SELECT 和 INSERT 语句，但它不支持事务或能够删除或更新记录。</li><li><strong>BLACKHOLE 引擎：</strong> Blackhole 引擎接受数据，但丢弃它并不存储它。您可能会问，为什么它有用？Blackhole 引擎用于复制到多个从服务器，并且还用于数据库服务器的审计日志。</li><li><strong>FEDERATED 引擎：</strong> Federated 存储引擎允许您访问位于其他数据库上的表。它提供了能够创建一个逻辑数据库的能力，其中包含多个物理服务器。</li></ul><p>每个这些引擎都有独特的功能和适用于不同场景的最佳使用案例。这就是 MySQL 的可插拔存储引擎架构的美妙之处——您可以选择最适合您需求的一个。</p><h1 id="主题：1-5-存储引擎比较"><a href="#主题：1-5-存储引擎比较" class="headerlink" title="主题：1.5 存储引擎比较"></a><strong>主题：1.5 存储引擎比较</strong></h1><p>MySQL 的多种存储引擎，每个存储引擎具有独特的特性集，使其成为适应各种工作负载的灵活选择。现在，我们将比较这些存储引擎，探讨其强项和弱项，并建议适合的场景。</p><ol><li><strong>InnoDB vs. MyISAM</strong>：在写操作密集或要求事务的工作负载中，InnoDB优于 MyISAM，因为它提供 ACID 事务特性、行级锁定和崩溃恢复。然而，如果工作负载是读密集，并且事务的持久性或原子性不是关键问题，MyISAM可能是有意义的选择。</li><li><strong>InnoDB/MyISAM vs. MEMORY</strong>：MEMORY 存储引擎通过在内存中存储所有数据来提供 lightning-fast 数据访问，适合存储临时或会话数据。然而，与 InnoDB 和 MyISAM 不同，所有数据在服务器关闭或崩溃时都会丢失。</li><li><strong>InnoDB/MyISAM/MEMORY vs. CSV</strong>：CSV 存储引擎使数据处理变得更加简单和灵活，因为它允许在任何文本编辑器中编辑数据。然而，由于缺少索引，因此对每行搜索可能会进行全表扫描，并且可能不是对大型工作负载的有效解决方案。</li><li><strong>InnoDB/MyISAM/MEMORY/CSV vs. ARCHIVE</strong>：当处理大量 seldom-referenced 数据时，例如日志或历史事务，ARCHIVE 存储引擎具有优势，因为它通过压缩数据来节省存储空间。</li><li><strong>InnoDB/MyISAM/MEMORY/CSV/ARCHIVE vs. BLACKHOLE 和 FEDERATED</strong>：这两个存储引擎相对较特殊，与其他存储引擎相比较：BLACKHOLE 可能有助于审计日志或多主复制，而 FEDERATED 可能有助于创建逻辑上的单个数据库来自多个物理服务器。</li></ol><p>记住，选择正确的存储引擎主要取决于您的特定工作负载和应用要求。</p><h1 id="主题：1-6-选择正确的存储引擎"><a href="#主题：1-6-选择正确的存储引擎" class="headerlink" title="主题：1.6 选择正确的存储引擎"></a><strong>主题：1.6 选择正确的存储引擎</strong></h1><p>选择正确的存储引擎对设置 MySQL 数据库至关重要，因为它可以大大影响应用的性能和可靠性。下面是要考虑的因素：</p><ul><li><strong>数据完整性</strong>：如果您的应用要求高数据完整性，并且事务需要原子性（所有或者没有），您应该考虑使用 InnoDB 存储引擎，它支持 ACID（原子性、一致性、隔离性、持久性）特性。</li><li><strong>全文搜索</strong>：如果您计划运行全文搜索查询，MyISAM 和 InnoDB 都支持这些，但具有不同的特性。您需要独立地探索这些特性，以确定它们是否适合您的使用情况。</li><li><strong>内存使用</strong>：如果您需要最大的读/写速度，并且数据是临时的（例如会话数据），MEMORY 存储引擎，它将所有数据存储在内存中，可能是最佳选择。</li><li><strong>大量数据</strong>：处理大量 seldom-referenced 或历史数据时，考虑 ARCHIVE 存储引擎，它通过压缩数据来有效地存储数据。</li><li><strong>读/写操作比率</strong>：评估应用的读/写操作比率。如果读操作明显多于写操作，您可能会从 MyISAM 中受益。然而，InnoDB 更适合写密集的应用。</li><li><strong>服务器故障</strong>：考虑发生故障时的情况是至关重要的。如果数据持久性是关键问题，InnoDB 应该是您的选择，因为它可以通过事务日志恢复从故障中。然而，MyISAM 不保证数据持久性在故障时。</li></ul><h1 id="主题：1-7-回顾和评估"><a href="#主题：1-7-回顾和评估" class="headerlink" title="主题：1.7 回顾和评估"></a><strong>主题：1.7 回顾和评估</strong></h1><p>在我们的上一课中，我们深入了解了 MySQL 的各种存储引擎，了解了它们的独特特性并比较了它们基于某些标准。我们已经：</p><ul><li>定义了存储引擎是什么并讨论了它们在 MySQL 中的角色。</li><li>了解了 InnoDB 和 MyISAM 存储引擎的特性和优势。</li><li>探索了其他 MySQL 存储引擎，例如 MEMORY、CSV 和 ARCHIVE 等。</li><li>比较了这些存储引擎，以了解它们的最佳使用场景。</li><li>讨论了在选择正确的存储引擎时要考虑的因素。</li></ul><p>让我们测试一下你的理解，在我们结束这个系列之前：</p><ol><li><strong>问题 1：</strong> InnoDB 与 MyISAM 有什么区别，并且在哪些情况下可能会更喜欢使用其中一个？</li><li><strong>问题 2：</strong> 描述一种情况，在哪里使用 MEMORY 存储引擎可能会有所帮助？</li><li><strong>问题 3：</strong> 如果您有存储大量日志数据的要求，您将选择哪个存储引擎，并且为什么？</li><li><strong>问题 4：</strong> 在选择数据库时要考虑的几个因素是什么？</li></ol><p>请按顺序回答这些问题。</p><hr><p><strong>答案 1：</strong> InnoDB 是一个存储引擎，它提供了 ACID（原子性、一致性、隔离性、持久性）完整性支持的事务功能，并且在写密集的应用或需要高数据完整性的场景中非常有用。然而，MyISAM 通常用于读密集的应用，因为它具有更快的读操作。然而，请记，MyISAM 不支持事务和崩溃安全性功能。</p><p><strong>答案 2：</strong> MEMORY 存储引擎可能会在处理临时数据时非常有用，例如会话数据。因为所有数据都存储在内存中，并且比磁盘存储更快，它提供了极快的访问时间。然而，请记，所有使用此存储引擎的数据在服务器终止或崩溃时都会丢失。</p><p><strong>答案 3：</strong> ARCHIVE 存储引擎可能会在处理大量偶尔引用数据或日志数据时非常有用。这个存储引擎支持压缩，可以节省大量的存储空间。</p><p><strong>答案 4：</strong> 在选择数据库时要考虑的因素可能包括：</p><ul><li>数据库主要处理的操作类型（读操作或写操作）。</li><li>事务支持和崩溃安全性机制是否是必需的。</li><li>数据量和接受的访问/读写速度。</li><li>特定功能，例如全文索引或 GIS 功能。</li></ul><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview18/">https://programmerscareer.com/mysql-interview18/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;这里是MySQL存储引擎学习计划的详细课程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1515595967223-f9fa59af5a3b?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MTAwNjJ8&amp;amp;ixlib=rb-4.0.3&amp;amp;q=85&amp;amp;w=500&amp;amp;h=500&quot; alt=&quot;photo by Chua Bing Quan on Unsplash&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试问题:MySQL MVCC的实现原理</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview17/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview17/</id>
    <published>2024-05-12T18:32:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>我们可以深入了解MySQL如何实现多版本并发控制(MVCC)的细节</p><p><img src="https://images.unsplash.com/photo-1464983953574-0892a716854b?crop=entropy&amp;cs=srgb&amp;fm=jpg&amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MDk5ODJ8&amp;ixlib=rb-4.0.3&amp;q=85&amp;w=500&amp;h=500" alt="photo by Dino Reichmuth on Unsplash"></p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：解析-MVCC"><a href="#主题：解析-MVCC" class="headerlink" title="主题：解析 MVCC"></a>主题：解析 MVCC</h1><p>多版本并发控制 (MVCC) 是数据库管理系统中使用的技术，用于处理多个用户同时访问同一数据而不发生冲突，从而提高处理效率。</p><p>简单来说，MVCC 允许多个事务同时访问同一数据而不发生冲突或需要读锁，这可能会严重影响性能。这是通过为事务创建数据的一个“快照”来实现的，其他并发事务不会影响这个快照。</p><p>现在，让我们分解一下术语 MVCC：</p><ul><li><strong>多版本</strong>：这意味着数据库保存多个版本的同一行。版本是数据在某个时间点的一个快照。</li><li><strong>并发控制</strong>：这表明技术用于处理同时进行的事务，不发生冲突，确保每个事务都保持数据库的假象，就好像它是唯一访问数据库的。</li></ul><p>MySQL 在其 InnoDB 存储引擎中实现了 MVCC。当事务更新 InnoDB 中的行时，原始行不会立即被覆盖或删除。相反，InnoDB 会存储更新前的旧版本，以便其他正在进行的事务可以看到原始版本。这就是数据行的多版本来源。</p><p>所以，为什么我们在 MySQL 中使用 MVCC？主要是性能原因。通过允许多个事务同时访问同一快照的数据，我们避免了读锁，这可能会严重影响性能，特别是在许多用户同时查询和更新同一数据库的情况下。</p><h1 id="主题：MySQL-中的-MVCC-是如何工作的"><a href="#主题：MySQL-中的-MVCC-是如何工作的" class="headerlink" title="主题：MySQL 中的 MVCC 是如何工作的"></a>主题：MySQL 中的 MVCC 是如何工作的</h1><p>让我们来详细地了解 MySQL 中的 MVCC 是如何工作的。</p><p>当事务在 MySQL (InnoDB) 中开始时，它会被分配一个唯一的事务 ID。这个 ID 用于创建事务的数据库视图。这个视图包含已提交数据的所有版本，直到事务开始时，并且包含事务自身所做的更改。事务不能看到其他并发事务所做的更改，这为其提供了一致的快照并确保隔离性。</p><p>当行被修改时，InnoDB 不会覆盖现有数据。相反，它会写入新行版本并保存旧版本的信息在一个名为撤销日志的区域中。这个日志包含需要反转更改的信息，如果事务被回滚，并且提供旧版本的行给其他事务，如果它们需要它们。</p><p>现在，让我们讨论一些相关的主题：读视图、撤销日志和清理。</p><p><strong>读视图</strong> 是 InnoDB 使用的机制，用于实现一致的读取，即读取数据库的快照，与事务开始时相对应。</p><p><strong>撤销日志</strong> 是 MVCC 的一个关键部分。当事务修改数据时，InnoDB 会写入新行并在撤销日志中存储需要反转更改的信息。如果其他事务需要看到旧版本的行，InnoDB 使用撤销日志中的信息来重构它们。</p><p><strong>清理</strong> 与 InnoDB 如何清理不再需要的旧版本的行有关。一旦所有可能需要访问旧版本的行的事务都完成了，InnoDB 就可以释放这些版本所占用的空间。这个过程被称为清理。</p><h1 id="主题：ACID-特性和-MVCC"><a href="#主题：ACID-特性和-MVCC" class="headerlink" title="主题：ACID 特性和 MVCC"></a>主题：ACID 特性和 MVCC</h1><p>在可靠的数据库管理系统中，维持 ACID 原则（Atomicity、Consistency、Isolation、Durability）是至关重要的方面之一。</p><ol><li><strong>原子性</strong>：如果事务包含多个操作，原子性意味着要么所有操作都成功执行，要么都不执行。事务不能部分完成。如果发生任何操作中的错误，整个事务将被回滚。</li><li><strong>一致性</strong>：一致性意味着事务应该将数据库从一个一致状态转换到另一个一致状态，根据已定义的规则。例如，如果帐户没有足够的余额进行提款，则事务应该被拒绝以维持一致性。</li><li><strong>隔离性</strong>：隔离性在多个事务同时执行时发挥作用。它意味着每个事务应该像是唯一一个事务一样执行。事务的中间状态不应该可见于其他事务。</li><li><strong>持久性</strong>：持久性确保事务一旦提交，就会永久保存。换句话说，事务的结果是永久的。</li></ol><p>MVCC (多版本并发控制) 与 ACID 特性相关，下面是详细的解释：</p><p>在 MySQL（特别是其 InnoDB 存储引擎）的上下文中，MVCC 提供了隔离和一致性。</p><p><strong>隔离性</strong> 由每个事务使用其自身的数据库快照来保证。即使多个事务同时试图读写同一数据，每个事务也会看到其自身的一致快照，就好像它是唯一一个事务一样。</p><p><strong>一致性</strong> 由 MVCC 中的回滚日志来维护。如果事务失败或回滚，则可以撤销该事务中的更改，以确保数据库处于一致状态。此外，通过为事务创建事务特定的数据视图，可以确保事务总是处理一致的数据集。</p><h1 id="主题：快照读和当前读"><a href="#主题：快照读和当前读" class="headerlink" title="主题：快照读和当前读"></a>主题：快照读和当前读</h1><p>在 MySQL 中，当 MVCC (多版本并发控制) 发挥作用时，有两种主要类型的读取操作：快照读和当前读。让我们详细了解这些概念。</p><p><strong>快照读</strong></p><p>快照读，就像名字所表明的，提供了数据库在事务开始时的一致快照。它不会看到其他并发执行的事务所做的更改。这种读取是默认模式下 <code>SELECT</code> 语句的。快照读是 MVCC 的核心，它为 MVCC 提供了“一致视图”的概念。</p><p><strong>当前读</strong></p><p>与快照读不同，当前读看到最新提交的数据，包括其他事务所做的更改。模式如 <code>SELECT…FOR UPDATE</code> 和 <code>SELECT…LOCK IN SHARE MODE</code> 使用当前读。它还用于当前事务所做的数据更改，例如 <code>UPDATE</code>、<code>INSERT</code> 和 <code>DELETE</code>。</p><p>这两种类型的读取提供了事务处理数据的灵活方法。事务是否要看到数据库在事务开始时的状态，或者要看到最新数据，包括其他事务所做的更改，取决于使用哪种类型的读取。</p><h1 id="主题：在-MySQL-中管理死锁"><a href="#主题：在-MySQL-中管理死锁" class="headerlink" title="主题：在 MySQL 中管理死锁"></a>主题：在 MySQL 中管理死锁</h1><p>现在，让我们探讨 MySQL 的 MVCC 中的另一个关键方面——处理死锁。</p><p>死锁发生在两个或多个事务同时持有和请求锁时，创造了一个循环依赖，无法解决。 无处理，这些事务可能会永久等待，显然不是理想的。</p><p>MySQL 处理死锁的方法是使用等待图。简单地说，当事务 A 等待事务 B 释放行锁时，就在 A 和 B 之间添加一条边。 如果添加这条边创建了一个循环，则检测到死锁。</p><p>在检测到死锁后，MySQL 需要解决它。它通过选择一个事务作为“受害者”并回滚它来完成。 在大多数情况下，它选择已经做了最少工作的事务，以便少量的工作被丢弃。 回滚受害者事务后，死锁就被解决了。</p><p>在 MySQL 中，您可以使用 <code>SHOW ENGINE INNODB STATUS;</code> 来获取有关最近死锁的信息，这可以帮助调试。</p><p>死锁管理，尽管大多数自动，要谨慎地处理事务的设计和执行。建议尽可能地缩短事务并尽可能地提交它们，以减少死锁的可能性。</p><h1 id="主题：MVCC-性能影响"><a href="#主题：MVCC-性能影响" class="headerlink" title="主题：MVCC 性能影响"></a>主题：MVCC 性能影响</h1><p>尽管 MySQL 的 MultiVersion Concurrency Control (MVCC) 在内部为并发访问提供了许多好处，但要识别 MVCC 不是无价的。 让我们来探讨一些这些：</p><ol><li><strong>磁盘空间</strong>: 其中一个主要开销是增加的磁盘空间。 由于 MVCC 保存不同版本的行以提供隔离、一致的视图给事务，需要更多的磁盘空间。 这可能会在重读写混合的工作负载中显著。</li><li><strong>CPU 和 I/O 资源</strong>: 生成多版本的数据、维护它们并清理不必要的版本 (垃圾回收) 可能会耗费 CPU 和 I/O 资源。</li><li><strong>锁定开销</strong>: 尽管 MVCC 减少了锁定，它并不完全消除了，特别是对写事务 (插入、更新、删除) 的锁定。 这些锁定增加了性能开销。</li><li><strong>增加复杂性</strong>: MVCC 增加了数据库引擎的复杂性。 它需要管理多版本的数据、处理回滚、解决冲突和清理旧版本。 这种复杂性增加了整体性能的开销。</li></ol><p>在哪些场景中可能考虑替代 MVCC？</p><p>虽然 MVCC 为多用户访问提供了出色的好处，但它可能不是每个场景的最佳选择。 例如，在大量写入一次并多次读取的应用程序中，可能更好地考虑 MyISAM 存储引擎，它不支持 MVCC。</p><p>此外，在要求绝对最新数据的应用程序中，也可能要考虑其他方法，因为 MVCC 提供了数据的“快照”，而不是最新版本。</p><p>要了解工作负载、性能期望和硬件资源可用性之前，就要考虑使用 MVCC 的决定。</p><h1 id="主题：回并评估"><a href="#主题：回并评估" class="headerlink" title="主题：回并评估"></a>主题：回并评估</h1><p>现在，让我们回和总结 MySQL 中 MultiVersion Concurrency Control (MVCC) 的不同方面：</p><ol><li><strong>MVCC 是数据库管理系统中用于处理并发事务的方法</strong>。</li><li><strong>MVCC 在 MySQL 中提供每个事务的“快照”，允许多个事务同时读取（并写入）同一数据项</strong>，大大提高了数据库的性能和可伸缩性。</li><li><strong>快照读和当前读是 MySQL 中 MVCC 的两个关键概念</strong>。快照读提供事务开始时数据的一致视图，并确保事务使用了一致的数据状态。当前读是指考虑其他事务已提交的最新数据的一种读取方式。</li><li><strong>MVCC 与数据库的 ACID 属性密切相关</strong>，确保事务的原子性、一致性、隔离性和持久性。</li><li><strong>MVCC 在 MySQL 中处理死锁</strong>，这是两个事务等待对方释放资源的情况。</li><li><strong>虽然 MVCC 提供了许多优势，但它也不是完全免费的</strong>，例如增加磁盘空间和 CPU 使用量。</li></ol><p>这些是我们在 MySQL 中讨论 MVCC 的多个方面。现在，就是时候评估你的理解了。考虑以下问题：</p><ul><li>MVCC 如何在 MySQL 中提高并发事务？</li><li>MySQL 中 MVCC 的快照读和当前读有什么区别？</li><li>MVCC 在 MySQL 中是如何处理死锁的？</li><li>MVCC 在使用时会带来哪些性能交换？</li></ul><p>思考这些问题。您可以在纸上写下回答或者简单地为自我评估思考。</p><hr><ol><li>MVCC 通过允许多个用户同时访问同一行的表来提高并发事务。每个事务都会获取数据的一致状态，在事务开始时。</li><li>在 MySQL 中，快照读和当前读是两种不同的读取隔离级别。快照读是指事务读取数据库状态的一致快照，确保事务内部的数据一致性。当前读是指考虑其他事务已提交的最新数据的一种读取方式。</li><li>MVCC 在 MySQL 中处理死锁通过 wait-for 图来处理。当一个事务等待另一个事务释放锁时，会在 wait-for 图中添加一条边。如果添加这条边创造了一个循环，则会检测到死锁。MySQL 会选择一个事务作为“受害者”并回滚它来解决死锁。</li><li>MVCC 与数据库的 ACID 属性密切相关，确保事务的原子性、一致性、隔离性和持久性。</li></ol><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview17/">https://programmerscareer.com/mysql-interview17/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;我们可以深入了解MySQL如何实现多版本并发控制(MVCC)的细节&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1464983953574-0892a716854b?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MDk5ODJ8&amp;amp;ixlib=rb-4.0.3&amp;amp;q=85&amp;amp;w=500&amp;amp;h=500&quot; alt=&quot;photo by Dino Reichmuth on Unsplash&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试问题:什么时候分割数据库，什么时候分割表?</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview16/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview16/</id>
    <published>2024-05-12T18:29:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>让我们概述一下在MySQL中拆分数据库和表的课程</p><p><img src="https://images.unsplash.com/photo-1488489153583-89ce18dd4968?crop=entropy&amp;cs=srgb&amp;fm=jpg&amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MDk3NTh8&amp;ixlib=rb-4.0.3&amp;q=85&amp;w=500&amp;h=500" alt="photo by Geranimo on Unsplash"></p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：了解数据分布"><a href="#主题：了解数据分布" class="headerlink" title="主题：了解数据分布"></a>主题：了解数据分布</h1><p>你好，我们将在本课程中开始了解数据分布。首先，让我们确定我们所说的“数据分布”是指什么。</p><p>数据分布是将数据、计算任务和应用程序分布在网络中的多个计算机上的方法。分布数据可以提高应用程序的性能、可靠性和可访问性。 😊</p><p>数据分布有多种原因。请允许我为您介绍其中的一些主要优势：</p><p><strong>提高性能</strong>：通过分布数据，可以提高应用程序访问数据的速度。如果有效地执行，数据分布可以确保资源位于需要它们的地方，从而降低访问延迟并提高速度。</p><p><strong>冗余和可靠性</strong>：通过数据分布，可以存储多个数据副本在不同位置。这提供了冗余并增加了数据的总体可靠性。如果一个服务器失败，应用程序可以从另一个服务器访问相同的数据。</p><p><strong>可伸缩性</strong>：通过数据分布，当业务或应用程序增长时，可以更轻松地扩展基础设施。新的服务器可以随时添加到网络中。</p><p><strong>负载平衡</strong>：通过有效地分布数据，可以确保服务器的负载均衡。这确保了无单点瓶，影响应用程序性能的情况不会发生。</p><p>数据分布可以采用多种方法，例如水平分区（也称为分片）、垂直分区和功能分区。每种方法都有其特点并适用于不同类型的应用程序。我们将在后续课程中详细探讨这些。</p><h1 id="主题：MySQL数据库分割（分片）"><a href="#主题：MySQL数据库分割（分片）" class="headerlink" title="主题：MySQL数据库分割（分片）"></a>主题：MySQL数据库分割（分片）</h1><p>我很高兴看到你想深入了解！现在，让我们深入探讨数据分割，也就是<strong>分片</strong>。</p><p>在 MySQL 中，分片是将一个较大的数据库分割成更小的、更易于管理的部分，称为分片。每个分片都是一个独立的数据库。</p><p>想象一下，类似于将一个大书分割成多个章节，其中每个章节可以独立存储独特的信息。类似地，当我们分片数据库时，它就像将一个大数据库分割成多个“章节”，其中每个章节存储独特的数据。</p><p>然而，为什么要这样做呢？ 🤔 分片通常用于以下几个原因：</p><p><strong>提高性能</strong>：分片可以大大提高读/写速度。当您发出查询时，不必浏览整个数据库，只需浏览特定的分片，显著提高速度。</p><p><strong>可伸缩性</strong>：分片使数据库水平可伸缩。如果您的应用程序增长并且数据库开始变得太大以适合单个服务器，您可以随时添加更多的分片。</p><p><strong>可靠性</strong>：如果一个分片出现故障，它不会导致整个应用程序崩溃。其他分片将继续运行无事故。</p><p>虽然分片有其多种好处，但它也有一些缺点：</p><p><strong>增加复杂性</strong>：整个数据库环境变得更复杂。</p><p><strong>数据分布</strong>：您必须决定如何分布数据，这可能会困难。</p><p><strong>跨分片加入数据</strong>：如果您想要加入来自不同分片的表，这可能会困难或慢。</p><p>在 MySQL 中，分片通常在应用程序层上进行，通过分片库或框架。其中一些流行的分片算法包括范围基础、列表基础、哈希基础和目录基础分片。</p><h1 id="主题：MySQL中的表分割（分区）"><a href="#主题：MySQL中的表分割（分区）" class="headerlink" title="主题：MySQL中的表分割（分区）"></a><strong>主题：MySQL中的表分割（分区）</strong></h1><p>如果记忆中，以前我们讨论了数据分布和为什么要将数据库分割成多个小部分，这个过程称为分片。</p><p>类似地，表分区是一种将大表分割成更可管理的小部分的方法，同时仍然能够访问和操作数据，就好像分区的表是一个单独的实体。换句话说，即使数据存储在分区中，从用户的角度来看，它仍然像是一个表。很酷，对吧？</p><p>现在，<strong>为什么会有用处？</strong> 😊</p><p>分区可能是解决方案，如果你有一个非常大的表，导致慢查询和更新，特别是如果该表预计会超过单个服务器的容量。</p><p>在本质上来说，分区是关于管理和优化数据以提高性能的。在不必要的复杂性出现的情况下使用分区可能会导致问题。</p><p>MySQL提供四种分区类型：</p><p><strong>1. RANGE分区：</strong> 这是分区的简单类型。它最适合处理在特定范围内的数据，例如日期或量。</p><p><strong>2. LIST分区：</strong> 它根据预定义的值列表进行分区。</p><p><strong>3. HASH分区：</strong> 在这种情况下，MySQL应用哈希函数在分区键上进行确定。它用于确保数据均匀地分布在指定数量的分区中。</p><p><strong>4. KEY分区：</strong> 它类似于哈希分区，但在这种情况下，MySQL服务器内部计算哈希值，用户不能控制。</p><p>所以，这是理论，在下一课中，我们将讨论如何在 MySQL 中实现这些原理，并提供一些实际示例来帮助说明这个概念。</p><h1 id="主题：数据库和表分割的实践例"><a href="#主题：数据库和表分割的实践例" class="headerlink" title="主题：数据库和表分割的实践例"></a><strong>主题：数据库和表分割的实践例</strong></h1><p>好的！现在让我们将数据库分片和表分区的理论应用到实际例子中。</p><p><strong>例 1：数据库分片</strong></p><p>假设我们有一个全球范围的电子商务网站，客户数据在迅速增长中。我们可以为每个地理区创建一个分片，例如北美、欧洲和亚洲等。每个区的数据库分片仅存储位于该区内的客户数据。这样，我们就可以通过局部化数据和查询来提高性能。</p><p><strong>例 2：表分区</strong></p><p>在我们的电子商务网站的情况下，考虑一种情况，其中我们有 millions 的订单，并且大多数查询都是对最近的订单进行的。我们可以决定按日期分区“Orders”表，并为每个月保存单独的分区。这样，对特定时期的查询只需要扫描更少的行并执行更快。</p><p>但是，这些是如何在实践中进行的？</p><p>对于 MySQL 中的数据库分片，有各种分片框架可用，例如 Vitess、phpMyAdmin 等。例如，在 Vitess 中，您将定义一个 VSchema，其中包含分片指令来自动分片所需的表。</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">{  </span><br><span class="line">  "sharded": true,  </span><br><span class="line">  "vindexes": {  </span><br><span class="line">    "hash": {  </span><br><span class="line">      "type": "hash"  </span><br><span class="line">    }  </span><br><span class="line">  },  </span><br><span class="line">  "tables": {  </span><br><span class="line">    "your_table": {  </span><br><span class="line">      "column_vindexes": [  </span><br><span class="line">        {  </span><br><span class="line">          "column": "your_shard_column",  </span><br><span class="line">          "name": "hash"  </span><br><span class="line">        }  </span><br><span class="line">      ]  </span><br><span class="line">    }  </span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于 MySQL 中的表分区，可以使用 ALTER TABLE 命令进行分区。</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE orders  </span><br><span class="line">PARTITION BY RANGE( YEAR(order_date) )  </span><br><span class="line">(  </span><br><span class="line">  PARTITION p0 VALUES LESS THAN (1990),  </span><br><span class="line">  PARTITION p1 VALUES LESS THAN (2000),  </span><br><span class="line">  PARTITION p2 VALUES LESS THAN (2010),  </span><br><span class="line">  PARTITION p3 VALUES LESS THAN (2020),  </span><br><span class="line">  PARTITION p4 VALUES LESS THAN MAXVALUE  </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>在这个脚本中，我们根据“order_date”列对“orders”表进行分区。</p><p>请记，这些过程通常由应用程序或框架处理，因此对 SQL 有一些了解是必要的。同时，分片和分区都会带来复杂性，只有在其好处超过复杂性时才应该使用它们。</p><h1 id="主题：作出明智的决定"><a href="#主题：作出明智的决定" class="headerlink" title="主题：作出明智的决定"></a><strong>主题：作出明智的决定</strong></h1><p>我们已经讨论了很多内容，最后我们将讨论如何作出一个有理由的决定，重复了前面的课程中的一些关键点，并提供了一些额外的提示。</p><p>下面是要考虑的因素：</p><p><strong>数据库分片（分割）决策作出：</strong></p><ol><li><strong>数据大小</strong>：如果数据库变得太大而难以有效处理，可能需要分割。</li><li><strong>性能</strong>：如果数据库中的频繁查询因数据量而变慢，分割可以帮助提高处理速度，因为它可以减少每个查询处理的数据量。</li><li><strong>可伸缩性</strong>：如果您预计数据库将超过单个服务器的容量，在早期阶段实施分割可能是一个好的预防措施。</li><li><strong>数据类型</strong>：分割可能会受数据类型的影响。例如，多租户应用程序，其中来自多个客户的数据存储在同一数据库中是一个分割的好候选。</li></ol><p><strong>表分区决策作出：</strong></p><ol><li><strong>表大小</strong>：如果表在数据库中变得无限大，可能需要分区。</li><li><strong>查询性能</strong>：如果大多数查询只处理表的某个部分（例如，最近的条目），分区可以大大加快这些查询的速度。</li><li><strong>维护</strong>：分区也可以帮助维护表（例如，备份、更新和删除），因为这些操作可以在单个分区上执行，而不是对整个表进行线下维护。</li></ol><p>在决定是否要分割或分区时，应该根据需要提高性能和处理大量数据或两者都是的。然而，这是一个复杂性增加的决定，应该只有在必要时并且其他简单优化技术不足时才应用。</p><h1 id="主题：回顾和评估"><a href="#主题：回顾和评估" class="headerlink" title="主题：回顾和评估"></a><strong>主题：回顾和评估</strong></h1><p>我们已经完成了数据分布的旅程，特别是MySQL中的数据库分割（分片）和表分区（分区）。现在，让我们快速回顾一下主要点，然后转到评估来巩固您的学习。</p><h2 id="主要点"><a href="#主要点" class="headerlink" title="主要点"></a><strong>主要点</strong></h2><ol><li>了解数据分布：数据分布具有显著的性能优势，但也会增加复杂性。了解何时和怎样使用它是至关重要的。</li><li>MySQL数据库分割（分片）：MySQL数据库分割涉及将数据库分割为更小的部分，基于一个键。它可以显著提高查询响应时间，增加可靠性并支持水平缩放。</li><li>MySQL表分区（分区）：MySQL表分区涉及将表分割为更小的部分，而无需更改SQL查询。分区可以根据各种策略进行，例如范围、列值、哈希值等。</li><li>实际示例：我们讨论了如何为全球客户的电子商务网站实现数据库分割，并如何使用表分区来提高性能，以处理最近的数据。</li><li>作出明智的决定：决定是否要实现数据库分割或表分区，或者两者都要，并为什么要考虑数据大小、查询性能、可伸缩性和数据类型。</li></ol><p>现在，让我们来进行评估。您将被提供一些场景，并要求决定是否要使用分割、分区、两者都要，或者不要，并为什么。</p><h2 id="评估场景"><a href="#评估场景" class="headerlink" title="评估场景"></a><strong>评估场景</strong></h2><ol><li>场景 1：您正在为医院设计应用程序，其中包含一个名为 <code>patients</code> 的表，用于存储患者记录。医院每年处理数千名患者，并且大多数患者只会来一次每年。大多数查询涉及访问最近的患者记录。您应该使用分割、分区、两者都要，或者不要，并为什么？</li><li>场景 2：您正在为技术新闻网站开发应用程序，其中文章经常更新以进行修正，并且新信息和用户评论被不断地写入。评论被存储在一个名为 <code>comments</code> 的表中，每条评论与一个文章相关。您应该使用分割、分区、两者都要，或者不要，并为什么？</li><li>场景 3：您正在为全球范围内的电子商务网站开发应用程序，其中包含一个名为 <code>transactions</code> 的表，包含网站上的所有交易的详细信息。您应该使用分割、分区、两者都要，或者不要，并为什么？</li></ol><hr><p><strong>场景 1</strong>：根据场景，应该在 <code>patients</code> 表上实现 <strong>表分区</strong>。查询涉及访问最近的患者记录，并且分区可以为这些查询提供有效的查询性能。分割可能不是必要的，因为我们没有明确的分割键，并且管理分布式事务和维护一致性可能会增加不必要的复杂性。</p><p><strong>场景 2</strong>：在这种情况下，可能的解决方案是在 <code>comments</code> 表上实现分区。基于日期的分区系统可能会很好地工作，因为旧文章的评论可能会被频繁地读取，但不太可能会更新。分割可能会对这种情况造过多的复杂性。</p><p><strong>场景 3</strong>：在这种情况下，分割 <code>transactions</code> 表可能会有好处，特别是在交易的位置上。这可能会使来自同一地区的交易被分组在一起，从而可能会导致更有效的查询。此外，分割还可能会帮助平衡多个数据库的负载，并为其提供额外的规模和性能优势。此外，您可能还会考虑分区单个分片。</p><p>这些是根据提供的信息而作出的推荐解决方案。然而，每个应用程序可能有独特的要求和约束，并且在作出设计决定时要考虑所有因素。记住，先测量再优化！</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview16/">https://programmerscareer.com/mysql-interview16/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;让我们概述一下在MySQL中拆分数据库和表的课程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1488489153583-89ce18dd4968?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MDk3NTh8&amp;amp;ixlib=rb-4.0.3&amp;amp;q=85&amp;amp;w=500&amp;amp;h=500&quot; alt=&quot;photo by Geranimo on Unsplash&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>常见(20+)软件面试问题(+答案)关于MySQL/Redis/Kafka</title>
    <link href="https://programmerscareer.com/zh-cn/software-interview-set/"/>
    <id>https://programmerscareer.com/zh-cn/software-interview-set/</id>
    <published>2024-05-12T18:25:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>收集了关于MySQL/Redis/Kafka的软件面试问题，这篇文章会持续更新</p><span id="more"></span><blockquote class="colorquote success"><p>**如果这真的对你有帮助，请我喝杯咖啡，感谢我的辛勤工作，这会激励我创造更多。: D * *<br><a href="https://ko-fi.com/programmerscareer">给我买杯咖啡</a>  </p></blockquote><p>MySQL 面试：为什么MySQL使用B+树进行索引? <a href="https://programmerscareer.com/zh-cn/mysql-interview4/">https://programmerscareer.com/zh-cn/mysql-interview4/</a></p><p>MySQL 面试：数据库的事务隔离级别有哪些？各有哪些优缺点 <a href="https://programmerscareer.com/zh-cn/mysql-interview15/">https://programmerscareer.com/zh-cn/mysql-interview15/</a></p><p>MySQL 面试：什么是数据库事务，MySQL 为什么会使用 InnoDB 作为默认选项？ <a href="https://programmerscareer.com/zh-cn/mysql-interview14/">https://programmerscareer.com/zh-cn/mysql-interview14/</a></p><p>MySQL 面试：简述乐观锁以及悲观锁的区别以及使用场景 <a href="https://programmerscareer.com/mysql-interview5/">https://programmerscareer.com/mysql-interview5/</a></p><p>MySQL 面试：产生死锁的必要条件有哪些？如何解决死锁？ <a href="https://programmerscareer.com/zh-cn/mysql-interview6/">https://programmerscareer.com/zh-cn/mysql-interview6/</a></p><p>Redis 面试：Redis 有几种数据结构？Zset 是如何实现的？ <a href="https://programmerscareer.com/zh-cn/redis-interview6/">https://programmerscareer.com/zh-cn/redis-interview6/</a></p><p>MySQL 面试：聚簇索引和非聚簇索引有什么区别？ <a href="https://programmerscareer.com/zh-cn/mysql-interview13/">https://programmerscareer.com/zh-cn/mysql-interview13/</a></p><p>MySQL 面试：简述脏读和幻读的发生场景，InnoDB 是如何解决幻读的？ <a href="https://programmerscareer.com/zh-cn/mysql-interview12/">https://programmerscareer.com/zh-cn/mysql-interview12/</a></p><p>MySQL 面试：唯一索引与普通索引的区别是什么？使用索引会有哪些优缺点？ <a href="https://programmerscareer.com/zh-cn/mysql-interview11/">https://programmerscareer.com/zh-cn/mysql-interview11/</a></p><p>Redis 面试：简述 Redis 持久化中 RDB 以及 AOF 方案的优缺点 <a href="https://programmerscareer.com/zh-cn/redis-interview5/">https://programmerscareer.com/zh-cn/redis-interview5/</a></p><p>MySQL 面试：简述 MySQL 的间隙锁 <a href="https://programmerscareer.com/zh-cn/mysql-interview10/">https://programmerscareer.com/zh-cn/mysql-interview10/</a></p><p>Redis 面试：如何用Redis实现分布式锁 <a href="https://programmerscareer.com/zh-cn/redis-interview2/">https://programmerscareer.com/zh-cn/redis-interview2/</a></p><p>Redis 面试：简述 Redis 中如何防止缓存雪崩和缓存击穿 <a href="https://programmerscareer.com/zh-cn/redis-interview4/">https://programmerscareer.com/zh-cn/redis-interview4/</a></p><p>MySQL 面试：MySQL 有什么调优的方式？ <a href="https://programmerscareer.com/zh-cn/mysql-interview9/">https://programmerscareer.com/zh-cn/mysql-interview9/</a></p><p>MySQL 面试：简述 MySQL 的主从同步机制，如果同步失败会怎么样？ <a href="https://programmerscareer.com/zh-cn/mysql-interview1/">https://programmerscareer.com/zh-cn/mysql-interview1/</a></p><p>MySQL 面试：MySQL 的索引什么情况下会失效？ <a href="https://programmerscareer.com/zh-cn/mysql-interview8/">https://programmerscareer.com/zh-cn/mysql-interview8/</a></p><p>MySQL 面试：什么是 SQL 注入攻击？如何防止这类攻击？ <a href="https://programmerscareer.com/zh-cn/mysql-interview7/">https://programmerscareer.com/zh-cn/mysql-interview7/</a></p><p>MySQL 面试：简述数据库中的 ACID 分别是什么？ <a href="https://programmerscareer.com/zh-cn/mysql-interview2/">https://programmerscareer.com/zh-cn/mysql-interview2/</a></p><p>Redis 面试：简述 Redis 中跳表的应用以及优缺点 <a href="https://programmerscareer.com/zh-cn/redis-interview1/">https://programmerscareer.com/zh-cn/redis-interview1/</a></p><p>Kafka 面试：Kafka 发送消息是如何保证可靠性的？ <a href="https://programmerscareer.com/zh-cn/kafka-interview1/">https://programmerscareer.com/zh-cn/kafka-interview1/</a></p><p>MySQL 面试：MySQL 如何设计索引，如何优化查询？ <a href="https://programmerscareer.com/zh-cn/mysql-interview3/">https://programmerscareer.com/zh-cn/mysql-interview3/</a></p><p>Redis 面试：假设 Redis 的 master 节点宕机了，你会怎么进行数据恢复？ <a href="https://programmerscareer.com/zh-cn/redis-interview3/">https://programmerscareer.com/zh-cn/redis-interview3/</a></p><p>MySQL 面试：假设建立联合索引 (a, b, c) 如果对字段 a 和 c 查询，会用到这个联合索引吗？ <a href="https://programmerscareer.com/zh-cn/redis-interview19/">https://programmerscareer.com/zh-cn/redis-interview19/</a></p><p>MySQL 面试：MySQL 有哪些常见的存储引擎？它们的区别是什么？ <a href="https://programmerscareer.com/zh-cn/redis-interview18/">https://programmerscareer.com/zh-cn/redis-interview18/</a></p><p>MySQL 面试：简述 MySQL MVCC 的实现原理 <a href="https://programmerscareer.com/zh-cn/redis-interview17/">https://programmerscareer.com/zh-cn/redis-interview17/</a></p><p>MySQL 面试：数据库中什么情况下进行分库，什么情况下进行分表？ <a href="https://programmerscareer.com/zh-cn/redis-interview16/">https://programmerscareer.com/zh-cn/redis-interview16/</a></p><blockquote class="colorquote success"><p>**如果这真的对你有帮助，请我喝杯咖啡，感谢我的辛勤工作，这会激励我创造更多。: D * *<br><a href="https://ko-fi.com/programmerscareer">给我买杯咖啡</a>  </p></blockquote><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/software-interview-set/">https://programmerscareer.com/software-interview-set/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;收集了关于MySQL/Redis/Kafka的软件面试问题，这篇文章会持续更新&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="set" scheme="https://programmerscareer.com/categories/set/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Interview Question: Suppose to create a composite index (a, b, c) If you query fields A and c, will this composite index be used?</title>
    <link href="https://programmerscareer.com/mysql-interview19/"/>
    <id>https://programmerscareer.com/mysql-interview19/</id>
    <published>2024-05-12T18:15:00.000Z</published>
    <updated>2024-05-12T13:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Let’s create a lesson plan focused on MySQL, specifically on understanding the application of composite index</p><p><img src="https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05?crop=entropy&amp;cs=srgb&amp;fm=jpg&amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MDg5Mzd8&amp;ixlib=rb-4.0.3&amp;q=85&amp;w=500&amp;h=500" alt="photo by v2osk on Unsplash"></p><span id="more"></span><blockquote class="colorquote warning"><p>Thank you for reading this article. More Interview Questions here:<br><a href="https://programmerscareer.com/software-interview-set/">https://programmerscareer.com/software-interview-set/</a></p></blockquote><h1 id="Topic-1-1-Introduction-to-Composite-Indexes-in-MySQL"><a href="#Topic-1-1-Introduction-to-Composite-Indexes-in-MySQL" class="headerlink" title="Topic: 1.1 Introduction to Composite Indexes in MySQL"></a><strong>Topic: 1.1 Introduction to Composite Indexes in MySQL</strong></h1><p>Composite indexes, also known as concatenated or multi-column indexes, are a form of database index that spans two or more columns in a database table. These columns are arranged in a specific order, and the composite index is directed by this column order.</p><p>In a simple analogy, consider a library. Single-field indexing is like sorting the books solely based on authors’ names. However, a composite index is more like sorting the books based on both authors’ names and book titles.</p><p>In MySQL, composite indexes play a fundamental role in increasing the efficiency of database operations. It’s important to understand that MySQL can use a composite index for queries that involve any of the columns in the index, but the index would be most efficient when you use the leftmost prefix of the index column list.</p><p>One key feature of MySQL composite indexes is “leftmost prefixing”. In a composite index, the column order matters. In a composite index (a, b, c), MySQL can use this index to speed up queries involving ‘a’ or ‘a and b’, but not ‘b and c’, because ‘b and c’ is not a leftmost prefix of the index column list.</p><p>So, composite indexes can improve query performance to a great extent, but their efficient use depends on how we are querying the data.</p><h1 id="Topic-1-2-Creating-a-Composite-Index"><a href="#Topic-1-2-Creating-a-Composite-Index" class="headerlink" title="Topic: 1.2 Creating a Composite Index"></a><strong>Topic: 1.2 Creating a Composite Index</strong></h1><p>Creating a composite index in MySQL is similar to creating a single-column index, with a slight change in syntax.</p><p>Here’s the basic syntax for creating a composite index:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name  </span><br><span class="line">ON table_name(col1, col2, …);</span><br></pre></td></tr></tbody></table></figure><ul><li><code>index_name</code>&nbsp;is the name you want to give to the index.</li><li><code>table_name</code>&nbsp;is the name of the table you want to create the index on.</li><li><code>(col1, col2, …)</code>&nbsp;are the names of the columns you want to include in the index, in the order you want them to appear.</li></ul><p>Let’s consider a practical example. Suppose there’s a&nbsp;<code>sales</code>&nbsp;table with&nbsp;<code>ProductID</code>,&nbsp;<code>OrderDate</code>, and&nbsp;<code>Region</code>&nbsp;columns. If you often perform queries that filter or sort by&nbsp;<code>ProductID</code>&nbsp;and&nbsp;<code>OrderDate</code>, a composite index will be beneficial. Here’s how you’d create it:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_sales  </span><br><span class="line">ON sales(ProductID, OrderDate);</span><br></pre></td></tr></tbody></table></figure><p>In the above example,&nbsp;<code>idx_sales</code>&nbsp;is a composite index on the&nbsp;<code>sales</code>&nbsp;table including&nbsp;<code>ProductID</code>&nbsp;and&nbsp;<code>OrderDate</code>. The order of columns matters because MySQL will use the index for queries that involve&nbsp;<code>ProductID</code>&nbsp;alone or both&nbsp;<code>ProductID</code>&nbsp;and&nbsp;<code>OrderDate</code>, but not&nbsp;<code>OrderDate</code>&nbsp;alone.</p><p>Remember that using composite indexes comes with trade-offs. While they can significantly speed up querying, they can also slow down write operations (like INSERT, UPDATE, DELETE), because MySQL must also update the indexes. It’s important to find the right balance to optimize your database performance.</p><h1 id="Topic-1-3-Querying-A-and-C-Fields"><a href="#Topic-1-3-Querying-A-and-C-Fields" class="headerlink" title="Topic: 1.3 Querying A and C Fields"></a><strong>Topic: 1.3 Querying A and C Fields</strong></h1><p>This topic tackles an important question: Will MySQL use a composite index&nbsp;<code>(a, b, c)</code>&nbsp;if you’re querying only fields A and C?</p><p>The answer largely depends on your SQL query and how you structured your index. If the columns being used in the WHERE clause are the first N consecutive columns of the index, then the index can be used. So if you’re querying on a composite&nbsp;<code>(a, b, c)</code>&nbsp;index with fields A and C but without field B, the index may not be as effective.</p><p>For example, consider this composite index:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX comp_index  </span><br><span class="line">ON table(a, b, c);</span><br></pre></td></tr></tbody></table></figure><p>And suppose we have this query:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *  </span><br><span class="line">FROM table  </span><br><span class="line">WHERE a = 1 AND c = 3;</span><br></pre></td></tr></tbody></table></figure><p>In this case, MySQL would only use the index on field&nbsp;<code>a</code>&nbsp;and would ignore the index on&nbsp;<code>c</code>, because&nbsp;<code>c</code>&nbsp;is not contiguous with&nbsp;<code>a</code>&nbsp;in the index leftmost prefix.</p><p>Alternatively, to make sure the index on fields&nbsp;<code>a</code>&nbsp;and&nbsp;<code>c</code>&nbsp;gets used, you could restructure your composite index as&nbsp;<code>(a, c, b)</code>&nbsp;or&nbsp;<code>(c, a, b)</code>&nbsp;and adjust your queries accordingly. The point here is that the fields in&nbsp;<code>WHERE</code>&nbsp;clause should align with the leftmost prefix of the index columns.</p><p>Keep in mind that it’s always a good idea to regularly analyze the performance of your queries and adjust indexes as necessary. MySQL’s EXPLAIN statement is a useful tool to understand how your queries interact with indexes.</p><p>In the next section, we will learn how to optimize the use of composite indexes in MySQL for better results.</p><h1 id="Topic-1-4-Composite-Index-Optimization"><a href="#Topic-1-4-Composite-Index-Optimization" class="headerlink" title="Topic: 1.4 Composite Index Optimization"></a><strong>Topic: 1.4 Composite Index Optimization</strong></h1><p>Optimizing composite indexes in MySQL can significantly improve your database queries’ efficiency and speed. Remember, an efficiently implemented index saves time, resources, and improves overall application performance.</p><p>Here are several key points to remember for the effective use of composite indexes:</p><ol><li><strong>Order of Columns:</strong>&nbsp;The order of columns in the composite index can make a significant difference. MySQL can efficiently use the index if the columns in your query align with the leftmost prefix of the index. If your WHERE clause uses several columns, you might obtain multiple indexes or a composite index — the choice between these options would rely on specific application requirements.</li><li><strong>Index Cardinality:</strong>&nbsp;Index cardinality refers to the diversity of indexed values. Index columns with higher cardinality lead to fewer row scans and increased query performance. Hence, in a composite index, the column with the highest cardinality should ideally be placed first.</li><li><strong>Equality vs. Range Conditions:</strong>&nbsp;In a composite index, MySQL can perform equality checks for all columns and a range check for the last column. If there’s a range condition in the middle of your WHERE clause, MySQL can’t use the index parts to the right of that range.</li><li><strong>Over-Indexing:</strong>&nbsp;While indexes accelerate data retrieval, they slow down data modifications such as INSERT, UPDATE, and DELETE queries because each modification in indexed column data requires an update in the index structure. Ensure you’re not over-indexing your tables — every index should serve a purpose.</li><li><strong>Use EXPLAIN:</strong>&nbsp;The EXPLAIN keyword in MySQL shows how the optimizer chooses indexes to execute the query. Regularly check your queries using EXPLAIN to understand how the optimizer interacts with your indexes.</li></ol><h1 id="Topic-1-5-Review-and-Assessments"><a href="#Topic-1-5-Review-and-Assessments" class="headerlink" title="Topic: 1.5 Review and Assessments"></a><strong>Topic: 1.5 Review and Assessments</strong></h1><p>Over the course of our sessions, we’ve learned about Composite Indexes in MySQL, their structure, and their distinction from single field indexes. We studied the syntax and examples of creating a composite index. We then explored querying specific fields like A and C with a composite index. We then progressed to achieve a deeper understanding of optimizing our use of composite indexes in MySQL.</p><p>Key concepts we covered include:</p><ol><li><strong>Composite Indexes</strong>: They’re indexes that span multiple columns. This multi-column categorization can dramatically speed up query execution.</li><li><strong>Creating Composite Indexes</strong>: We studied the syntax and walked through an example of creating a composite index.</li><li><strong>Querying A and C Fields</strong>: We observed that MySQL can only utilize the portions of an index where the columns are referenced in the WHERE clause from left to right without skipping any columns.</li><li><strong>Composite Index Optimization</strong>: We went through some essential tips and tricks for optimizing the use of composite indexes, including the order of columns, index cardinality, distinguishing between equality and range conditions, avoiding over-indexing and making use of the EXPLAIN keyword in MySQL.</li></ol><p>It’s now time to assess your understanding of Composite Indexes.</p><p>Example Problem:</p><p>Let’s say you are running an online book store that has thousands of books. Your main&nbsp;<code>books</code>&nbsp;table in your MySQL database has the following columns:&nbsp;<code>id, title, author, genre, publication_year and price</code>. You realize that you frequently execute the following query:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *  </span><br><span class="line">FROM books  </span><br><span class="line">WHERE genre = 'Science Fiction' AND publication_year = 2018;</span><br></pre></td></tr></tbody></table></figure><p>To optimize this query, you create the following composite index:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX genre_year_index  </span><br><span class="line">ON books (genre, publication_year);</span><br></pre></td></tr></tbody></table></figure><p>This composite index should make your common query faster.</p><p>Now, it’s your turn!</p><p>Question: It’s the holiday season and your store is offering discounts on many books. You plan to send an email to all users who bought ‘Science Fiction’ books published after 2010. Write a SQL query to extract a list of user_ids from an orders table, which has the columns:&nbsp;<code>order_id, user_id, book_id, order_date</code>. Assume there is also a junction table named ‘orders_books’ with&nbsp;<code>order_id, book_id</code>.</p><hr><p>to get the list of&nbsp;<code>user_id</code>&nbsp;from the orders table who bought ‘Science Fiction’ books published after 2010, we will use JOIN to combine information from the&nbsp;<code>orders</code>,&nbsp;<code>orders_books</code>&nbsp;and&nbsp;<code>books</code>&nbsp;tables.</p><p>Your SQL query would look something like this:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT o.user_id  </span><br><span class="line">FROM orders AS o  </span><br><span class="line">JOIN orders_books AS ob ON o.order_id = ob.order_id  </span><br><span class="line">JOIN books AS b ON ob.book_id = b.id  </span><br><span class="line">WHERE b.genre = 'Science Fiction' AND b.publication_year &gt; 2010;</span><br></pre></td></tr></tbody></table></figure><p>This query checks the&nbsp;<code>genre</code>&nbsp;and&nbsp;<code>publication_year</code>&nbsp;of the books in each order and returns the&nbsp;<code>user_id</code>&nbsp;for those matching the criteria. The&nbsp;<code>DISTINCT</code>&nbsp;keyword is used to eliminate any duplicate&nbsp;<code>user_id</code>&nbsp;from the result.</p><p>Remember, understanding the structure of your data and how it is related is crucial when working with SQL and databases. Also, always assure you have the right indexes set for your queries.</p><blockquote class="colorquote danger"><p>中文文章: <a href="https://programmerscareer.com/zh-cn/mysql-interview19/">https://programmerscareer.com/zh-cn/mysql-interview19/</a><br>Author: <a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>Note: If you choose to repost or use this article, please cite the original source.  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Let’s create a lesson plan focused on MySQL, specifically on understanding the application of composite index&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTU1MDg5Mzd8&amp;amp;ixlib=rb-4.0.3&amp;amp;q=85&amp;amp;w=500&amp;amp;h=500&quot; alt=&quot;photo by v2osk on Unsplash&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Interview Question: What are the common storage engines for MySQL? What’s the difference?</title>
    <link href="https://programmerscareer.com/mysql-interview18/"/>
    <id>https://programmerscareer.com/mysql-interview18/</id>
    <published>2024-05-12T18:12:00.000Z</published>
    <updated>2024-05-12T13:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Here is a detailed curriculum of your learning plan for MySQL’s storage engines</p><span id="more"></span><blockquote class="colorquote warning"><p>Thank you for reading this article. More Interview Questions here:<br><a href="https://programmerscareer.com/software-interview-set/">https://programmerscareer.com/software-interview-set/</a></p></blockquote><h1 id="Topic-1-1-Introduction-to-MySQL-Storage-Engines"><a href="#Topic-1-1-Introduction-to-MySQL-Storage-Engines" class="headerlink" title="Topic: 1.1 Introduction to MySQL Storage Engines"></a><strong>Topic: 1.1 Introduction to MySQL Storage Engines</strong></h1><p>In MySQL, a storage engine is the underlying software component that a database management system uses to create, read, update and delete (CRUD) the data. Simply put, it’s responsible for the management of information within a database. You can think of it being analogous to how a filesystem manages files on a disk.</p><p>Each table in a MySQL database is created with a particular storage engine. MySQL provides several storage engines such as InnoDB, MyISAM, MEMORY, and others as well that allow us to choose a one that is best fit for our requirements.</p><p>When interacting with a database, we largely don’t have to be concerned about storage engines — we can just focus on writing SQL queries. But the choice of a storage engine has an impact on various characteristics of how a database functions such as:</p><ul><li><strong>Transaction support:</strong>&nbsp;Transaction allows several modifications in a database to be processed as one unit of work, either all data modifications made within a transaction are committed to the database, or none of them are. InnoDB supports transaction, MyISAM does not.</li><li><strong>Locking levels:</strong>&nbsp;Locking prevents multiple processes from interfering with each other’s activities. Different storage engines employ different locking mechanisms ranging from row-level to table-level locking.</li><li><strong>Data durability and crash recovery:</strong>&nbsp;This is the ability of a database to recover from a crash or power loss. InnoDB has strong data durability and crash recovery capabilities.</li></ul><p>A question you might be asking:&nbsp;<em>Can I use multiple storage engines in a single database?</em>&nbsp;Yes! In fact, each table can use a different storage engine.</p><h1 id="Topic-1-2-Understanding-the-InnoDB-Engine"><a href="#Topic-1-2-Understanding-the-InnoDB-Engine" class="headerlink" title="Topic: 1.2 Understanding the InnoDB Engine"></a><strong>Topic: 1.2 Understanding the InnoDB Engine</strong></h1><p>InnoDB is the default storage engine for MySQL. It provides the standard ACID-compliant transaction features, along with row-level locking and foreign key relationships. These are a few of the reasons why it’s heavily favored in scenarios where data integrity and performance are crucial.</p><p>Now let’s break down and understand these features:</p><ul><li><strong>ACID Compliance:</strong>&nbsp;The ACID properties (Atomicity, Consistency, Isolation, Durability) are the key transaction processing concepts. They maintain data integrity over multiple transactions, thereby ensuring that your data remains consistent and reliable throughout and after all operations.</li><li><strong>Row-level locking:</strong>&nbsp;As opposed to table-level locking (as in MyISAM), InnoDB employs row-level locking where each row modified in the process of a transaction locks that specific row and allows other transactions to modify other rows.</li><li><strong>Foreign Key Relationships</strong>: Foreign keys enforce referential integrity among tables in a database. In other words, it helps prevent actions that would destroy links between tables.</li></ul><p>InnoDB also has crash recovery capabilities. This means that InnoDB can auto-correct any inconsistencies that occur as a result of premature shutdown or major failure by replaying its logs.</p><p>In terms of performance, InnoDB uses a method known as Multiversion Concurrency Control (MVCC) to get past the need for read locks when executing SELECT statements. This is a significant benefit if you have a busy site where SELECT statements are common and data integrity is crucial.</p><h1 id="Topic-1-3-Understanding-the-MyISAM-Engine"><a href="#Topic-1-3-Understanding-the-MyISAM-Engine" class="headerlink" title="Topic: 1.3 Understanding the MyISAM Engine"></a><strong>Topic: 1.3 Understanding the MyISAM Engine</strong></h1><p>The MyISAM engine is one of the earliest storage engines in MySQL, and before MySQL version 5.5, MyISAM was the default storage engine. There are some distinguishing features and uses of MyISAM that make it efficient in specific scenarios.</p><p>MyISAM does full table-level locking for INSERT, UPDATE, and DELETE operations. What does this really mean? Well, when a row is being written or updated, the entire table which the row is part of, is locked, and no other operations can write to the same table until the write or update process is completed.</p><p>One might see this as a disadvantage compared to the row-level locking that InnoDB offers; however, there are specific cases when table-level locking works perfectly. Those are the scenarios where read operations vastly outnumber the writes, such as in a blog or a website where most of the time you retrieve data to display and updates to data are infrequent.</p><p>Another key feature of MyISAM is that it supports Full-Text Search indexes, allowing for natural language searching within character fields. Although InnoDB also supports this feature now, MyISAM was the primary choice for Full-Text Search for a long time.</p><p>However, the MyISAM engine does not support transactions and foreign key constraints, which might be significant downsides for certain applications. Furthermore, it lacks crash recovery, so a crash can result in data loss or data corruption in a MyISAM table.</p><h1 id="Topic-1-4-Other-MySQL-Storage-Engines"><a href="#Topic-1-4-Other-MySQL-Storage-Engines" class="headerlink" title="Topic: 1.4 Other MySQL Storage Engines"></a><strong>Topic: 1.4 Other MySQL Storage Engines</strong></h1><p>In addition to InnoDB and MyISAM, MySQL provides other storage engines, each with their strengths and optimal use-cases. Let’s get to know them a bit better:</p><ul><li><strong>MEMORY Engine:</strong>&nbsp;As the name suggests, this engine keeps all data in memory, offering extremely fast data access times. But remember, data stored in a table using the MEMORY engine will be lost when the server shuts down or crashes. It’s excellent for storing session or temporary data.</li><li><strong>CSV Engine:</strong>&nbsp;This engine allows you to access the data in comma-separated values (CSV) format. You can even view and edit data in the table using any text editor. It doesn’t support indexes, so every row search is a full table scan.</li><li><strong>ARCHIVE Engine:</strong>&nbsp;If you need to store large amounts of unindexed data, like logs, this is the engine for you. It uses compression to save space and stores data in a way that is easy to back up and transport. While the ARCHIVE engine allows simple SELECT and INSERT statements, it does not support transactions or the ability to delete or update a record.</li><li><strong>BLACKHOLE Engine:</strong>&nbsp;The Blackhole engine accepts data but throws it away and does not store it. You might wonder why it’s useful? The Blackhole engine can be used for replicating to more than one slave, and is also used for audit logging on a database server.</li><li><strong>FEDERATED Engine:</strong>&nbsp;The Federated Storage Engine allows you to access tables located on other databases on other servers. It provides the ability to create one logical database from many physical servers.</li></ul><p>Each of these engines has unique capabilities and fits different scenarios depending on the requirements. That’s the beauty of MySQL’s pluggable storage engine architecture — you can choose the one that serves your needs the best.</p><h1 id="Topic-1-5-Comparison-of-Storage-Engines"><a href="#Topic-1-5-Comparison-of-Storage-Engines" class="headerlink" title="Topic: 1.5 Comparison of Storage Engines"></a><strong>Topic: 1.5 Comparison of Storage Engines</strong></h1><p>MySQL’s versatile set of storage engines, each with their unique feature set, make it an adaptable choice for a vast array of workloads. Now, we will contrast these storage engines, exploring their strengths and weaknesses, and suggesting best-fit contexts.</p><ol><li><strong>InnoDB vs. MyISAM</strong>: InnoDB outshines MyISAM when your workload relies heavily on writing operations or requires transactions, as it provides ACID-compliant transaction features, row-level locking and crash recovery. On the contrary, MyISAM could be a sensible choice when the workload is read-intensive, and the durability or atomicity of the transactions is not a deal-breaker.</li><li><strong>InnoDB/MYISAM vs. MEMORY</strong>: The MEMORY storage engine, delivering lightning-fast data access by holding all data in memory, is a good fit for storing temporary or session data. But unlike InnoDB and MyISAM, all data is lost when the server shuts down or crashes.</li><li><strong>InnoDB/MYISAM/MEMORY vs. CSV</strong>: The CSV engine makes data handling more manageable and flexible by allowing data edit in any text editor. However, it lacks indexing, resulting in full table scans for each row search, and thus might not be performant for large workloads.</li><li><strong>InnoDB/MYISAM/MEMORY/CSV vs. ARCHIVE</strong>: When it comes to storing large amounts of rarely-referenced data, like logs or historical transactions, the ARCHIVE engine excels by saving storage space through compression.</li><li><strong>InnoDB/MYISAM/MEMORY/CSV/ARCHIVE vs. BLACKHOLE and FEDERATED</strong>: These two engines are quite niched compared to the others: BLACKHOLE can be helpful for tasks like audit logging or multi-slave replication, while FEDERATED can help create a logically single database from various physical servers.</li></ol><p>Remember, choosing the right storage engine largely depends on your specific workload and application requirements.</p><h1 id="Topic-1-6-Choosing-the-Right-Storage-Engine"><a href="#Topic-1-6-Choosing-the-Right-Storage-Engine" class="headerlink" title="Topic: 1.6 Choosing the Right Storage Engine"></a><strong>Topic: 1.6 Choosing the Right Storage Engine</strong></h1><p>Selecting the right storage engine is a crucial decision when setting up your MySQL database because it can significantly impact your application’s performance and reliability. Here are some factors to consider when making your choice:</p><ul><li><strong>Data Integrity</strong>: If your application demands high data integrity where transactions need to be atomic (all-or-nothing), you should consider using the InnoDB storage engine which supports ACID (Atomicity, Consistency, Isolation, Durability) properties.</li><li><strong>Full-text Search</strong>: If you plan to run full-text search queries, both MyISAM and InnoDB support this but with varying features. You’ll have to individually explore these features to make sure they fit your use case.</li><li><strong>Memory Usage</strong>: If you need maximum read/write speed and the data you’re working with is temporary (like session data), the MEMORY storage engine, which stores all data in memory, could be the ideal fit for you.</li><li><strong>Large Amounts of Data</strong>: For handling large amounts of seldom-referenced or historical data, consider the ARCHIVE engine which compresses the data for efficient storage.</li><li><strong>Number of Reads/Writes</strong>: Evaluate your application’s read-to-write operation ratio. If the number of read operations significantly exceeds write operations, you may benefit from the MyISAM engine. Conversely, InnoDB is more suitable for write-heavy applications.</li><li><strong>Server Failures</strong>: Consideration for what happens during a crash is crucial. If durability is essential for your application, InnoDB should be your choice since it can recover from a crash using transaction logs. On the other hand, MyISAM doesn’t guarantee data durability in case of a crash.</li></ul><p>Remember, there is no one-size-fits-all engine, and you might end up using different storage engines for different tables within the same application according to your precise needs.</p><h1 id="Topic-1-7-Review-and-Assessments"><a href="#Topic-1-7-Review-and-Assessments" class="headerlink" title="Topic: 1.7 Review and Assessments"></a><strong>Topic: 1.7 Review and Assessments</strong></h1><p>Over our last few lessons, we’ve taken an in-depth tour of MySQL’s various storage engines, understanding their unique features, and compared them based on certain criteria. We have:</p><ul><li>Defined what&nbsp;<strong>storage engines</strong>&nbsp;are and their role in MySQL.</li><li>Grasped the features and advantages of the&nbsp;<strong>InnoDB</strong>&nbsp;and&nbsp;<strong>MyISAM</strong>&nbsp;engines.</li><li>Explored other MySQL storage engines like&nbsp;<strong>MEMORY</strong>,&nbsp;<strong>CSV</strong>,&nbsp;<strong>ARCHIVE</strong>, and more.</li><li>Made a comparison of these storage engines to understand their best use-cases.</li><li>Discussed the factors to consider when choosing the right storage engine for your database.</li></ul><p>Let’s test out your understanding before we conclude this series:</p><ol><li><strong>Question 1:</strong>&nbsp;What distinguishes InnoDB from MyISAM, and when might you prefer to use one over the other?</li><li><strong>Question 2:</strong>&nbsp;Describe a situation where you would benefit from using the MEMORY engine.</li><li><strong>Question 3:</strong>&nbsp;If you had a requirement for storing large amounts of log data, which storage engine would you choose, and why?</li><li><strong>Question 4:</strong>&nbsp;Name a few factors you’d consider when choosing a storage engine for your database.</li></ol><p>Please respond to these questions one by one.</p><hr><p><strong>Answer 1:</strong>&nbsp;InnoDB is a storage engine that offers features like ACID-compliant transaction support, row-level locking, and crash recovery. This makes it suitable for write-heavy applications or scenarios that require high data integrity. On the other hand, MyISAM is often used for read-heavy applications because it has faster read capabilities. However, it lacks transaction support and crash safety features.</p><p><strong>Answer 2:</strong>&nbsp;The MEMORY storage engine can be a valuable tool when you’re dealing with temporary data, such as session data. As all data is stored in memory and is faster than disk-based storage, it offers extremely quick access times. However, bear in mind that all data stored with this engine will be lost if the server terminates or crashes.</p><p><strong>Answer 3:</strong>&nbsp;The ARCHIVE storage engine can be a wise choice when dealing with logging data or any large amount of rarely-referenced data. This engine supports compression, which can save a significant amount of storage space.</p><p><strong>Answer 4:</strong>&nbsp;When choosing a storage engine for your database, you might consider factors such as:</p><ul><li>The type of operations your database will be mostly handling (READs or WRITEs).</li><li>Whether transaction support and crash safety mechanisms are required.</li><li>The volume of data and the acceptable access/read-write speed.</li><li>Specific features like full-text indexing or GIS capabilities.</li></ul><blockquote class="colorquote danger"><p>中文文章: <a href="https://programmerscareer.com/zh-cn/mysql-interview18/">https://programmerscareer.com/zh-cn/mysql-interview18/</a><br>Author: <a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>Note: If you choose to repost or use this article, please cite the original source.</p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Here is a detailed curriculum of your learning plan for MySQL’s storage engines&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>My SQL Interview Question: The implementation principle of MySQL MVCC</title>
    <link href="https://programmerscareer.com/mysql-interview17/"/>
    <id>https://programmerscareer.com/mysql-interview17/</id>
    <published>2024-05-12T18:11:00.000Z</published>
    <updated>2024-05-12T13:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>we can dive into the details of how MySQL implements Multi-Version Concurrency Control (MVCC)</p><span id="more"></span><blockquote class="colorquote warning"><p>Thank you for reading this article. More Interview Questions here:<br><a href="https://programmerscareer.com/software-interview-set/">https://programmerscareer.com/software-interview-set/</a></p></blockquote><h1 id="Topic-Unpacking-MVCC"><a href="#Topic-Unpacking-MVCC" class="headerlink" title="Topic: Unpacking MVCC"></a>Topic: Unpacking MVCC</h1><p>MultiVersion Concurrency Control (MVCC) is a technique used in database management systems to avoid conflicts between users accessing the same data simultaneously, thereby increasing processing efficiency.</p><p>In essence, MVCC allows multiple transactions to access the same data without conflicts or the need for read locks, which can slow down performance significantly. This is achieved by creating a “snapshot” of the data at the point a transaction begins. Other transactions happening concurrently won’t affect this snapshot.</p><p>Now, let’s break down the term MVCC:</p><ul><li><strong>MultiVersion</strong>: This suggests that the database maintains several versions of the same record. The “version” is a snapshot of the data at a certain point in time.</li><li><strong>Concurrency Control</strong>: This implies that the technique is used to handle simultaneous transactions without conflict, ensuring that each transaction maintains the illusion that it’s the only one accessing the database.</li></ul><p>MySQL implements MVCC in its InnoDB storage engine. When a transaction updates a row in InnoDB, the original row is not immediately overwritten or deleted. Instead, InnoDB stores the old version of the row internally for any other active transactions that need to see the original version. This is how “versions” of data rows come into existence.</p><p>So, why do we use MVCC in a system like MySQL? Primarily, it’s for performance reasons. By allowing multiple transactions to access the same snapshot of data without conflict, we avoid the need for read locks that can bottleneck the system. In a system where many users might be querying and updating the same database, this can significantly speed up processing times.</p><h1 id="Topic-How-MVCC-works-in-MySQL"><a href="#Topic-How-MVCC-works-in-MySQL" class="headerlink" title="Topic: How MVCC works in MySQL"></a>Topic: How MVCC works in MySQL</h1><p>Let’s now zoom into the internals of how MVCC operates within MySQL.</p><p>When a transaction starts in MySQL (InnoDB), it gets assigned a unique transaction ID. This ID is used to create its view of the database. This view consists of all the committed data up until the time the transaction started, and any changes made by the transaction itself. The transaction can’t see any data modified by other simultaneous transactions, providing a consistent snapshot and ensuring isolation.</p><p>When a row is modified within a transaction, InnoDB won’t overwrite the existing data. Instead, it writes the new row version and maintains the old version in an area called an undo log. This log contains information needed to revert changes if a transaction is rolled back, and it provides older versions of a row to other transactions that might need them.</p><p>Now let’s talk a bit about some related topics: Read Views, Undo Logs, and Purging.</p><p><strong>Read view</strong>&nbsp;is the mechanism InnoDB uses to implement consistent reads, i.e., reading the snapshot of the database corresponding to the point in time when the transaction started.</p><p><strong>Undo logs</strong>&nbsp;are a crucial part of MVCC. As mentioned earlier, when a transaction modifies data, InnoDB writes the new row to the database and stores information necessary to reconstruct the older version of the row in an undo log record. If another transaction needs to see the older version of the row, InnoDB uses the undo log record to reconstruct it.</p><p><strong>Purging</strong>&nbsp;relates to how InnoDB cleans up old versions of a row that are no longer needed by any ongoing transactions. Once all transactions that might need to access an older row version have completed, InnoDB can free space held by this version. This process is referred to as purging.</p><h1 id="Topic-ACID-Properties-and-MVCC"><a href="#Topic-ACID-Properties-and-MVCC" class="headerlink" title="Topic: ACID Properties and MVCC"></a>Topic: ACID Properties and MVCC</h1><p>One of the crucial aspects of any reliable database management system is ensuring that it maintains certain properties defined by the ACID principle, which stands for Atomicity, Consistency, Isolation, and Durability.</p><ol><li><strong>Atomicity</strong>: If a transaction involves multiple operations, atomicity means that either all the operations are executed successfully, or none of them are. There’s no in-between — a transaction can’t be partially complete. If an error happens during any operation in a transaction, the whole transaction is rolled back.</li><li><strong>Consistency</strong>: Consistency means that a transaction should bring the database from one consistent state to another, according to predefined rules. For example, if an account doesn’t have sufficient balance for a withdrawal, the transaction should be rejected to maintain consistency.</li><li><strong>Isolation</strong>: Isolation comes into play when multiple transactions are being executed simultaneously. It means each transaction should behave as if it’s the only one being executed. The intermediate state of a transaction should not be visible to other transactions.</li><li><strong>Durability</strong>: Durability ensures that once a transaction has been committed, it will remain, even in the event of power loss, crashes, or other system errors. In other words, the results of a transaction are permanent.</li></ol><p>Now, how does MVCC (MultiVersion Concurrency Control) relate to the ACID properties? Here’s the connection:</p><p>In the context of MySQL (and more specifically its InnoDB storage engine), MVCC provides isolation and consistency.</p><p><strong>Isolation</strong>&nbsp;is ensured as each transaction works with its snapshot of the data, isolated from the changes made by others. Even if multiple transactions are trying to read and write the same data simultaneously, each will see its consistent snapshot, as if it’s the only transaction happening.</p><p><strong>Consistency</strong>&nbsp;is maintained thanks to the use of undo logs in MVCC. If a transaction fails or is rolled back, the changes made within that transaction can be undone to ensure the database remains in a consistent state. Furthermore, by creating a transaction-specific view of the data, MVCC ensures that the transaction always works with a consistent set of data.</p><h1 id="Topic-Snapshot-Read-and-Current-Read"><a href="#Topic-Snapshot-Read-and-Current-Read" class="headerlink" title="Topic: Snapshot Read and Current Read"></a>Topic: Snapshot Read and Current Read</h1><p>In MySQL, there are two main types of reads that are utilized when MVCC (MultiVersion Concurrency Control) comes into play: snapshot read and current read. Let’s dive into these concepts.</p><p><strong>Snapshot Read</strong></p><p>A snapshot read, as the name suggests, provides a consistent snapshot of the data as it was when the transaction started. It doesn’t see changes made by other concurrently executing transactions. This read is the default mode for&nbsp;<code>SELECT</code>&nbsp;statements when&nbsp;<em>not</em>&nbsp;in&nbsp;<code>LOCK IN SHARE MODE</code>&nbsp;or&nbsp;<code>FOR UPDATE</code>&nbsp;modes. Snapshot read is crucial in providing the “consistent view” of data which is integral to the concept of MVCC.</p><p><strong>Current Read</strong></p><p>Unlike a snapshot read, a current read sees the latest committed data, including changes made by other transactions. Modes like&nbsp;<code>SELECT…FOR UPDATE</code>&nbsp;and&nbsp;<code>SELECT…LOCK IN SHARE MODE</code>&nbsp;use current reads. It’s also used when a query modifies data (like&nbsp;<code>UPDATE</code>,&nbsp;<code>INSERT</code>,&nbsp;<code>DELETE</code>).</p><p>These two types of reads offer flexible ways of handling data in transactions. The use of snapshot read or current read depends on whether you want a transaction to see only the data as it was when the transaction began, or if it needs to see the latest data, including modifications made by other transactions.</p><h1 id="Topic-Managing-Deadlocks-with-MVCC"><a href="#Topic-Managing-Deadlocks-with-MVCC" class="headerlink" title="Topic: Managing Deadlocks with MVCC"></a>Topic: Managing Deadlocks with MVCC</h1><p>Now that we’ve explored the snapshot and current reads in MySQL’s MVCC, let’s understand another critical aspect of transaction handling — dealing with deadlocks.</p><p>A deadlock happens when two or more transactions mutually hold and request for locks, creating a cyclic dependency that can’t be resolved. Without intervention, these transactions could wait indefinitely, which is obviously not ideal.</p><p>MySQL handles deadlocks in MVCC by utilizing a wait-for graph. In layman’s terms, whenever transaction A waits for transaction B to release a row lock, an edge is added from A to B in the wait-for graph. If adding this edge creates a cycle, a deadlock is detected.</p><p>Upon detecting a deadlock, MySQL needs to resolve it. It does so by choosing a transaction as the ‘victim’ and rolling it back. In most cases, it chooses the one that has done the least amount of work, so less work is lost. After rolling back the victim transaction, the deadlock is resolved.</p><p>In MySQL, you can use&nbsp;<code>SHOW ENGINE INNODB STATUS;</code>&nbsp;to get information about the most recent deadlock, which can aid in debugging.</p><p>Deadlock management, while mostly automatic, demands caution on the design and execution of transactions. It’s advisable to keep transactions as short as possible and commit them as soon as possible to minimize the chances of deadlocks.</p><h1 id="Topic-Performance-Implications-of-MVCC"><a href="#Topic-Performance-Implications-of-MVCC" class="headerlink" title="Topic: Performance Implications of MVCC"></a>Topic: Performance Implications of MVCC</h1><p>Despite all the benefits that MultiVersion Concurrency Control underpins in MySQL, it’s important to recognize that MVCC isn’t without its performance trade-offs. Let’s delve into some of these:</p><ol><li><strong>Disk Space</strong>: One of the main overheads of MVCC is increased disk space. Because MVCC keeps different versions of a row to provide isolated, consistent views to transactions, more disk space is required. This could be significant in heavy read-write mixed workloads.</li><li><strong>CPU and I/O Resources</strong>: The process of producing multiple versions of data, maintaining them, and removing unnecessary versions (purging) can put a burden on CPU and I/O resources.</li><li><strong>Locking Overhead</strong>: While MVCC reduces the need for locking, it does not eliminate it entirely, especially for write transactions (Inserts, Updates, Deletes). These locks add to the performance overhead.</li><li><strong>Increased Complexity</strong>: MVCC adds complexity to the database engine. It needs to manage multiple versions of data, handle undos, resolve conflicts, and clean up old versions. This complexity adds overhead to the overall performance.</li></ol><p>When might you consider alternative methods to MVCC?</p><p>While MVCC offers excellent benefits regarding multi-user access, it might not be the perfect choice in specific scenarios. For instance, in cases where data is largely written once and read many times, like a logging application, it might be better to consider a storage engine like MyISAM which does not support MVCC.</p><p>Additionally, in applications where you want the absolute latest data, you can also look into other approaches since MVCC provides a “snapshot” of the data, not the latest version.</p><p>It’s necessary to understand the workload, performance expectations, and hardware resources available before making a decision regarding the use of MVCC.</p><h1 id="Topic-Review-and-Assessments"><a href="#Topic-Review-and-Assessments" class="headerlink" title="Topic: Review and Assessments"></a>Topic: Review and Assessments</h1><p>Now that we’ve explored different aspects of MultiVersion Concurrency Control (MVCC) in MySQL, it’s time to recap some of the key takeaways:</p><ol><li><strong>MVCC is a method used in database management systems to handle concurrent transactions.</strong></li><li><strong>MVCC provides each transaction a ‘snapshot’ of the database, allowing multiple transactions to read (and write to) a single data item simultaneously</strong>, which dramatically improves the database’s performance and scalability.</li><li><strong>Snapshot and current read are two critical concepts in MySQL’s MVCC</strong>. Snapshot read gives a consistent view of the data as of the transaction start, and current read considers the latest committed data.</li><li><strong>The ACID properties in databases are closely related to MVCC</strong>, ensuring Atomicity, Consistency, Isolation, and Durability of transactions.</li><li><strong>MVCC helps in managing deadlocks in MySQL</strong>, which are situations where two transactions wait for each other to release resources.</li><li><strong>While MVCC offers several advantages, it’s not without some performance trade-offs, such as increased disk space and CPU usage.</strong></li></ol><p>These are some of the many aspects we’ve covered about MVCC in MySQL. With that, it’s now time to assess your understanding of the topic. Consider the following questions:</p><ul><li>How does MVCC improve concurrent transactions in MySQL?</li><li>What’s the difference between snapshot read and current read in MySQL’s MVCC?</li><li>How does MVCC in MySQL manage deadlocks?</li><li>Can you explain the performance implications that come with using MVCC?</li></ul><p>Reflect on these questions. You can write down your responses or simply think through them for self-evaluation.</p><hr><ol><li>MVCC improves concurrent transactions by allowing multiple users to access the same row of a table at the same time, instead of locking the data entirely. Each transaction gets a “snapshot” of the data at the point the transaction began, ensuring a consistent state of the data is used throughout the transaction.</li><li>Snapshot read and current read in MySQL’s MVCC are two different isolation levels for reading data. A snapshot read refers to the consistent read of the database state at the time the transaction starts, ensuring data consistency for that transaction. A current read, on the other hand, is a type of read where the most recent committed data (including those made by other transactions) is considered.</li><li>MVCC manages deadlocks through a wait-for graph. When a transaction is waiting for a resource locked by another transaction, an edge is added to the wait-for graph. If adding this edge creates a cycle, a deadlock is detected. MySQL then chooses a transaction to be the ‘victim’ and rolls it back to resolve the deadlock.</li><li>MVCC is associated with some performance trade-offs. It requires additional disk space to keep multiple versions of each row in a table. Additional CPU and I/O resources are used for managing these versions, handling undo operations, and cleaning up old row versions. The complexity of MVCC handling can also add to the overhead in the overall performance.</li></ol><blockquote class="colorquote danger"><p>中文文章: <a href="https://programmerscareer.com/zh-cn/mysql-interview17/">https://programmerscareer.com/zh-cn/mysql-interview17/</a><br>Author: <a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>Note: If you choose to repost or use this article, please cite the original source.</p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;we can dive into the details of how MySQL implements Multi-Version Concurrency Control (MVCC)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Interview Question: When to split databases and when to split tables?</title>
    <link href="https://programmerscareer.com/mysql-interview16/"/>
    <id>https://programmerscareer.com/mysql-interview16/</id>
    <published>2024-05-12T18:09:00.000Z</published>
    <updated>2024-05-12T13:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Let’s outline a curriculum for splitting databases and tables in MySQL</p><span id="more"></span><blockquote class="colorquote warning"><p>Thank you for reading this article. More Interview Questions here:<br><a href="https://programmerscareer.com/software-interview-set/">https://programmerscareer.com/software-interview-set/</a></p></blockquote><h1 id="Topic-Understanding-Data-Distribution"><a href="#Topic-Understanding-Data-Distribution" class="headerlink" title="Topic: Understanding Data Distribution"></a>Topic: Understanding Data Distribution</h1><p>Hi, we’ll be starting our understanding of data distribution in this lesson. First and foremost, let’s get clarified about what we mean by ‘data distribution’.</p><p>Data distribution is the method of allocating data, computational tasks, and applications across multiple computers in a network. Distributing the data across multiple servers can improve the performance, reliability, and accessibility of applications. 😊</p><p>There are various reasons behind data distribution. Let me take you through some of the key advantages of it:</p><p><strong>Improved Performance:</strong>&nbsp;By distributing your data, you can improve the speed at which your application accesses this data. If done efficiently, data distribution can ensure that the resources are located close to where they are needed most, thereby reducing access latency and improving speed.</p><p><strong>Redundancy and Reliability:</strong>&nbsp;Through data distribution, multiple copies of the same data can be stored in different locations. This provides redundancy and increases the overall reliability of your data. If one server fails, your application can access the same data from a different server.</p><p><strong>Scalability:</strong>&nbsp;As your business or application grows, data distribution can make it easier to scale up your infrastructure. New servers can be added to the network as and when required.</p><p><strong>Load Balancing:</strong>&nbsp;Properly distributing data can help maintain a balanced load across servers. This ensures no single server becomes a bottleneck, affecting the performance of your applications.</p><p>There are many ways to distribute data, such as horizontal partitioning (also known as sharding), vertical partitioning, and functional partitioning. Each method has its own pros and cons and is suitable for different types of applications. We will be exploring these in depth in the upcoming lessons.</p><h1 id="Topic-Database-Splitting-Sharding-in-MySQL"><a href="#Topic-Database-Splitting-Sharding-in-MySQL" class="headerlink" title="Topic: Database Splitting (Sharding) in MySQL"></a>Topic: Database Splitting (Sharding) in MySQL</h1><p>I’m glad to see you’re eager to learn more! Now that we’ve explored the concept of data distribution, let’s delve into the fascinating process of database splitting, more commonly known as&nbsp;<strong>Sharding</strong>.</p><p>Sharding in MySQL is a process in which we break down a larger database into smaller, more manageable parts, called shards. Each shard holds a portion of the total data and functions as a separate database.</p><p>To illustrate, visualize a big book split into separate chapters, where each chapter can stand on its own and store unique information. Similarly, when we shard a database, it’s like splitting a huge database into ‘chapters,’ with each one housing unique data.</p><p>Now, why would we do that? 🤔 Sharding is generally implemented for a few reasons:</p><p><strong>Improved Performance:</strong>&nbsp;Sharding can greatly enhance read/write speeds. When you fire off a query, instead of sifting through a massive database, it only has to search a specific shard, drastically improving speed.</p><p><strong>Scalability:</strong>&nbsp;Sharding makes your database horizontally scalable. If your app grows and the database starts getting too large for a single server, you can always add more shards.</p><p><strong>Reliability:</strong>&nbsp;If one shard goes down, it won’t bring your entire application down with it. The rest of the shards will continue to work without any hitches.</p><p>While sharding has its manifold benefits, it also comes with some cons:</p><p><strong>Increased Complexity:</strong>&nbsp;The overall architecture of your database environment becomes more complicated.</p><p><strong>Data Distribution:</strong>&nbsp;You have to decide how to distribute your data, which can be challenging.</p><p><strong>Joining Data across Shards:</strong>&nbsp;If you want to join tables that reside on different shards, it might be complicated or slow.</p><p>In MySQL, sharding is typically done at the application level using sharding libraries or frameworks. Some of the popular sharding algorithms used are Range-Based, List-Based, Hash-Based, and Directory-Based sharding.</p><h1 id="Topic-Table-Splitting-Partitioning-in-MySQL"><a href="#Topic-Table-Splitting-Partitioning-in-MySQL" class="headerlink" title="Topic: Table Splitting (Partitioning) in MySQL"></a><strong>Topic: Table Splitting (Partitioning) in MySQL</strong></h1><p>If you recall, earlier we discussed data distribution and why you might want to split database into multiple, smaller parts, a process known as sharding.</p><p>In a similar sentiment, table partitioning is a way to divide a large table into smaller, more manageable parts, while still being able to access and manipulate the data as if the partitioned table were a single entity. In other words, even though the data is stored in separate partitions, from a user perspective, it’s as if there’s only one table. Neat, right?</p><p>Now,&nbsp;<strong>when would this come handy?</strong>&nbsp;😊</p><p>Partitioning can be the way to go if you have a massive table that results in slow queries and updates, especially if that table is expected to grow beyond the capacity of a single server.</p><p>In its essence, partitioning is about managing and optimizing data for improved performance. Employing partitioning when it’s uncalled for may lead unwanted complexity.</p><p>MySQL provides four different types of partitioning:</p><p><strong>1. RANGE Partitioning:</strong>&nbsp;This is the simplest type of partitioning. It works best when dealing with data that falls into certain ranges — like dates or quantities.</p><p><strong>2. LIST Partitioning:</strong>&nbsp;It partitions table based on the predefined list of values.</p><p><strong>3. HASH Partitioning:</strong>&nbsp;Here, MySQL applies a hash function on the partitioning key to ascertain the partition to be used. It’s used when you want to ensure data is spread evenly across a specified number of partitions.</p><p><strong>4. KEY Partitioning:</strong>&nbsp;It’s similar to hash partitioning, but in this case, MySQL server takes care of calculating the hash value in an internal way, which user can’t control.</p><p>So, that’s the theory, in the next lessons we’ll talk about how you can implement these principles in MySQL and I’ll provide some real-life examples to help illustrate this concept.</p><h1 id="Topic-Practical-Examples-in-Database-and-Table-Splitting"><a href="#Topic-Practical-Examples-in-Database-and-Table-Splitting" class="headerlink" title="Topic: Practical Examples in Database and Table Splitting"></a><strong>Topic: Practical Examples in Database and Table Splitting</strong></h1><p>Great! Now that we’ve discussed the theory of database sharding and table partitioning, let’s put it into practice with some hands-on examples.</p><p><strong>Example 1: Database Sharding</strong><br>Suppose we have an e-commerce website with a global user base and the customer data is expanding rapidly. We can create a shard for each geographical region: North America, Europe, Asia, etc. Each region’s database shard would store only the data associated with the customers located in that region. This way, we’re improving performance by localizing data and queries.</p><p><strong>Example 2: Table Partitioning</strong><br>In the case of our e-commerce site, consider a situation where we have millions of orders, and most queries are for recent orders. We can choose to partition the Orders table by date, keeping data for each month in a separate partition. With this, queries for specific periods would only need to scan fewer rows and perform much faster.</p><p>But how these are implemented practically?</p><p>For database sharding in MySQL, there are various sharding frameworks available like Vitess, phpMyAdmin, etc. For instance, in Vitess, you would define a VSchema which includes sharding instructions to auto-shard the desired table.</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">{  </span><br><span class="line">  "sharded": true,  </span><br><span class="line">  "vindexes": {  </span><br><span class="line">    "hash": {  </span><br><span class="line">      "type": "hash"  </span><br><span class="line">    }  </span><br><span class="line">  },  </span><br><span class="line">  "tables": {  </span><br><span class="line">    "your_table": {  </span><br><span class="line">      "column_vindexes": [  </span><br><span class="line">        {  </span><br><span class="line">          "column": "your_shard_column",  </span><br><span class="line">          "name": "hash"  </span><br><span class="line">        }  </span><br><span class="line">      ]  </span><br><span class="line">    }  </span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>As for partitioning a table in MySQL, it can be done by ALTER TABLE command.</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE orders  </span><br><span class="line">PARTITION BY RANGE( YEAR(order_date) )  </span><br><span class="line">(  </span><br><span class="line">  PARTITION p0 VALUES LESS THAN (1990),  </span><br><span class="line">  PARTITION p1 VALUES LESS THAN (2000),  </span><br><span class="line">  PARTITION p2 VALUES LESS THAN (2010),  </span><br><span class="line">  PARTITION p3 VALUES LESS THAN (2020),  </span><br><span class="line">  PARTITION p4 VALUES LESS THAN MAXVALUE  </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>In this script, we partition the ‘orders’ table based on the ‘order_date’ column.</p><p>Remember, these processes are normally handled by your application or a framework, thus some knowledge of SQL is required. Also, both sharding and partitioning come with their complexities and should only be used when the benefits outweigh these complexities.</p><h1 id="Topic-Making-an-Informed-Decision"><a href="#Topic-Making-an-Informed-Decision" class="headerlink" title="Topic: Making an Informed Decision"></a><strong>Topic: Making an Informed Decision</strong></h1><p>We’ve covered a lot of ground at this point, and last but not least, we’ll discuss how you can make an educated decision on when to split databases or tables, reiterating some key points from previous lessons as well as a few additional tips.</p><p>Here are some factors to consider:</p><p><strong>Database Sharding (Splitting) Decision Making:</strong></p><ol><li><strong>Data Size</strong>: If your database is becoming too large to handle efficiently, it might be time to consider sharding.</li><li><strong>Performance</strong>: If frequent queries are significantly slowing down due to the large size of the database, sharding can help improve the processing speed by reducing the amount of data each query needs to process.</li><li><strong>Scalability</strong>: If you foresee your database growing beyond the capacity of a single server, implementing sharding from an early phase can be a good preventative measure.</li><li><strong>Type of Data</strong>: Sharding can also be driven by the nature of data. For example, multi-tenant applications where data from many customers is stored in the same database is a perfect candidate for sharding.</li></ol><p><strong>Table Partitioning Decision Making:</strong></p><ol><li><strong>Table Size</strong>: Just like with database sharding, if a table in your database is growing endlessly, you might want to consider partitioning it.</li><li><strong>Query Performance</strong>: If the majority of the queries against a table only deal with a segment of the data (e.g., the most recent entries), partitioning can speed up these queries significantly.</li><li><strong>Maintenance</strong>: Partitioning also makes it easier to perform maintenance on a table (like backups, updates, and deletes) as these operations can be performed on individual partitions instead of the tabling the entire table offline.</li></ol><p>In essence, the decision to partition or shard should be made based on the need to improve performance, handle large amounts of data, or both. That said, it’s not a decision to be taken lightly as it adds complexity to your database structure and application logic. It should only be implemented when necessary and other simpler optimization techniques are no longer sufficient.</p><h1 id="Topic-Review-and-Assessments"><a href="#Topic-Review-and-Assessments" class="headerlink" title="Topic: Review and Assessments"></a><strong>Topic: Review and Assessments</strong></h1><p>At this point, we have completed our journey through data distribution, specifically focusing on Database Splitting (Sharding) and Table Splitting (Partitioning) in MySQL. Now, let’s take a quick look back at the key points and then move on to an assessment to consolidate your learning.</p><p><strong>Key Points</strong></p><ol><li>Understanding Data Distribution: Data distribution has significant performance benefits but can also increase complexity. Knowing when and how to use it is crucial.</li><li>Database Splitting (Sharding) in MySQL: Sharding in MySQL involves splitting a database into smaller parts based on a key. It can significantly improve query response time, increase reliability, and facilitate horizontal scalability.</li><li>Table Splitting (Partitioning) in MySQL: Partitioning in MySQL involves breaking a table into smaller pieces without having to change SQL queries. The partitioning can be done based on various strategies like ranges, list values, hash values, etc.</li><li>Practical Examples: We discussed how database sharding might be implemented for an e-commerce site with a global customer base, and how table partitioning can be used to improve performance for frequently accessed recent data.</li><li>Making an Informed Decision: Deciding when to implement database sharding or table partitioning should consider data size, query performance, scalability, and type of data.</li></ol><p>Let’s now move to the assessment. You’ll be presented with a couple of scenarios, and your task is to decide whether to use sharding, partitioning, both, or none, and why.</p><p><strong>Assessment Scenarios</strong></p><ol><li>Scenario 1: You’re designing an application for a hospital, where you have a&nbsp;<code>patients</code>&nbsp;table storing patient records. The hospital sees thousands of patients each year, and on average, a patient visits once a year. Most queries involve accessing only recent patient records. Would you implement sharding, partitioning, both or none, and why?</li><li>Scenario 2: You’re developing an application for a tech news website where articles are often updated for corrections, and new information and user comments are constantly being written. The comments are stored in a&nbsp;<code>comments</code>&nbsp;table, and each comment is associated with an article. Would you implement sharding, partitioning, both or none, and why?</li><li>Scenario 3: You’re working on an e-commerce site that handles transactions from all over the world. The database includes a&nbsp;<code>transactions</code>&nbsp;table, holding details of every transaction ever made on the site. Should you implement sharding, partitioning, both, or none, and why?</li></ol><hr><ol><li><strong>Scenario 1</strong>: Given the scenario, it makes sense to implement&nbsp;<strong>table partitioning</strong>&nbsp;on the&nbsp;<code>patients</code>&nbsp;table. The queries involve accessing only recent patient records, and partitioning would allow for efficient query performance. Sharding might not be necessary as we do not have a clear shard key, and managing distributed transactions and maintaining consistency among shards might add unnecessary complexity.</li><li><strong>Scenario 2</strong>: In this scenario, a proper solution may be to partition the&nbsp;<code>comments</code>&nbsp;table. A date-based partitioning system might work well here, as comments related to older articles are probably read frequently, but not updated that much. Sharding might be overkill for this situation as it could add unnecessary complexity.</li><li><strong>Scenario 3</strong>: Sharding the&nbsp;<code>transactions</code>&nbsp;table would be beneficial here, especially on something like the location of the transaction. This would enable transactions from the same region to be grouped together, which could lead to more efficient querying. Furthermore, sharding can also help balance the load across multiple databases which provides additional benefits in terms of scalability and performance. In addition to sharding, you might also consider partitioning of individual shards.</li></ol><p>These are the preferred solutions based on the information provided. However, every application can have unique requirements and constraints, and it’s crucial to consider all factors when making design decisions. Remember, measure before you optimize!</p><blockquote class="colorquote danger"><p>中文文章: <a href="https://programmerscareer.com/zh-cn/mysql-interview16/">https://programmerscareer.com/zh-cn/mysql-interview16/</a><br>Author: <a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>Note: If you choose to repost or use this article, please cite the original source.</p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Let’s outline a curriculum for splitting databases and tables in MySQL&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Common(20+) Software Interview Questions(+ Answers) about MySQL/Redis/Kafka</title>
    <link href="https://programmerscareer.com/software-interview-set/"/>
    <id>https://programmerscareer.com/software-interview-set/</id>
    <published>2024-05-12T16:04:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>a collection of software interview questions&nbsp;about MySQL/Redis/Kafka, and this article updated on an ongoing basis</p><span id="more"></span><blockquote class="colorquote success"><p><strong>If it really helps you, Buy me a coffee for my HARD work, that will motivate me to create more. :D</strong><br><a href="https://ko-fi.com/programmerscareer">Buy Me a Coffee</a>  </p></blockquote><p>MySQL Interviews: Why does MySQL use B+ trees for&nbsp;indexing？ <a href="https://programmerscareer.com/mysql-interview4/">https://programmerscareer.com/mysql-interview4/</a></p><p>MySQL Interviews: MySQL interviews: What are the transaction isolation levels? What are the tradeoffs? <a href="https://programmerscareer.com/mysql-interview15/">https://programmerscareer.com/mysql-interview15/</a></p><p>MySQL Interviews: What are database transactions and why does MySQL use InnoDB as the default option <a href="https://programmerscareer.com/mysql-interview14/">https://programmerscareer.com/mysql-interview14/</a></p><p>MySQL Interviews: Briefly describe the difference between optimistic locks and pessimistic locks and the usage scenarios <a href="https://programmerscareer.com/mysql-interview5/">https://programmerscareer.com/mysql-interview5/</a></p><p>MySQL Interviews: What are the necessary conditions for a deadlock to occur? How do I resolve deadlocks? <a href="https://programmerscareer.com/mysql-interview6/">https://programmerscareer.com/mysql-interview6/</a></p><p>Redis Interviews: How many data structures does Redis have? How is Zset implemented? <a href="https://programmerscareer.com/redis-interview6/">https://programmerscareer.com/redis-interview6/</a></p><p>MySQL Interviews: What is the difference between a clustered index and a non-clustered index? <a href="https://programmerscareer.com/mysql-interview13/">https://programmerscareer.com/mysql-interview13/</a></p><p>MySQL Interviews: Briefly describe the occurrence scenarios of dirty reading and phantom reading. How does InnoDB solve phantom reading? <a href="https://programmerscareer.com/mysql-interview12/">https://programmerscareer.com/mysql-interview12/</a></p><p>MySQL Interviews: What is the difference between a unique index and a normal index? What are the advantages and disadvantages of using indexes? <a href="https://programmerscareer.com/mysql-interview11/">https://programmerscareer.com/mysql-interview11/</a></p><p>Redis Interviews: Briefly describe the advantages and disadvantages of RDB and AOF schemes in Redis persistence <a href="https://programmerscareer.com/redis-interview5/">https://programmerscareer.com/redis-interview5/</a></p><p>MySQL Interviews: Briefly describe gap locks in MySQL <a href="https://programmerscareer.com/mysql-interview10/">https://programmerscareer.com/mysql-interview10/</a></p><p>Redis Interviews: How to implement Distributed Locks with Redis <a href="https://programmerscareer.com/redis-interview2/">https://programmerscareer.com/redis-interview2/</a></p><p>Redis Interviews: How to prevent cache avalanche and cache penetration with Redis <a href="https://programmerscareer.com/redis-interview4/">https://programmerscareer.com/redis-interview4/</a></p><p>MySQL Interviews: How to tune MySQL performance <a href="https://programmerscareer.com/mysql-interview9/">https://programmerscareer.com/mysql-interview9/</a></p><p>MySQL Interviews: Briefly describe the primary/secondary synchronization mechanism of MySQL. What happens if the synchronization fails? <a href="https://programmerscareer.com/mysql-interview1/">https://programmerscareer.com/mysql-interview1/</a></p><p>MySQL Interviews: When doesn’t MySQL use the index? <a href="https://programmerscareer.com/mysql-interview8/">https://programmerscareer.com/mysql-interview8/</a></p><p>MySQL Interviews: What is an SQL injection attack? How can such attacks be prevented? <a href="https://programmerscareer.com/mysql-interview7/">https://programmerscareer.com/mysql-interview7/</a></p><p>MySQL Interviews: What are ACID in a database? <a href="https://programmerscareer.com/mysql-interview2/">https://programmerscareer.com/mysql-interview2/</a></p><p>Redis Interviews: The application and advantages and disadvantages of jump table in Redis <a href="https://programmerscareer.com/redis-interview1/">https://programmerscareer.com/redis-interview1/</a></p><p>Kafka Interviews: How does Kafka send messages reliably? <a href="https://programmerscareer.com/kafka-interview1">https://programmerscareer.com/kafka-interview1</a> /</p><p>MySQL Interviews: How does MySQL design indexes and optimize queries? <a href="https://programmerscareer.com/mysql-interview3/">https://programmerscareer.com/mysql-interview3/</a></p><p>Redis Interviews: If the Redis master node is down, how do you recover the data? <a href="https://programmerscareer.com/redis-interview3/">https://programmerscareer.com/redis-interview3/</a></p><p>MySQL Interviews: Suppose to create a composite index (a, b, c) If you query fields A and c, will this composite index be used? <a href="https://programmerscareer.com/redis-interview19/">https://programmerscareer.com/redis-interview19/</a></p><p>MySQL Interviews: What are the common storage engines for MySQL? What’s the difference? <a href="https://programmerscareer.com/redis-interview18/">https://programmerscareer.com/redis-interview18/</a></p><p>MySQL Interviews: The implementation principle of MySQL MVCC <a href="https://programmerscareer.com/redis-interview17/">https://programmerscareer.com/redis-interview17/</a></p><p>MySQL Interviews: When to split databases and when to split tables? <a href="https://programmerscareer.com/redis-interview16/">https://programmerscareer.com/redis-interview16/</a></p><blockquote class="colorquote success"><p><strong>If it really helps you, Buy me a coffee for my HARD work, that will motivate me to create more. :D</strong><br><a href="https://ko-fi.com/programmerscareer">Buy Me a Coffee</a>  </p></blockquote><blockquote class="colorquote danger"><p>中文文章: <a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a><br>Author: <a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>Note: If you choose to repost or use this article, please cite the original source.  </p></blockquote><!--/plan learn Redis about below in topics, Please add a topic named "Review and Assessments" and put it at the end:  If the Redis master node is down, how do you recover the data?--></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;a collection of software interview questions&amp;nbsp;about MySQL/Redis/Kafka, and this article updated on an ongoing basis&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="set" scheme="https://programmerscareer.com/categories/set/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Syntactic Sugars that You Should Know in Golang</title>
    <link href="https://programmerscareer.com/golang-syntactic-sugar/"/>
    <id>https://programmerscareer.com/golang-syntactic-sugar/</id>
    <published>2024-05-10T01:08:00.000Z</published>
    <updated>2024-05-12T13:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Exploring Syntactic Sugars in Go: A Comprehensive Guide</p><span id="more"></span><blockquote class="colorquote success"><p>Walking with a friend in the dark is better than walking alone in the light.<br> — Helen Keller  </p></blockquote>  <blockquote class="colorquote danger"><p>中文文章: <a href="https://programmerscareer.com/zh-cn/golang-syntactic-sugar/">https://programmerscareer.com/zh-cn/golang-syntactic-sugar/</a><br>Author: <a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>Note: If you choose to repost or use this article, please cite the original source.  </p></blockquote><!-- --><h2 id="Introduction-to-Syntax-Sugars-in-Go"><a href="#Introduction-to-Syntax-Sugars-in-Go" class="headerlink" title="Introduction to Syntax Sugars in Go"></a>Introduction to Syntax Sugars in Go</h2><p>Before I get into the specifics of syntactic sugar, let me explain to you what syntactic sugar is.</p><p>In computer science, “syntactic sugar” refers to a programming syntax that is internally transformed into a base syntax in order to make a program easier to read or express. In other words, this syntax does not introduce new features, but rather provides a more convenient way of programming.</p><p><strong>Golang</strong>, being a modern language, contains a lot of syntactic sugar to ease the programmer’s burden and make the code more readable.</p><p>For example, many high-level programming languages have the <code>++</code> operator, which is syntactic sugar used to increment the value of a variable by 1. Thus, instead of <code>i = i + 1</code>, we can type <code>i++</code>, which is shorter and faster to type, and which expresses the same incremental operation.</p><p>Next we’ll go through the common syntactic sugars in Golang, detailing each one. This will help you understand and use Golang better and write more compact and readable code.</p><p>Of course, the goal is not only to learn these features, but also to understand when and why to use them. A responsible Go developer knows not only how to utilize these syntactic sugars, but also when it is appropriate to use them.</p><h2 id="Variadic-Parameters"><a href="#Variadic-Parameters" class="headerlink" title="Variadic Parameters"></a>Variadic Parameters</h2><h3 id="Basic-Introduction"><a href="#Basic-Introduction" class="headerlink" title="Basic Introduction"></a>Basic Introduction</h3><p>Go allows a function to take any number of values as arguments, and Go provides the … operator to be used only at the end of a function’s parameter list. When using this operator, you should be aware of the following points:</p><ul><li>A function can have at most one variadic parameter;</li><li>The type of a variadic parameter is always a slice type;</li><li>The last parameter of a function can be a variadic parameter.</li></ul><h3 id="Declaration-and-Calling"><a href="#Declaration-and-Calling" class="headerlink" title="Declaration and Calling"></a>Declaration and Calling</h3><p>The declaration of a variadic function is similar to that of a regular function, except that the last parameter must be a variadic parameter. <strong>In the function body, a variadic parameter is treated as a slice.</strong></p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SumData</span><span class="hljs-params">(values …<span class="hljs-type">int64</span>)</span></span> (sum <span class="hljs-type">int64</span>) {</span><br><span class="line"><span class="hljs-comment">// Type of values is []int64.</span></span><br><span class="line">sum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values {</span><br><span class="line">sum += v</span><br><span class="line">}</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>When calling a variadic function, you can use two styles to pass arguments to a variadic parameter of type <code>[]T</code>:</p><blockquote><p><strong>1. Pass a slice as an argument</strong>. This slice must be assignable to a value of type <code>[]T</code> (or can be implicitly converted to type <code>[]T</code>). <strong>Following this argument, there must be three dots ‘…’</strong>.<br><strong>2. Pass zero or more arguments that can be implicitly converted to type T</strong> (or can be assigned to a value of type T). <strong>These arguments will be added to an anonymous slice of type <code>[]T</code> that is created at runtime, and then this slice will be passed as an argument to the function call</strong>.</p></blockquote><p>Note that you cannot mix these two styles of argument passing in the same variadic function call.</p><p>Note that you cannot mix these two styles of argument passing in the same variadic function call.</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">a0 := SumData()</span><br><span class="line">a1 := SumData(<span class="hljs-number">3</span>)</span><br><span class="line">a3 := SumData(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>)</span><br><span class="line"><span class="hljs-comment">// The top three lines are equivalent to the bottom three lines.</span></span><br><span class="line">b0 := SumData([]<span class="hljs-type">int64</span>{})…</span><br><span class="line">b1 := SumData([]<span class="hljs-type">int64</span>{<span class="hljs-number">2</span>})…</span><br><span class="line">b3 := SumData([]<span class="hljs-type">int64</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>})…</span><br><span class="line">fmt.Println(a0, a1, a3)</span><br><span class="line">fmt.Println(b0, b1, b3)</span><br><span class="line">}</span><br><span class="line"><span class="hljs-comment">// print</span></span><br><span class="line"><span class="hljs-comment">// 0 3 15</span></span><br><span class="line"><span class="hljs-comment">// 0 3 15</span></span><br></pre></td></tr></tbody></table></figure><p>The <code>Print</code>、<code>Println</code> and <code>Printf</code> functions in the <code>fmt</code> standard library package are all variadic functions. Their declarations are roughly as follows:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Print</span><span class="hljs-params">(a …<span class="hljs-keyword">interface</span>{})</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Printf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a …<span class="hljs-keyword">interface</span>{})</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Println</span><span class="hljs-params">(a …<span class="hljs-keyword">interface</span>{})</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Ignoring-Unnecessary-Information"><a href="#Ignoring-Unnecessary-Information" class="headerlink" title="Ignoring Unnecessary Information"></a>Ignoring Unnecessary Information</h2><p>We want to initialize the <code>init</code> function in a package but do not want to use any of the methods in the package. In this case, we can use the <code>_</code> operator to rename the import of an unused package:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-string">"github.com/tfrain"</span></span><br></pre></td></tr></tbody></table></figure><p>Sometimes we don’t necessarily use the return values of a function, and we have to come up with a creative name for it. Is there a way to handle unnecessary return values? Of course, we can use the <code>_</code> operator to assign the unwanted values to a blank identifier, which allows us to ignore them:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, ok := test(a, b <span class="hljs-type">int</span>)</span><br></pre></td></tr></tbody></table></figure><ol><li>Sometimes we want to exclude certain fields from serialization in JSON. The <code>-</code> operator can help us with this. Go structures provide a labeling feature, and in the structure tag, we can use the <code>-</code> operator to perform special handling on fields that we don’t want to serialize:</li></ol><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> {</span><br><span class="line">Name <span class="hljs-type">string</span> <span class="hljs-string">`json:"-"`</span></span><br><span class="line">Age <span class="hljs-type">string</span> <span class="hljs-string">`json:"age"`</span></span><br><span class="line">Email <span class="hljs-type">string</span> <span class="hljs-string">`json:"email,omitempty"`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>When we use <code>json.Marshal</code> to serialize a structure, it does not ignore empty values by default. Instead, it outputs the zero value of the field’s type (the zero value of a <code>string</code> type is “”, and the zero value of an object type is <code>nil</code>). If we want to ignore empty fields during serialization, we can add the <code>omitempty</code> attribute to the structure tag:</li></ol><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> {</span><br><span class="line">Name <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span></span><br><span class="line">Age <span class="hljs-type">string</span> <span class="hljs-string">`json:"age"`</span></span><br><span class="line">Email <span class="hljs-type">string</span> <span class="hljs-string">`json:"email,omitempty"`</span></span><br><span class="line">Active <span class="hljs-type">bool</span> <span class="hljs-string">`json:"active,omitempty"`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Declaration-Statements"><a href="#Declaration-Statements" class="headerlink" title="Declaration Statements"></a>Declaration Statements</h2><h3 id="Short-Variable-Declaration"><a href="#Short-Variable-Declaration" class="headerlink" title="Short Variable Declaration"></a>Short Variable Declaration</h3><p>In some other programming languages, it’s not common to declare variables every time they’re used. In Go, you can declare and initialize local variables using the syntax <code>name := expression</code> instead of using the <code>var</code> statement for declaration. This can reduce the number of steps required for declaration:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">10</span></span><br><span class="line">same as</span><br><span class="line">a := <span class="hljs-number">10</span></span><br></pre></td></tr></tbody></table></figure><p>When using short variable declaration, there are two things to note:</p><ul><li>Short variable declaration can only be used inside functions, not for initializing global variables.</li><li>Short variable declaration introduces a new variable, so you can’t declare the same variable again in the same scope.</li><li>When declaring multiple variables using short variable declaration, if one variable is new, you can use short variable declaration, but if all variables are already declared, you can’t declare them again.</li></ul><h3 id="Declaring-Variables-with-Unspecified-Length"><a href="#Declaring-Variables-with-Unspecified-Length" class="headerlink" title="Declaring Variables with Unspecified Length"></a>Declaring Variables with Unspecified Length</h3><p>In Go, arrays usually have a fixed length, and you have to specify the length when declaring the array. However, you can also omit the length and use the <code>…</code> operator to declare arrays. In this case, you just need to fill in the element values, and the compiler will handle the length:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := […]<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>} <span class="hljs-comment">// same as a := [3]int{1, 3, 5}</span></span><br></pre></td></tr></tbody></table></figure><p>When declaring a large array, you can use the <code>…</code> operator to set specific values for some indices:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := […]<span class="hljs-type">int</span>{<span class="hljs-number">1</span>: <span class="hljs-number">20</span>, <span class="hljs-number">999</span>: <span class="hljs-number">10</span>} <span class="hljs-comment">// array length is 1000, index 1 has value 20, index 999 has value 10, other indices have value 0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Checking-logic"><a href="#Checking-logic" class="headerlink" title="Checking logic"></a>Checking logic</h2><h3 id="Checking-if-a-Key-Exists-in-a-Map-in-Go"><a href="#Checking-if-a-Key-Exists-in-a-Map-in-Go" class="headerlink" title="Checking if a Key Exists in a Map in Go"></a>Checking if a Key Exists in a Map in Go</h3><p>Go provides the syntax <code>value, ok := m[key]</code> to check if a key exists in a map. This syntax is commonly used to only check the <code>ok</code> value. If the key exists, it returns the value associated with the key; otherwise, it returns an empty value:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">dict := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>{<span class="hljs-string">"tfrain"</span>: <span class="hljs-number">1</span>}</span><br><span class="line"><span class="hljs-keyword">if</span> value, ok := dict[<span class="hljs-string">"tfrain"</span>]; ok {</span><br><span class="line">fmt.Println(value)</span><br><span class="line">} <span class="hljs-keyword">else</span> {</span><br><span class="line">fmt.Println(<span class="hljs-string">"Key:tfrain not exist"</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Type-Assertions"><a href="#Type-Assertions" class="headerlink" title="Type Assertions"></a>Type Assertions</h3><p>We often use <code>interface</code> in Go, where there are two types: interfaces with methods and empty interfaces. Since Go 1.18 does not have generics, we can use empty interfaces as a pseudo-generic type. When we use empty interfaces as input parameters or output values, we need to use type assertions to obtain the type we need. In Go, the syntax for type assertions is as follows:</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, ok := x.(T)</span><br></pre></td></tr></tbody></table></figure><p>Here, <code>x</code> is an <code>interface</code> type, and <code>T</code> is a specific type. This syntax requires distinguishing the type of <code>x</code>. If <code>x</code> is an empty interface type:</p><p><strong>The type assertion for empty interface types is essentially a comparison of <code>_type</code> and the type to be matched in <code>eface</code>. If the comparison is successful, the value is assembled in memory and returned. If the comparison fails, the register is cleared, and the default value is returned.</strong></p><p>If <code>x</code> is a non-empty interface type:</p><p><strong>The type assertion for non-empty interface types is essentially a comparison of <code>*itab</code> in <code>iface</code>. If the comparison is successful, the value is assembled in memory and returned. If the comparison fails, the register is cleared, and the default value is returned.</strong></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Exploring Syntactic Sugars in Go: A Comprehensive Guide&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="golang" scheme="https://programmerscareer.com/categories/golang/"/>
    
    
    <category term="code" scheme="https://programmerscareer.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>你应该了解的 Golang 的语法糖</title>
    <link href="https://programmerscareer.com/zh-cn/golang-syntactic-sugar/"/>
    <id>https://programmerscareer.com/zh-cn/golang-syntactic-sugar/</id>
    <published>2024-05-09T00:42:00.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>探索 Go 中的语法糖：综合指南<br><img src="https://images.unsplash.com/photo-1508923567004-3a6b8004f3d7?crop=entropy&amp;cs=srgb&amp;fm=jpg&amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTUxODY1NzR8&amp;ixlib=rb-4.0.3&amp;q=85&amp;w=500&amp;h=500" alt="photo by Matteo Catanese on Unsplash"></p><span id="more"></span><blockquote class="colorquote success"><p>The free man is he who does not fear to go to the end of his thought.<br> — Léon Blum  </p></blockquote>  <h2 id="Golang-语法糖简介："><a href="#Golang-语法糖简介：" class="headerlink" title="Golang 语法糖简介："></a>Golang 语法糖简介：</h2><pre><code>解释什么是语法糖以及它们在 Golang 中的重要性。</code></pre><p>在计算机科学中，”语法糖”是指一种编程语法，它是为了使程序更易于读或表达，而在内部转化为基础语法。换句话说，这种语法并没有引入新的功能，而是提供了一种更加方便的编程方式。</p><p><strong>Golang</strong>，作为一个现代语言，包含了大量的语法糖来减轻程序员的负担并使代码更可读。</p><p>例如，许多高级编程语言中的 <code>++</code> 操作符，它是语法糖，用于增加变量的值 1。因此，我们可以输入 <code>i++</code> 而不是 <code>i = i + 1</code>，它更短和更快速地输入，并且它表达相同的增量操作。</p><p>接下来我们将会遍历Golang中的常见语法糖，分别详细介绍。这将会帮助你更好的理解和使用Golang，写出更紧凑、可读性更高的代码。</p><p>当然，学习的目标不仅是学习这些特性，更重要的是了解何时和为什么要使用它们。一个负责的 Go 开发人员不仅知道如何利用这些语法糖，还需要知道何时合适地使用它们。</p><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><code>Go</code>语言允许一个函数把任意数量的值作为参数，<code>Go</code>语言内置了…操作符，在函数的最后一个形参才能使用，使用它必须注意如下事项：</p><ul><li>一个函数的最后一个参数可以是一个变长参数；</li><li>一个函数可以最多有一个变长参数；</li><li>一个变长参数的类型总为一个切片类型。</li></ul><h3 id="声明和调用"><a href="#声明和调用" class="headerlink" title="声明和调用"></a>声明和调用</h3><p>变长函数声明和普通函数声明类似，只不过最后一个参数必须为变长参数。&nbsp;<strong>一个变长参数在函数体内将被视为一个切片。</strong></p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SumData</span><span class="hljs-params">(values ...<span class="hljs-type">int64</span>)</span></span> (sum <span class="hljs-type">int64</span>) {</span><br><span class="line"><span class="hljs-comment">// type of values is []int64。</span></span><br><span class="line">sum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values {</span><br><span class="line">sum += v</span><br><span class="line">}</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在变长参数函数调用中，可以使用两种风格的方式将实参传递给类型为<code>[]T</code>的变长形参：</p><blockquote><p><strong>1.传递一个切片做为实参</strong>。此切片必须可以被赋值给类型为<code>[]T</code>的值（或者说此切片可以被隐式转换为类型<code>[]T</code>）。&nbsp;**此实参切片后必须跟随三个点<code>…</code>**。<br><strong>2.传递零个或者多个可以被隐式转换为<code>T</code>的实参</strong>（或者说这些实参可以赋值给类型为<code>T</code>的值）。&nbsp;<strong>这些实参将被添加入一个匿名的在运行时刻创建的类型为<code>[]T</code>的切片中</strong>，然后此切片将被传递给此函数调用。</p></blockquote><p>注意，这两种风格的方式不可在同一个变长参数函数调用中混用。</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">a0 := SumData()</span><br><span class="line">a1 := SumData(<span class="hljs-number">3</span>)</span><br><span class="line">a3 := SumData(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>)</span><br><span class="line"><span class="hljs-comment">// The top three lines are equivalent to the bottom three lines.</span></span><br><span class="line">b0 := SumData([]<span class="hljs-type">int64</span>{}...)</span><br><span class="line">b1 := SumData([]<span class="hljs-type">int64</span>{<span class="hljs-number">2</span>}...)</span><br><span class="line">b3 := SumData([]<span class="hljs-type">int64</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>}...)</span><br><span class="line">fmt.Println(a0, a1, a3) </span><br><span class="line">fmt.Println(b0, b1, b3) </span><br><span class="line">}</span><br><span class="line"><span class="hljs-comment">// print </span></span><br><span class="line"><span class="hljs-comment">// 0 3 15</span></span><br><span class="line"><span class="hljs-comment">// 0 3 15</span></span><br></pre></td></tr></tbody></table></figure><p><code>fmt</code>标准库包中的<code>Print</code>、<code>Println</code>和<code>Printf</code>函数均为变长参数函数。 它们的声明大致如下：</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Print</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>{})</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Printf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>{})</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Println</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>{})</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="忽略相关信息"><a href="#忽略相关信息" class="headerlink" title="忽略相关信息"></a>忽略相关信息</h2><p>我们只想初始化包里的<code>init</code>函数，但是不会使用包内的任何方法，这时就可以使用&nbsp;_&nbsp;操作符号重命名导入一个不使用的包：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import&nbsp;_&nbsp;"github.com/tfrain"</span><br></pre></td></tr></tbody></table></figure><p>方法的返回值我们并不一定都使用，还要绞尽脑汁的给他想一个命名，有没有办法可以不处理不要的返回值呢？当然有，还是&nbsp;_&nbsp;操作符，将不需要的值赋给空标识符，就可以忽略：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_,&nbsp;ok&nbsp;:=&nbsp;test(a,&nbsp;b&nbsp;int)</span><br></pre></td></tr></tbody></table></figure><ol><li>有些时候我们想要<code>json</code>里面的某些字段不参加序列化，- 操作符可以帮我们处理，<code>Go</code>语言的结构体提供标签功能，在结构体标签中使用&nbsp;<strong>-</strong>&nbsp; 操作符就可以对不需要序列化的字段做特殊处理:</li><li>我们使用<code>json.Marshal</code>进行序列化时不会忽略<code>struct</code>中的空值，默认输出字段的类型零值（<code>string</code>类型零值是””，对象类型的零值是<code>nil</code>），如果我们想在序列化时忽略掉这些没有值的字段时，可以在结构体标签中中添加<code>omitempty</code>&nbsp;：</li></ol><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type&nbsp;Person&nbsp;struct{  </span><br><span class="line">&nbsp;&nbsp;Name&nbsp;string&nbsp;   `json:"-"`  </span><br><span class="line">&nbsp;&nbsp;Age&nbsp;string&nbsp;    `json:"age"`  </span><br><span class="line">&nbsp;&nbsp;Email&nbsp;string&nbsp;&nbsp;&nbsp;`json:"email,omitempty"`</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="声明相关"><a href="#声明相关" class="headerlink" title="声明相关"></a>声明相关</h2><h3 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h3><p>每次使用变量时都要先进行函数声明，对于些其他语言的人来说，并不习惯，那么在<code>Go</code>语言是不是也可以不进行变量声明直接使用呢？我们可以使用&nbsp;<strong>name := expression</strong>&nbsp;的语法形式来声明和初始化局部变量，相比于使用<code>var</code>声明的方式可以减少声明的步骤：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var&nbsp;a&nbsp;int&nbsp;=&nbsp;10  </span><br><span class="line">same as</span><br><span class="line">a&nbsp;:=&nbsp;10</span><br></pre></td></tr></tbody></table></figure><p>使用短变量声明时有两个注释事项：</p><ul><li>短变量声明只能在函数内使用，不能用于初始化全局变量</li><li>短变量声明代表引入一个新的变量，不能在同一作用域重复声明变量</li><li>多变量声明中如果其中一个变量是新变量，那么可以使用短变量声明，否则不可重复声明变量；</li></ul><h3 id="声明不定长数组"><a href="#声明不定长数组" class="headerlink" title="声明不定长数组"></a>声明不定长数组</h3><p>数组一般是有固定长度的，所以我们在声明数组时一般要声明长度，因为数组在编译时就要确认，但也可以不写数组长度，使用…操作符声明数组时，你只管填充元素值，其他的交给编译器自己去搞就好了；</p><p><code>a&nbsp;:=&nbsp;[…]int{1,&nbsp;3,&nbsp;5}&nbsp;//&nbsp;same as&nbsp;a&nbsp;:=&nbsp;[3]{1,&nbsp;3,&nbsp;5}   </code></p><p>有时我们想声明一个大数组，但是某些<code>index</code>想设置特别的值也可以使用…操作符搞定：</p><p><code>a&nbsp;:=&nbsp;[…]int{1:&nbsp;20,&nbsp;999:&nbsp;10}   //&nbsp;数组长度是100,&nbsp;下标1的元素值是20，下标999的元素值是10，其他元素值都是0   </code></p><h2 id="判断相关"><a href="#判断相关" class="headerlink" title="判断相关"></a>判断相关</h2><h3 id="判断map的key是否存在"><a href="#判断map的key是否存在" class="headerlink" title="判断map的key是否存在"></a>判断map的key是否存在</h3><p>Go语言提供语法&nbsp;<code>value, ok := m[key]</code>来判断<code>map</code>中的<code>key</code>是否存在，一般都是只利用ok来进行判断。value如果存在就会返回key所对应的值，不存在就会返回空值：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import&nbsp;"fmt"  </span><br><span class="line">  </span><br><span class="line">func&nbsp;main()&nbsp;{  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;dict&nbsp;:=&nbsp;map[string]int{"tfrain":&nbsp;1}  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;value,&nbsp;ok&nbsp;:=&nbsp;dict["tfrain"];&nbsp;ok&nbsp;{  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmt.Printf(value)  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println("key:tfrain not exist")  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;}  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>我们通常都会使用<code>interface</code>，一种是带方法的<code>interface</code>，一种是空的<code>interface</code>，<code>Go1.18</code>之前是没有泛型的，所以我们可以用空的<code>interface{}</code>来作为一种伪泛型使用，当我们使用到空的<code>interface{}</code>作为入参或返回值时，就会使用到类型断言，来获取我们所需要的类型，在Go语言中类型断言的语法格式如下：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value,&nbsp;ok&nbsp;:=&nbsp;x.(T)</span><br></pre></td></tr></tbody></table></figure><p>x是<code>interface</code>类型，T是具体的类型。这里类型断言需要区分<code>x</code>的类型，<br>如果<code>x</code>是空接口类型：</p><p><strong>空接口类型断言实质是将eface中_type与要匹配的类型进行对比，匹配成功在内存中组装返回值，匹配失败直接清空寄存器，返回默认值。</strong></p><p>如果<code>x</code>是非空接口类型：</p><p>*<em>非空接口类型断言的实质是 iface 中 <em>itab 的对比。</em>itab 匹配成功会在内存中组装返回值。匹配失败直接清空寄存器，返回默认值。</em>*</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/golang-syntactic-sugar/">https://programmerscareer.com/golang-syntactic-sugar/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。</p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;探索 Go 中的语法糖：综合指南&lt;br&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1508923567004-3a6b8004f3d7?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTUxODY1NzR8&amp;amp;ixlib=rb-4.0.3&amp;amp;q=85&amp;amp;w=500&amp;amp;h=500&quot; alt=&quot;photo by Matteo Catanese on Unsplash&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="golang" scheme="https://programmerscareer.com/categories/golang/"/>
    
    
    <category term="code" scheme="https://programmerscareer.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>use-channel</title>
    <link href="https://programmerscareer.com/zh-cn/use-channel/"/>
    <id>https://programmerscareer.com/zh-cn/use-channel/</id>
    <published>2024-01-03T00:54:44.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="单并发控制"><a href="#单并发控制" class="headerlink" title="单并发控制"></a>单并发控制</h2><p>在Go语言中，判断<code>channel</code>是否关闭并不能直接保证<code>channel</code>中的数据已经全部消费完毕。当你从一个<code>channel</code>接收数据时，你会得到两个值：接收到的数据和一个布尔值。布尔值为<code>false</code>时表示<code>channel</code>已经被关闭且没有更多的数据可接收。但是，仅凭这个机制并不能保证在<code>channel</code>关闭时已经消费了所有发送到<code>channel</code>的数据。</p><p>为了确保在关闭<code>channel</code>之前所有的数据都被消费完毕，你需要更细致的控制发送和接收的过程。以下是一个推荐的做法：</p><span id="more"></span><h3 id="使用-for-range-循环和同步原语"><a href="#使用-for-range-循环和同步原语" class="headerlink" title="使用 for range 循环和同步原语"></a>使用 <code>for range</code> 循环和同步原语</h3><ol><li><p><strong>发送端</strong>：发送数据到<code>channel</code>。</p></li><li><p><strong>接收端</strong>：使用<code>for range</code>循环来接收<code>channel</code>上的数据。这个循环会持续接收数据直到<code>channel</code>被关闭。</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch {</span><br><span class="line">    <span class="hljs-comment">// 处理msg</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>同步原语</strong>：使用<code>sync.WaitGroup</code>来确保所有的数据都被发送并且在关闭<code>channel</code>之前都被接收处理。</p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 发送数据</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, msg := <span class="hljs-keyword">range</span> messages {</span><br><span class="line">    wg.Add(<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(m <span class="hljs-type">string</span>)</span></span> {</span><br><span class="line">        <span class="hljs-keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="hljs-comment">// 发送消息</span></span><br><span class="line">        ch &lt;- m</span><br><span class="line">    }(msg)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 等待所有消息发送完毕</span></span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="hljs-built_in">close</span>(ch)</span><br></pre></td></tr></tbody></table></figure></li><li><p>**关闭<code>channel</code>**：当所有的数据都被发送并且<code>WaitGroup</code>的计数器归零后，关闭<code>channel</code>。此时，<code>for range</code>循环将退出。</p></li></ol><p>这种方法利用<code>for range</code>循环的特性，在<code>channel</code>关闭后自动结束循环，这确保了在<code>channel</code>关闭之前所有的数据都已经被接收并处理。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保在所有数据发送完成后关闭<code>channel</code>。否则，发送到已关闭的<code>channel</code>将会导致panic。</li><li>在多个发送者的情况下，需要小心协调以避免在数据发送完毕之前关闭<code>channel</code>。</li><li>使用<code>sync.WaitGroup</code>时，确保正确地使用<code>Add</code>、<code>Done</code>和<code>Wait</code>方法来避免死锁。</li></ul><p>通过上述方法，你可以确保<code>channel</code>在所有数据都被正确消费后才关闭，这是在并发编程中确保数据完整性的一种有效方式。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;单并发控制&quot;&gt;&lt;a href=&quot;#单并发控制&quot; class=&quot;headerlink&quot; title=&quot;单并发控制&quot;&gt;&lt;/a&gt;单并发控制&lt;/h2&gt;&lt;p&gt;在Go语言中，判断&lt;code&gt;channel&lt;/code&gt;是否关闭并不能直接保证&lt;code&gt;channel&lt;/code&gt;中的数据已经全部消费完毕。当你从一个&lt;code&gt;channel&lt;/code&gt;接收数据时，你会得到两个值：接收到的数据和一个布尔值。布尔值为&lt;code&gt;false&lt;/code&gt;时表示&lt;code&gt;channel&lt;/code&gt;已经被关闭且没有更多的数据可接收。但是，仅凭这个机制并不能保证在&lt;code&gt;channel&lt;/code&gt;关闭时已经消费了所有发送到&lt;code&gt;channel&lt;/code&gt;的数据。&lt;/p&gt;
&lt;p&gt;为了确保在关闭&lt;code&gt;channel&lt;/code&gt;之前所有的数据都被消费完毕，你需要更细致的控制发送和接收的过程。以下是一个推荐的做法：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="golang" scheme="https://programmerscareer.com/categories/golang/"/>
    
    
    <category term="code" scheme="https://programmerscareer.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 面试：Kafka 发送消息是如何保证可靠性的？</title>
    <link href="https://programmerscareer.com/zh-cn/kafka-interview1/"/>
    <id>https://programmerscareer.com/zh-cn/kafka-interview1/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>你曾被提过类似的问题在面试中问过吗？或者将来会遇到，让我们一起探索和掌握它！</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a>  </p></blockquote><h1 id="主题-1-1-如何理解-Kafka-工作原理？"><a href="#主题-1-1-如何理解-Kafka-工作原理？" class="headerlink" title="主题: 1.1 如何理解 Kafka 工作原理？"></a><strong>主题</strong>: 1.1 如何理解 Kafka 工作原理？</h1><p>Apache Kafka 是 LinkedIn 开源并后来捐赠给 Apache Software Foundation 的实时数据处理软件平台。其目标是为处理实时数据流提供一个统一、高吞吐量、低延迟的平台。它使用 Scala 和 Java 编写。</p><p>Kafka 生态系统包括生产者、消费者、主题、Brokers 和 ZooKeeper：</p><p><strong>生产者</strong>：生产者是将原始消息推送到 Kafka Brokers 的组件。生产者可以将消息发送到特定主题或者让 Kafka 进行路由和负载平衡。</p><p><strong>Brokers</strong>：Kafka Brokers 是系统的核心部分；它们接收生产者发来的消息，分配偏移量并提交消息到磁盘上的存储。</p><p><strong>消费者</strong>：消费者从Brokers读取。然而，与传统的消息系统不同，消费者从Brokers拉取消息。</p><p><strong>主题和分区</strong>：主题是特定类别的消息流。Kafka 主题分割成多个分区，其中包含记录的顺序不可更改的列表。分区允许并行化主题，并将数据分割到多个节点上。</p><p><strong>ZooKeeper</strong>：ZooKeeper 管理和协调 Kafka 集群。ZooKeeper 服务用于维护名称和配置数据，并提供灵活和可靠的同步功能。</p><p>Kafka 的工作原理类似于传递系统。例如，想象一下邮递员（生产者）向特定邮件盒（主题）投递信件（消息）。邮件局（Kafka）排序和维护这些信件，最后，居民（消费者）从邮件盒中提取他们的邮件。</p><h1 id="主题：-1-2-Kafka-生产者"><a href="#主题：-1-2-Kafka-生产者" class="headerlink" title="主题： 1.2 Kafka 生产者"></a><strong>主题</strong>： 1.2 Kafka 生产者</h1><p>Kafka 生产者是负责向 Kafka 主题发布数据（称为记录）的组件。生产者是为了向 Kafka Brokers提供数据的关键组件。</p><p>下面是 Kafka 生产者的工作原理：</p><p><strong>创建生产者</strong>：生产者使用特定的属性创建，例如Brokers的地址、键序列化器和值序列化器。Brokers使用这些属性来识别正确的主题并了解如何解析消息。</p><p><strong>写数据</strong>：创建生产者后，它可以开始发送记录到指定主题。Kafka 记录包含一个键和一个值。这些是字节数组。键是可选的，用于确定特定分区的主题，其中消息将被写入。如果键不存在，Kafka 使用轮询方法写入分区。</p><p><strong>分区</strong>：生产者发布数据到不同的分区，可以采用轮询方法或者语义上的有意义方法。当键为 null 时，数据将按轮询方式写入分区。如果键存在，所有具有该键的消息都将写入同一分区（如果分区数量不变）。</p><p><strong>序列化</strong>：Kafka 消息是字节数组。因此，无论数据格式如何，您必须将其转换为字节，以发送到 Kafka。我们称这个过程为序列化。因此，每次发送记录时，生产者必须将对象转换为字节。</p><p><strong>确认和重试</strong>：在分布式系统中，机器会失败。Kafka 提供了确认和重试的机制。Kafka 可以设置为在写入领导者（ack=1）、所有追随者（ack=all）或者不确认（ack=0）时进行确认。</p><p>从生产者配置中可以看出，我们可以通过调整可靠性和持久性保证来利用有效地事件驱动的系统的深入理解。</p><h1 id="主题-1-3-可靠消息传递-—-基本原理"><a href="#主题-1-3-可靠消息传递-—-基本原理" class="headerlink" title="主题: 1.3 可靠消息传递 — 基本原理"></a><strong>主题</strong>: 1.3 可靠消息传递 — 基本原理</h1><p>可靠消息传递是任何消息中间件的关键部分。 Kafka 提供了强大的持久性保证和容错性来确保可靠消息传递。</p><p>可靠消息传递的基本原理在 Kafka 中主要围绕以下主要概念：</p><p><strong>生产者和消息确认</strong>：我们已经了解过，生产者向 Kafka Brokers发送消息。这些消息可以以不同的方式进行确认，控制生产者的 acks 属性。该确认级别影响消息的持久性。一个 ack 的值为 ‘1’ 表示已成功写入主题的领导者日志。一个 ack 的值为 ‘all’ 表示已成功写入所有同步复制的日志。</p><p><strong>复制和同步复制</strong>：复制是确保消息持久性的关键特性。每个 Kafka 分区都有多个复制，其中一个被选为领导者。所有的写入和读取都通过领导者进行。其他是追随者，其主要任务是复制领导者。只有在所有的同步复制中写入消息时，消息才被认为已提交并成功写入。</p><p><strong>消费者偏移量和传递语义</strong>：消费者从 Kafka 主题中读取消息并在其偏移量上进行跟踪，以存储消息的偏移量。Kafka 提供三种传递语义：至多一次、至少一次和精确一次。通过正确地存储和管理偏移量，Kafka 确保消息至少被传递一次。</p><p><strong>提交和未提交的消息</strong>：在 Kafka 中，消息被认为已提交，当它们成功地写入所有同步复制的日志时。消息可以写入日志，但是消费者不能消费它们，直到它们被提交，保护数据一致性和部分数据在故障发生时。</p><p>中文翻译:</p><h1 id="主题-1-4-Kafka-Brokers和主题复制"><a href="#主题-1-4-Kafka-Brokers和主题复制" class="headerlink" title="主题: 1.4 Kafka Brokers和主题复制"></a><strong>主题:</strong> 1.4 Kafka Brokers和主题复制</h1><p>Kafka Brokers是系统的核心部分，处理生产者发送的消息，分配偏移量并将消息持久化到磁盘上。现在，让我们深入了解。</p><p>Kafka 集群由多个Brokers组成。每个Brokers可以处理来自多个客户端的数据和请求，因为主题分区并分布在多个Brokers实例上。</p><p><strong>主题复制:</strong> Kafka 的复制是可靠性和容错性的关键特性。每个主题可以有多个复制，允许在多个Brokers上存储。这意味着即使Brokers出现故障，主题数据仍然可以从其他Brokers处获取。</p><p>复制的主题分区被分布到集群中的多个Brokers上。具有复制的主题提供了 Kafka 的容错性。</p><p><strong>Leader 和 Follower:</strong> 对于分区，一个复制会成为 Leader，其他的会成为 Follower。领导者处理分区的读取和写入请求，而追随者以被动的方式复制领导者。如果领导者出现故障，其中一个追随者将自动成为新的领导者。</p><p><strong>同步复制(ISR):</strong> 如果追随者超出领导者的范围（配置可变），领导者将从 ISR（同步复制）列表中删除追随者。只有 ISR 列表中的成员才能被选为领导者。</p><p><strong>复制和可靠性:</strong> Brokers在主题复制的角色和功能是关键的，为 Kafka 提供的数据传递语义。读取和写入Brokers确保记录的持久性，并且Brokers的故障不会影响数据的完整性。</p><h1 id="主题-1-5-Kafka-消费者的进入和出口"><a href="#主题-1-5-Kafka-消费者的进入和出口" class="headerlink" title="主题: 1.5 Kafka 消费者的进入和出口"></a><strong>主题:</strong> 1.5 Kafka 消费者的进入和出口</h1><p>Kafka 消费者是读取和处理数据的应用程序。消费者的角色和功能是关键的，为 Kafka 提供了可靠性和容错性。</p><p>下面是 Kafka 消费者的一些关键方面：</p><p><strong>消费者组:</strong> 多个消费者可以组成一个“消费者组”。作为组的一部分，他们共享消费负载，每个消费者读取主题的分区。这为 Kafka 提供了负载平衡和容错性的特性。</p><p><strong>消费消息:</strong> 消费者读取主题并处理它们。他们维护下一条消息的偏移量。</p><p><strong>偏移量和消费者位置:</strong> 每个消费者组维护其偏移量或位置——记录哪些消息已被消费。如果消费者成功处理了一条消息，则偏移量将进一步。因此，即使消费者崩溃，它也可以从其离开的地方继续，增加了系统的容错性和坚持性。</p><p><strong>重平衡:</strong> 当消费者停止或新消费者加入 Kafka 消费者组时，重平衡协议被初始化。该协议确保消费者优雅地离开，而新消费者加入平滑地，不会影响消费者组内的消息消费过程。</p><p><strong>传递语义:</strong> 根据消费者如何管理偏移量和提交，Kafka 提供三种传递语义——至多一次、至少一次和精确一次。正确地设计消费者应用程序是关键的，以确保它们能够正确地处理这些语义。</p><p>在 Kafka 数据流中，消费者起着重要的角色，驱动实时处理系统。深入了解 Kafka 消费者是关键的，以利用 Kafka 的全部潜力来构建健壮和可扩展的数据处理系统。</p><h1 id="主题-1-6-Kafka-如何可靠传递消息"><a href="#主题-1-6-Kafka-如何可靠传递消息" class="headerlink" title="主题: 1.6 Kafka 如何可靠传递消息"></a><strong>主题:</strong> 1.6 Kafka 如何可靠传递消息</h1><p>Kafka 的主要责任是可靠地传递生产者（写数据）发送的记录到消费者（读数据）。下面是 Kafka 如何确保可靠消息传递的细节：</p><p><strong>复制和冗余性:</strong> Kafka 通过主题复制功能确保消息持久性。Kafka 主题被分割成分区，并且每个分区可以在多个节点上复制，称为伺服器。这意味着同一条消息可以存在多个地方，提供了高级冗余性。</p><p><strong>Leader 和 Follower:</strong> 对于每个 Kafka 分区，伺服器可以在两种角色中选择：领导者和追随者。所有的读取和写入都由领导者处理，而追随者以被动的方式复制领导者。如果领导者出现故障，则追随者可以替代并为消费者提供业务持续性。</p><p><strong>确认(ACKs):</strong> ACKs 起着重要的作用。当生产者发送消息时，它可以选择在写入领导者的日志中收到确认（acks=1），或者在写入所有同步复制中收到确认（acks=all）。这种选择会贡献到性能和坚持性的权衡。</p><p><strong>同步复制(ISRs):</strong> Kafka 强制要求只有处于同步状态的复制才能被选为领导者。ISR 是一个复制，它已经完全抓住了分区领导者，并且没有超过指定时间内领导者日志的延迟。确保领导者总是来自 ISR 给 Kafka 提供了强一致性，因为它保证了写入到领导者并确认的消息不会丢失，只要故障数量在复制因子内。</p><p><strong>消费者偏移量:</strong> Kafka 消费者维护其偏移量（读取位置）。即使消费者出现故障，它也可以从它保存的偏移量中恢复读取消息，从而最小化数据丢失。</p><p>总结一下，Kafka 确保可靠地传递消息通过分割数据并复制到多个节点以提供冗余性，确认，维护 ISR 列表以提供一致性，并利用偏移量进行有效的消费。</p><h1 id="主题：1-7-Kafka-可靠性最佳实践"><a href="#主题：1-7-Kafka-可靠性最佳实践" class="headerlink" title="主题：1.7 Kafka 可靠性最佳实践"></a><strong>主题</strong>：1.7 Kafka 可靠性最佳实践</h1><p>Kafka 集群的可靠性主要取决于管理和相关的传递实践。下面是 Kafka 的可靠性最佳实践：</p><p><strong>监控你的集群</strong>：保持关注你的 Kafka 集群。这包括追踪各种指标，例如未提交的消息数量、进入和从每个节点传出的数据率、主题和分区数量，以及未复制的分区数量。监控可帮助您识别潜在的问题并在严重程度上进行预防。</p><p><strong>合理的保留期</strong>：请记，增加保留期会增加存储和堆使用量。根据需要进行平衡，以避免资源限制。</p><p><strong>合理的分区数量</strong>：在选择分区数量时，请谨慎考虑。虽然更多的分区允许更好的并行性，但它也意味着更多的打开的服务器连接和更高的 ZooKeeper 负载。</p><p><strong>合理的复制因子</strong>：高复制因子提高了冗余性和可靠性，但它也会增加存储要求。根据所需的冗余程度进行配置。</p><p><strong>合理的确认策略</strong>：根据应用程序要求使用正确的确认策略（‘acks’）。对于关键数据，请考虑使用 ‘acks=all’，以确保数据在所有同步复制中都被确认。</p><p>**有效的 In-Sync Replicas (ISRs)**：配置 ISR 设置以确保您有正确的平衡，以便保持适当的延迟和持久性保证。请确保 min.insync.replicas 根据需要进行设置，以避免在故障期间丢失数据。</p><p><strong>消费者偏移管理</strong>：请确保消费者定期提交其偏移量。这可帮助避免在故障期间重新广播大量数据。但请勿提交过于频繁，因为每次提交都是对 ZooKeeper 的调用。</p><p>总之，在 Kafka 中实现可靠的传递需要一个平衡，其中包括操作要求、资源使用和应用程序特定要求。</p><h1 id="主题：1-8-Kafka-的消息传递语义"><a href="#主题：1-8-Kafka-的消息传递语义" class="headerlink" title="主题：1.8 Kafka 的消息传递语义"></a><strong>主题</strong>：1.8 Kafka 的消息传递语义</h1><p>在 Kafka 中，消息传递语义决定了生产者如何将消息传递给消费者。Kafka 提供三种消息传递语义：</p><p><strong>1. At Most Once</strong>：在这种情况下，消息被传递至多一次给消费者。这意味着消息可能会丢失，但它们不会被重新传递或重复。这是最快的，因为它涉及最少的生产者和 Kafka 之间的协调。然而，它不是最可靠的方法，因为任何在 Kafka 发送消息和消费者读取它之间的故障都会导致消息的丢失。</p><p><strong>2. At Least Once</strong>：消息被传递至少一次给消费者。但是，在某些情况下，消息可能会重复，这可能会导致问题。这种方法更可靠，因为它确保消息不会丢失。然而，它有重复消息的风险，因为可能会重新传递。对于幂等处理，这可能是完全可以的。</p><p><strong>3. Exactly Once</strong>：这确保每个消息被传递恰好一次——无损失，无重复。然而，它是最慢和最资源密集的选择，因为需要事务来跟踪进度。这通常用于关键系统，其中消息的丢失或重复可能会导致重大问题。</p><p>这些传递语义决定了你的 Kafka 基于应用程序的系统的坚持和可靠性。选择速度、一致性和可靠性取决于应用程序的使用情况。</p><h1 id="主题：1-9-回顾和评估"><a href="#主题：1-9-回顾和评估" class="headerlink" title="主题：1.9 回顾和评估"></a><strong>主题</strong>：1.9 回顾和评估</h1><p>我们已经详细介绍了 Kafka 课程的许多方面，让我们来做一个简短的回顾：</p><ol><li><strong>Kafka 是如何工作的</strong>：我们学习了各种 Kafka 组件如何相互作用以提供一个可靠、可伸缩和容错的消息系统。</li><li><strong>Kafka 生产者</strong>：我们深入探讨了 Kafka 生产者如何发送消息并了解了其关键配置。</li><li><strong>可靠消息传递的基本概念</strong>：我们了解了确保消息持久性和可靠性在 Kafka 中的基本概念。</li><li><strong>Kafka 节点和主题复制</strong>：我们深入探讨了 Kafka 节点的工作原理并了解了主题复制如何增加可靠性。</li><li><strong>Kafka 消费者</strong>：我们探索了 Kafka 消费者和消费者组的复杂性并确定了其角色在保持可靠性方面的重要性。</li><li><strong>Kafka 如何可靠地发送消息</strong>：我们剖析了 Kafka 内部机制，用于确保可靠的消息传递。</li><li><strong>Kafka 的可靠消息传递最佳实践</strong>：我们讨论了优化 Kafka 的消息传递以增加可靠性的具体方法。</li><li><strong>Kafka 的消息传递语义</strong>：最后，我们看了三种类型的传递语义，它们的重要性和使用场景。</li></ol><p>现在，是时候评估你的了解和应用了。我们可以进行一些练习问题和分析真实世界中广泛使用的 Kafka 场景，以帮助固定你所学的知识并帮助你更好地将 Kafka 集成到你的系统中。</p><p>例题：列出并解释 Kafka 中的三种不同的传递语义？</p><p><strong>解决方案</strong>：</p><ol><li><strong>At Most Once</strong>：在这种情况下，消息被传递至多一次，这意味着消息可能会丢失，但它们不会被重新传递或重复。这是最快的，但是，它不是最可靠的方法，因为任何在 Kafka 发送消息和消费者读取它之间的故障都会导致消息的丢失。</li><li><strong>At Least Once</strong>：消息被传递至少一次，这意味着消息是确保传递的，但是，在某些情况下，消息可能会重复，这可能会导致问题。这种方法更可靠，但是，重复可能会成为问题。</li><li><strong>Exactly Once</strong>：在这种情况下，消息被传递恰好一次——无损失，无重复。然而，它是最慢和最资源密集的选择，因为需要事务来跟踪进度。这通常用于关键系统，其中消息的丢失或重复可能会导致重大问题。</li></ol><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>Kafka 集群中 Kafka 生产者的角色是什么？</p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>请解释 Kafka 中主题复制的概念。为什么它是重要的？</p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>请介绍 Kafka 中的 In-Sync Replicas (ISRs)。</p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>请提供可靠消息传递在 Kafka 中的一些最佳实践。</p><h2 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h2><p>请说明 Kafka 是如何保证可靠消息传递的？</p><h2 id="答案1"><a href="#答案1" class="headerlink" title="答案1"></a>答案1</h2><p>Kafka 集群中的 Kafka 生产者的角色是发布数据或消息到一个或多个 Kafka 主题。生产者发送的消息会被追加到提交日志的末尾并分配一个唯一的偏移号码。</p><h2 id="答案2"><a href="#答案2" class="headerlink" title="答案2"></a>答案2</h2><p>Kafka 主题复制是 Kafka 中的一个特性，用于确保集群中的消息在某些 Kafka 节点（由于故或维护而不可用）不可用时仍然可用。每个主题可以在配置的节点数量上复制。这有助于确保没有消息丢失并提供高数据可用性。</p><h2 id="答案3"><a href="#答案3" class="headerlink" title="答案3"></a>答案3</h2><p>In-Sync Replicas (ISRs) 是与领导者同步的复制集。任何超过某个配置时间未向领导者发送获取请求的复制集成 ISR 集合。如果复制集未能从领导者获取，它将从 ISR 集合中删除并不会被认为是为客户端生产数据的候选者。</p><h2 id="答案-4"><a href="#答案-4" class="headerlink" title="答案 4"></a>答案 4</h2><p>在 Kafka 中可靠消息传递的一些最佳实践包括根据使用场景选择正确的消息传递语义，遵循最小权限原则进行权限管理，为长期主题使用压缩，监控并设置警报关键指标，保持 Kafka 集群和客户端库的更新，等等。</p><h2 id="答案-5"><a href="#答案-5" class="headerlink" title="答案 5"></a>答案 5</h2><p>Kafka 保证可靠消息传递通过多种机制来实现，例如复制、In-Sync Replicas (ISRs)、确认和配置可靠性语义。生产者会等待来自全部 In-Sync Replicas 的确认，直到消息被写入。如果消息写入失败，生产者会自动重试。消费者会维护一个偏移量来跟进每个主题的进度。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/kafka-interview1/">https://programmerscareer.com/kafka-interview1/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;你曾被提过类似的问题在面试中问过吗？或者将来会遇到，让我们一起探索和掌握它！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="kafka" scheme="https://programmerscareer.com/categories/kafka/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试:简要介绍MySQL的主从同步机制</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview1/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview1/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>让我们构建MySQL的主/从同步机制课程，并了解如果同步失败会发生什么</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题-1-1-数据库同步简介"><a href="#主题-1-1-数据库同步简介" class="headerlink" title="主题:1.1 数据库同步简介"></a>主题:1.1 数据库同步简介</h1><hr><p>数据库同步是数据库世界中的一个关键概念。跨多个平台、数据库或系统维护准确、一致的数据的复杂性一直是一个挑战。这就是数据库同步的亮点所在。</p><p>当我们谈论数据库同步时，我们指的是确保两个或多个数据库中的数据是一致的过程。这通常意味着所有数据库中的数据应该是相同的，以反映任何数据库中的所有更新。例如，在银行系统中，客户的账户余额应该是相同的，无论是在网上、在自动取款机上还是在分行检查。如果客户在分行取款，这应该立即反映在网上和自动取款机上看到的余额上。这种实时准确性是通过所涉及的各种数据库的同步来实现的。</p><p>同步的一些主要好处包括:</p><ul><li><strong>数据一致性</strong>:数据库同步确保数据在所有平台上保持一致。这在金融和医疗保健等许多行业至关重要，因为这些行业的数据准确性至关重要。</li></ul><ul><li><strong>效率</strong>:通过确保一个数据库中的变化反映在所有其他数据库中，同步有助于使系统更高效，数据更可靠。冗余减少了，用户总是可以访问最新的数据，无论他们从哪里访问数据。</li><li><strong>可扩展性</strong>:随着系统规模的增长，其数据也在增长。数据库同步允许随着数据输入的增加而轻松扩展数据库。可以同步多个服务器来处理更多数据，从而提高系统的整体性能。  </li><li><strong>备份</strong>:同步可以作为数据备份的一种形式。如果一台服务器宕机，数据不会丢失，因为它镜像在另一台服务器上。这提高了数据可靠性和系统耐久性。<br>在课程的下一部分中，我们将仔细研究数据库系统中的主要和次要体系结构模型，包括MySQL。请继续关注!</li></ul><hr><h1 id="主题-1-2理解主-次体系结构"><a href="#主题-1-2理解主-次体系结构" class="headerlink" title="主题:1.2理解主/次体系结构"></a>主题:1.2理解主/次体系结构</h1><hr><p>在许多数据库系统中，特别是在MySQL中，一种流行的结构是主/从体系结构，也称为主/从体系结构。</p><p>在深入研究体系结构细节之前，让我们简要讨论一下每个组件代表什么。</p><ul><li><strong>Primary Database (Master Database)</strong>:原始数据库或主数据库。此处所做的任何更改或更新也会反映在辅助数据库中。主数据库通常处于读写模式，并且通常是大多数应用程序操作发生的地方。</li><li><strong>Secondary Database (Slave Database)</strong>:这些是主数据库的副本。辅助数据库的存在通常是为了增强可靠性、数据恢复和负载平衡。它们复制主数据库中的数据，虽然有些应用程序允许双向同步(其中一个数据库上的更新反映在另一个数据库上)，但许多辅助数据库是只读的。</li></ul><p>在MySQL环境中，主数据库以二进制日志(binlog)记录对其执行的更新。该日志作为所有更改的书面历史记录，可用于将这些更改复制到辅助数据库。很酷，对吧?</p><p>在主服务器上执行事件或事务时，辅助服务器上不会立即发生任何事情。相反，事件首先被写入主服务器上的二进制日志。</p><p>辅助服务器有一个名为I/O Thread的组件，它连接到主服务器，并几乎立即将二进制日志事件复制到中继日志中。</p><p>另一个名为SQL线程的组件从中继日志中读取事件，并将其应用到辅助服务器。这样，在辅助服务器上以相同的顺序执行相同的事件，因此，两个服务器上的数据是一致的。</p><p>该模型提供了备份供应、分析性能、读取可伸缩性和高可用性等优点。但是，它需要仔细管理以确保数据一致性并避免冲突。</p><p>在接下来的课程模块中，我们将深入研究此同步机制的其他细节以及如何有效地处理潜在问题。</p><h1 id="主题-1-3-MySQL的同步机制"><a href="#主题-1-3-MySQL的同步机制" class="headerlink" title="主题: 1.3 MySQL的同步机制"></a>主题: 1.3 MySQL的同步机制</h1><hr><p>MySQL有一套丰富的机制来确保数据在不同数据库之间保持一致。以下是MySQL同步的关键要素:</p><ul><li><strong>1.二进制日志</strong>:二进制日志记录对MySQL数据的所有更改。这包括数据更改，如表创建操作或对表数据的更改，以及导致更改的每个语句所花费的时间。这在同步数据方面起着关键作用。</li><li><strong>2.复制</strong>:复制是MySQL中最流行的功能之一。它允许从一个MySQL数据库服务器(主服务器)复制数据到一个或多个MySQL数据库服务器(辅助服务器)。默认情况下，复制是异步的，这带来了很大的灵活性。但是您也可以选择设置半同步复制。</li><li><strong>3.全局事务标识符(gtid):</strong> gtid使跟踪事务更容易。当事务发生时，将为其提供一个GTID，该GTID在所有服务器上都是唯一的。gtid的主要好处是支持更简单的自动故障转移和更高的可靠性。</li><li><strong>4.组复制</strong>:组复制增强MySQL的复制。它提供了对崩溃或无法访问的服务器的内置检测，并可以重新配置组、主要选举和从其他组成员自动分布式恢复，因此业务操作不必停止。</li><li><strong>5.InnoDB ReplicaSet</strong>:对于不需要高可用性系统的小规模设置，可以部署一种称为InnoDB ReplicaSet的轻量级故障转移管理方法。它提供了易于使用的命令行工具来设置和管理较小规模的复制集。</li><li><strong>6.半同步复制</strong>:半同步复制提供了一个选项，只有当要复制的数据被发送到另一个副本时，提交才能成功返回到客户端。半同步复制可用于阻止事务，直到副本确认已将事件写入其副本日志，从而防止由于主节点丢失或崩溃而导致的数据丢失。因此，我们可以说半同步复制是同步复制的高持久性和异步复制的低延迟之间的折衷。</li></ul><p>MySQL通过这些同步机制实现数据一致性。这些机制确保副本接收主数据库上的更新，从而实现跨预期数据处理管道的数据协调。</p><p>接下来，我们将深入研究同步失败的后果以及如何检测和减轻这些事件。</p><hr><h1 id="主题-1-4-同步失败的后果"><a href="#主题-1-4-同步失败的后果" class="headerlink" title="主题: 1.4 同步失败的后果"></a>主题: 1.4 同步失败的后果</h1><hr><p>在任何同步至关重要的系统中，例如MySQL中的主/从设置，同步失败可能导致各种问题。以下是同步失败的一些潜在后果:</p><ul><li><strong>1.数据不一致</strong>:这是同步失败最直接和最明显的影响之一。例如，在银行应用程序中，您可能在不同的数据库中得到不同的帐户余额值，这可能导致重大的财务影响。</li><li><strong>2. 服务中断</strong>:如果服务器没有正确同步，依赖于数据库的服务可能面临性能问题甚至完全失败。这可能会破坏应用程序的可用性，并导致糟糕的用户体验。</li><li><strong>3. 数据损坏</strong>:在最坏的情况下，同步失败甚至可能导致数据损坏。例如，如果两个用户同时修改相同的数据，但这些修改没有正确同步，就会发生这种情况。</li></ul><p>了解同步失败的症状与了解同步失败的后果同样重要。症状可能包括日志中的错误或异常数量增加、性能突然下降，或者在比较主数据库和辅助数据库时数据不一致。</p><p>缓解策略通常首先通过定期检查数据库运行状况或配置与复制失败相关的特定错误代码警报来检测故障。一旦检测到，需要快速响应以诊断问题的原因并采取纠正措施。</p><p>这些纠正操作的性质将取决于特定的问题和数据库的配置，可以是简单的数据库重启，也可以是更剧烈的完全数据重新同步，甚至可以是故障转移到不同的服务器。</p><p>现在，我们知道预防问题比解决问题更好。这就引出了我们的下一个主题，即首先防止同步故障发生的最佳实践。</p><h1 id="主题-1-5-防止同步失败"><a href="#主题-1-5-防止同步失败" class="headerlink" title="主题:1.5 防止同步失败"></a><strong>主题</strong>:1.5 防止同步失败</h1><hr><p>防止MySQL数据库同步失败需要仔细规划、监控和应用最佳实践，以确保数据的一致性。以下是实现这一目标的一些重要步骤:</p><ul><li><strong>1.定期监视</strong>:定期监视数据库的运行状况和性能。这包括监视复制的状态、检查状态和错误日志，以及为各种复制事件设置警报。</li><li><strong>2.使用可靠的网络</strong>:网络故障可能导致重大的同步问题。因此，请确保主服务器和辅助服务器通过可靠的网络连接。考虑使用冗余网络路径来提高可用性。</li><li><strong>3.应用程序中彻底的错误处理</strong>:您的应用程序还应该配备良好的设备来处理错误，包括来自数据库的错误。彻底的错误处理可以防止由于应用程序错误而导致同步失败的实例。</li><li><strong>4.使用gtid</strong>:正如我们前面所讨论的，全局事务标识符(Global Transaction Identifiers, gtid)在防止同步失败方面非常方便，因为它们提供了一种一致的方式来跟踪所有服务器上的每个复制事件。</li><li><strong>5.定期备份</strong>:定期备份您的数据库。备份是在发生灾难性故障时的最后一道防线。此外，通过在单独的环境中恢复备份来验证备份，以确保它们是好的。</li><li><strong>6.测试故障转移场景</strong>:在受控条件下定期测试故障转移场景，以了解在实际故障转移场景中可能出现的潜在问题。这有助于在实际中断发生时最小化RTO(恢复时间目标)。</li><li><strong>7.使用半同步复制</strong>:正如我们在前几课中所讨论的，半同步复制还可以帮助防止“提交成功不一致”。在这种方法中，主服务器等待，直到至少一个辅助服务器接收到更改并将其记录到其中继日志中。</li><li><strong>8.保留Binlogs直到所有副本都处理完它们</strong>:这可以防止主系统崩溃，然后在复制流的较早点提升备份主系统的问题。</li></ul><p>通过应用这些策略，您可以大大减少在MySQL环境中遇到同步失败的机会。</p><p>在我们的下一个主题中，我们将继续讨论现实世界的场景，以弥合理论与实践之间的差距。</p><h1 id="主题-1-6-同步失败案例分析"><a href="#主题-1-6-同步失败案例分析" class="headerlink" title="主题:1.6 同步失败案例分析"></a>主题:1.6 同步失败案例分析</h1><hr><p>为了更好地理解同步失败在现实场景中是如何发生的，让我们使用一个反映实践中可能面临的问题的假设案例:</p><p>假设我们有一家科技初创公司，它的移动应用拥有快速增长的用户基础。该公司使用主-从MySQL设置来管理其用户数据。有一天，他们发布了一个新特性，由于用户操作的增加，导致数据库写入量激增。</p><p>尽管考虑到应用的成功，这是一个令人高兴的问题，但它导致了一个意想不到的问题:辅助服务器开始落后于主服务器。随着用户操作的增加，辅助服务器处理来自主服务器的二进制日志的延迟导致了这种延迟。这被称为复制延迟。</p><p>这是同步MySQL设置中的一个常见问题。在这种情况下，故障不是突然崩溃，而是不断增长的延迟，这通常很难立即检测到。用户开始注意到应用程序体验中的不一致。例如，用户可能删除了一个帖子，但仍然在他们的提要中看到它，因为指向延迟的辅助服务器的读取操作仍然在那里找到了该帖子。</p><p>该公司最终通过监控系统发现了这个问题，注意到复制延迟不断增加，并立即采取了行动。他们的答复包括:</p><ul><li><strong>扩展他们的数据库设置</strong>:他们增加了更多的辅助服务器，并优化了这些服务器之间的读操作分布，以更好地处理负载。</li><li><strong>缓冲写</strong>:他们为非关键的写操作实现了队列系统，从而减少了数据库的即时负载。</li><li><strong>优化他们的应用程序操作</strong>:他们发现许多并发读写操作是不必要的，并重新设计了他们的应用程序逻辑来减少这些。</li></ul><p>通过这种情况，该公司认识到积极监控数据库设置的健康状况、预测扩展需求和优化应用程序操作以减少不必要的数据库负载的重要性。</p><p>在此场景中面临的问题以及为纠正这些问题所采取的步骤是许多实际应用程序的典型问题。从这个案例研究中，我们看到了我们在前几课中谈到的预防和缓解措施的重要性。</p><p>在下一节课中，我们将重温和复习我们在课堂上学到的关键概念，通过一些实际作业来加强它们，并通过一些评估来评估你的理解。</p><h1 id="主题-1-7-审查和评估"><a href="#主题-1-7-审查和评估" class="headerlink" title="主题:1.7 审查和评估"></a><strong>主题</strong>:1.7 审查和评估</h1><hr><h2 id="审查"><a href="#审查" class="headerlink" title="审查"></a>审查</h2><p>让我们回顾一下我们在整个课程中涵盖的关键概念:</p><ol><li>数据库同步:我们首先了解数据库同步的需求、它的好处和潜在的挑战。这个概念对于维护跨多个数据库实例的数据一致性至关重要。</li><li>主/辅助架构:我们探讨了MySQL中常用的主/辅助架构。此设置允许将数据从主服务器复制到一个或多个辅助服务器。</li><li>MySQL中的同步机制:我们深入研究了MySQL用于实现同步的机制，包括二进制日志记录和复制。</li><li>同步失败的后果:我们讨论了同步失败的潜在影响，从数据不一致到服务中断，甚至数据损坏。</li><li>防止同步故障:我们了解了防止这些故障的各种策略和最佳实践，例如定期监视、gtid和可靠的网络连接。</li><li>同步故障案例研究:我们研究了一个真实的场景，以了解此类故障是如何发生的，以及处理它们的步骤。</li></ol><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>现在，让我们用一些问题来测试你的理解:</p><ol><li>为什么在数据库系统中需要同步?具体来说，在小学/中学的设置中?</li><li>MySQL实现同步的关键机制是什么?</li><li>同步失败的潜在后果是什么?</li><li>描述一些防止MySQL数据库同步失败的策略。</li><li>在我们讨论的案例研究中，公司是如何发现这个问题的?他们是如何应对这种情况的?</li></ol><p>请慢慢回答这些问题。你对这些概念的理解比速度更重要。</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ul><li>**1. 为什么在数据库系统中需要同步?具体来说，在主/备的设置中?**。</li></ul><p>在数据库系统中，同步对于确保跨多个数据库实例的数据一致性至关重要。在主/辅助设置中，它允许将数据从主服务器复制到一个或多个辅助服务器，以提高性能并提供可靠的冗余数据存储。</p><ul><li>**2. MySQL实现同步的关键机制是什么?**。</li></ul><p>MySQL通过二进制日志记录和相关的复制技术实现同步。主服务器生成所有数据更改的二进制日志。辅助服务器获取此日志并应用更改，从而实现与主服务器的同步。</p><ul><li>**3. 同步失败的潜在后果是什么?**。</li></ul><p>其后果可能包括跨服务器的数据不一致、服务中断，在严重的情况下还可能导致数据损坏。这可能导致系统不可靠，并对用户体验产生负面影响。</p><ul><li>**4. 描述一些防止MySQL数据库同步失败的策略</li></ul><p>预防性策略包括定期监视数据库运行状况和性能、使用可靠的网络连接、在应用程序中进行彻底的错误处理、使用全局事务标识符(Global Transaction Identifiers, gtid)、执行定期备份、测试故障转移场景、半同步复制，以及确保保留二进制日志，直到所有副本都处理完它们。</p><ul><li><strong>5. 在我们讨论的案例研究中，公司是如何发现这个问题的?他们是如何应对这种情况的?</strong></li></ul><p>该公司通过监控系统发现了这个问题，注意到复制延迟的增加。他们的回应包括通过增加更多的辅助服务器来扩展数据库设置，实现一个队列系统来缓冲写并减少数据库上的即时负载，以及优化他们的应用程序操作以减少不必要的数据库负载。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview1/">https://programmerscareer.com/mysql-interview1/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;让我们构建MySQL的主/从同步机制课程，并了解如果同步失败会发生什么&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试：简述 MySQL 的间隙锁</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview10/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview10/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>你曾在面试中被要求类似的问题吗？或者将来会遇到，让我们一起探索和掌握它。</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：深入探讨-MySQL"><a href="#主题：深入探讨-MySQL" class="headerlink" title="主题：深入探讨 MySQL"></a><strong>主题</strong>：深入探讨 MySQL</h1><p>MySQL 是一个广泛使用的、开源的关系数据库管理系统 (RDBMS)。它使用关系数据库和结构化查询语言 (SQL) 来管理其数据。“My” 在 MySQL 中是 Michael Widenius 的女儿 My 的名字的缩写。</p><p>MySQL 数据库是一个稳定、可靠和强大的解决方案，具有高级特性，例如：</p><ul><li>坚实事务支持</li><li>复制和故障转移集群支持</li><li>工作流控制和计划任务</li><li>查询缓存</li><li>高级复制技术</li></ul><p>这使 MySQL 成为应用要求完整数据保护和实时分析的优秀选择，例如财务、银行、电子商务、CRM、ERP 应用等等。</p><p>接下来，让我们开始从理论上了解数据库。为了简单起见，让我们想象数据库是一个大的数字文件柜，满载的文件夹。文件夹代表表。在每个表中，包含真实数据，表示记录。每条记录包含有关单个实体的信息。</p><p>例如，如果你是一个商业主人，你可能有一个数据库，其中包含一个客户表和一个订单表等等。每行在客户表中代表一个单独的客户，每行在订单表中代表一个单独的订单。</p><h1 id="主题：探讨-MySQL-事务"><a href="#主题：探讨-MySQL-事务" class="headerlink" title="主题：探讨 MySQL 事务"></a><strong>主题</strong>：探讨 MySQL 事务</h1><p>事务是数据库系统的基本概念。在 MySQL 中，事务是一组 SQL 语句的执行单元。事务遵循 ACID 模型，即原子性、一致性、隔离性和持久性。这个模型确保了数据库事务的可靠性。</p><p>例如，如果你在转账时从一个银行账户转移资金，这需要多个操作，例如从一个账户扣除资金并将其转移到另一个账户。在这种情况下，事务确保这些操作（信用和贷方）全部发生或不发生，确保数据一致性。</p><p>我们的下一步是学习 MySQL 中的锁定机制，这与事务密切相关。在数据库的上下文中，锁是与记录相关的标志。这个标志可以控制记录是否可以被读取或写入。</p><p>它是锁定使多名用户同时访问数据库时不发生冲突的关键。当记录或表被锁定时，这意味着某个事务正在访问数据，并且不应中断。</p><p>中文翻译:</p><h1 id="主题：MySQL中锁定的介绍"><a href="#主题：MySQL中锁定的介绍" class="headerlink" title="主题：MySQL中锁定的介绍"></a><strong>主题</strong>：MySQL中锁定的介绍</h1><p>在数据库领域，“锁定”是一个重要的特性，它确保并发数据访问的一致性和顺序。在 MySQL 中，InnoDB 存储引擎支持多种类型的锁定在不同的级别上，以确保事务不会相互干扰。</p><p>锁定特别重要在多个事务试图访问和操作同一块数据时。当一个事务锁定某块数据时，它阻止其他事务进行冲突的更改，直到锁定被释放。</p><p>MySQL 中有两种主要类型的锁定：</p><ol><li>**共享锁 (S)**：这是一个只读锁定。多个共享锁可以同时保持对同一块数据，只要没有排他锁。</li><li>**排他锁 (X)**：排他锁是一个写锁定。当一个事务持有排他锁时，其他事务不能读取或写入该数据，直到锁定被释放。</li></ol><p>在 MySQL 中，锁定可以发生在三个级别上：</p><ul><li><strong>行级锁定</strong>：这些锁定被放在数据行上。这是锁定的最细粒度，并允许最高的并发性。</li><li><strong>页级锁定</strong>：这些锁定被放在数据页上。页级锁定比行级锁定更粗糙，并提供中等的并发性。</li><li><strong>表级锁定</strong>：这些锁定被放在整个表上。这是锁定的最粗糙的，并提供最低的并发性。通常，在高并发环境中，我们希望避免表级锁定，因为它们可能会成为瓶。</li></ul><p>了解这些基本锁定的概念后，我们可以深入研究 MySQL 中的更复杂的锁定类型，例如间隙锁。</p><h1 id="主题：行锁和表锁在-MySQL-中"><a href="#主题：行锁和表锁在-MySQL-中" class="headerlink" title="主题：行锁和表锁在 MySQL 中"></a><strong>主题</strong>：行锁和表锁在 MySQL 中</h1><p>为了保证数据一致性并允许最高的并发性，MySQL 使用两种类型的锁定：行级锁定和表级锁定。每种类型都有自己的地方和目的。</p><p><strong>行级锁定</strong></p><p>行级锁定更细粒度，在更新特定行的表时使用。这意味着只锁定涉及操作的行，并不锁定整个表。这允许更高的并发性，其中多个事务可以同时访问不同行的同一表。</p><p>InnoDB 支持行级锁定。它会自动设置锁定在读和写操作时，但它不会锁定整个表。</p><p><strong>例子</strong>：如果您正在更新特定记录的员工表，例如，如果使用这种锁定机制，则只会阻止试图修改该特定员工记录的事务。其他员工记录的任务可以继续进行。</p><p><strong>表级锁定</strong></p><p>表级锁定更粗糙。它锁定整个表在特定数据库操作时。通常，MySQL 在写操作时应用这种锁定。</p><p>虽然这种锁定允许简单的管理和更少的内存使用，但在高并发使用情况下，其并发性较低，因为多个事务需要同时访问同一表。</p><p>通过了解这两种类型的锁定，您已经一步 closer 了解了数据库操作的内部工作原理，并且在深入研究更复杂的锁定类型，例如间隙锁，时间戳锁定等方面有所帮助。</p><p>中文翻译:</p><h1 id="主题：讨论-MySQL-中的间隙锁"><a href="#主题：讨论-MySQL-中的间隙锁" class="headerlink" title="主题：讨论 MySQL 中的间隙锁"></a><strong>主题</strong>：讨论 MySQL 中的间隙锁</h1><p>间隙锁是 MySQL 中一个重要的机制，用于防止幻行。幻行是一种行，它满足 WHERE 子句的条件，但是在事务中未被初始查看或更新。</p><p>让我们考虑一种情况，其中我们有一个事务，它选择了特定范围内的行，并且后面要更新这些行。在这个操作期间，另一个事务插入了新行到该范围，创造了我们所称为的“幻行”。如果没有间隙锁，第一个事务不会意识到新行被第二个事务添加，并可能导致数据不一致。</p><p>这就是间隙锁的作用！</p><p>间隙锁是锁定索引记录之间的间隙。更具体地说，它是锁定索引记录的范围。在 MySQL 中，间隙锁防止其他事务在间隙被锁定的事务提供可重复读时插入新行。</p><p>例如，假设您有一个索引列，并且运行了以下语句在 REPEATABLE READ 隔离级别下：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name WHERE index_column &gt; 100 FOR UPDATE;</span><br></pre></td></tr></tbody></table></figure><p>MySQL 会为所有索引记录上锁，其中 <code>index_column</code> 的值大于 100，并为其后的间隙上锁。</p><p>请记，然而，间隙锁是双刃剑！虽然它可以确保一致性，但它也可能会引入锁等待或甚至死锁，如果不正确地管理。</p><h1 id="主题：间隙锁的例子场景"><a href="#主题：间隙锁的例子场景" class="headerlink" title="主题：间隙锁的例子场景"></a><strong>主题</strong>：间隙锁的例子场景</h1><p>要更好地理解间隙锁，让我们考虑一个例子场景。假设我们有一个表 <code>orders</code>，它有许多行。</p><p>场景 1:<br>例如，考虑以下 SQL 语句，</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE id &gt; 3 FOR UPDATE;</span><br></pre></td></tr></tbody></table></figure><p>在这个查询中的事务中，MySQL 会为所有记录上锁，其中 <code>id</code> 的值大于 3。这意味着另一事务不能在 <code>orders</code> 表中插入任何新记录，其中 <code>id</code> 的值大于 3，直到第一事务完成。</p><p>场景 2:<br>现在考虑另一个 SQL 语句，</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO orders (id, item) VALUES (102, 'New_Item');</span><br></pre></td></tr></tbody></table></figure><p>如果我们试图在先前事务（带有 SELECT … FOR UPDATE 语句）仍然处于活动状态时执行此语句，它将被阻止，直到第一事务完成。这是由第一事务所应用的间隙锁所导致的，它不允许任何新记录的插入，其中 <code>id</code> 的值大于 3。</p><p>这些例子场景说明了间隙锁如何控制并发事务，确保数据状态的一致性并消除幻读在某些事务隔离级别，例如 REPEATABLE READ 或 SERIALIZABLE 中。</p><p>现在，我们可以深入研究 MySQL 中锁定的更复杂的细节。</p><h1 id="主题：通过锁的迷宫"><a href="#主题：通过锁的迷宫" class="headerlink" title="主题：通过锁的迷宫"></a><strong>主题</strong>：通过锁的迷宫</h1><p>在 MySQL 中，锁形成了一个复杂的迷宫，每个锁都有重要的作用，但如果不处理正确，可能会导致延迟或死锁。</p><p>下面是锁之间的简单交互方式：</p><ol><li><strong>共享锁和排他锁</strong>：</li></ol><ul><li>共享锁允许其他事务读取（共享锁）锁定的对象，但不允许写入（排他锁）。</li><li>排他锁阻止其他事务读取/写入锁定的对象。</li><li>可以应用额外的共享锁到已锁定的对象上，但请求排他锁将等待。</li></ul><ol><li><strong>表锁和行锁</strong>：</li></ol><ul><li>表锁简单明了，但提供了更低的并发性，可能会导致事务延迟。</li><li>行锁提供更高的并发性，因为它们只锁定特定行在表中。</li></ul><ol><li><strong>Gap 锁和 Next-Key 锁</strong>：</li></ol><ul><li>Gap 锁阻止插入到特定范围内的索引记录。它们与行锁（或 Next-Key 锁）配合起来防止 REPEATABLE READ 或 SERIALIZABLE 隔离级别中的幻读。</li></ul><ol><li><strong>意向锁</strong>：</li></ol><ul><li>意向锁表明事务计划要获取的锁（共享或排他）之前就已经获取了它。它们是通知机制，不是控制机制。</li></ul><ol><li><strong>自增锁</strong>：</li></ol><ul><li>自增锁用于维护自增值的序列。它们避免了多个事务同时尝试插入到自增列中的冲突。</li></ul><p>成功地通过这个迷宫需要对每种锁类型和事务之间的影响有清晰的理解。</p><h1 id="主题：复习和评估"><a href="#主题：复习和评估" class="headerlink" title="主题：复习和评估"></a><strong>主题</strong>：复习和评估</h1><p>在过去的课程中，我们深入探讨了 MySQL 和其锁机制。让我们回顾一下这些主题，以确保良好的理解：</p><ol><li><strong>深入了解 MySQL</strong>：我们开始时，了解了 MySQL 的界面、命令和与其他 SQL 实现的差异，为学习过程奠定了坚实的基础。</li><li><strong>探索 MySQL 事务</strong>：我们深入探讨了 MySQL 事务的核心概念，讨论了其一致性和隔离级别，确保数据的准确性和并发性。</li><li><strong>了解 MySQL 锁</strong>：我们介绍了 MySQL 锁的概念，这是维护数据完整性和并发控制的关键。</li><li><strong>行锁和表锁</strong>：我们探讨了行级锁和表级锁，并讨论了它们在 MySQL 中的重要性。</li><li><strong>讨论 MySQL 的Gap 锁</strong>：我们深入探讨了 gap 锁，包括它是什么、它是如何工作的和它在 REPEATABLE READ 或 SERIALIZABLE 隔离级别中的重要性。</li><li><strong>Gap 锁的示例场景</strong>：我们步行了常见的场景，以了解 gap 锁的实际应用。</li><li><strong>通过锁的迷宫</strong>：我们讨论了 MySQL 中锁之间的交互和影响，这是一个复杂但有趣的主题。</li></ol><h2 id="例子问题："><a href="#例子问题：" class="headerlink" title="例子问题："></a>例子问题：</h2><p>考虑一种高流量数据库，您经常遇到死锁。您的任务是识别一个可能的解决方案来最小化这些发生的可能性。</p><p><strong>解决方案</strong>：可能的解决方案包括缩短事务时间、确保事务访问表的相同顺序或者增加 innodb_lock_wait_timeout 值。还可以确保使用最具体的锁来帮助减少死锁的可能性。</p><p>中文翻译：</p><h2 id="简单问题："><a href="#简单问题：" class="headerlink" title="简单问题："></a>简单问题：</h2><p>考虑一个事务，它读取和写入表中的多条记录。要确保高流量数据库中的最小阻塞，应该使用哪种锁（行级锁、表级锁或Gap锁），并且避免幻读？</p><h2 id="进阶问题："><a href="#进阶问题：" class="headerlink" title="进阶问题："></a>进阶问题：</h2><p>在票务预订系统中，可能会有多个并发事务试图同时预订同一座位。如何使用 MySQL 的锁机制来确保公平的系统？</p><h2 id="专家问题："><a href="#专家问题：" class="headerlink" title="专家问题："></a>专家问题：</h2><p>在 MySQL 的上下文中，如何处理银行应用中的死锁场景，其中两个事务同时尝试转移两个账户之间的资金？</p><h2 id="简单问题解决方案："><a href="#简单问题解决方案：" class="headerlink" title="简单问题解决方案："></a>简单问题解决方案：</h2><p>对于这种场景，使用行级锁机制将是最有效的。它会提供所需的锁定来确保数据完整性，同时避免高流量情况下不相关行的不必要阻塞。此外，包含“FOR UPDATE”子句在 SELECT 语句中可能会避免幻读。</p><h2 id="进阶问题解决方案："><a href="#进阶问题解决方案：" class="headerlink" title="进阶问题解决方案："></a>进阶问题解决方案：</h2><p>在票务预订系统中，要确保公平的系统，我们可以使用 SELECT FOR UPDATE 命令。这会为所遇到的所有索引记录放置排他的 Next-Key 锁，从而防止其他事务在覆盖的记录锁下插入新行。它还会选择座位的当前状态，并如果它可用，则更新其为已预订，确保座位不会被双预订。</p><h2 id="专家问题解决方案："><a href="#专家问题解决方案：" class="headerlink" title="专家问题解决方案："></a>专家问题解决方案：</h2><p>在银行应用中，如果两个事务同时尝试转移两个账户之间的资金，我们可能会遇到死锁场景。要处理这种情况，我们可以使用访问帐户的固定顺序。例如，事务可能会先访问具有较低 ID 的帐户。这将防止死锁，因为两个事务不会无限期地等待对方，消除了死锁的循环等待条件。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview10/">https://programmerscareer.com/mysql-interview10/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;你曾在面试中被要求类似的问题吗？或者将来会遇到，让我们一起探索和掌握它。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试：唯一索引与普通索引的区别是什么？使用索引会有哪些优缺点？</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview11/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview11/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>让我们深入探讨 MySQL 中的“唯一索引”和 “普通索引”的评论和评估。</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：了解-MySQL-中的索引"><a href="#主题：了解-MySQL-中的索引" class="headerlink" title="主题：了解 MySQL 中的索引"></a><strong>主题</strong>：了解 MySQL 中的索引</h1><p>在任何关系数据库管理系统中，如 MySQL，数据的高效访问是关键方面之一，特别是在处理大量数据时。我们所关心的效率是系统如何快速地定位并检索所需的数据。这就是 <strong>索引</strong> 发挥作用的地方。</p><p>你可以将索引比作书的索引。假设你想找到某个特定主题。你有两种选择：</p><ol><li>你可以逐页扫描，直到找到主题。</li><li>你可以去索引，找到主题的页码，然后直接翻到那一页。</li></ol><p>后者更快，是不是？在数据库世界中，逐页扫描被称为 <strong>全表扫描</strong>。如果你有 millions 行，这可能会花费很长时间。但是如果你有一个索引，MySQL 可以使用它来更快地定位数据——就像你使用书的索引来找到主题一样。</p><p>索引创建一个条目，并因此可以更快地检索数据。请记，然而，虽然索引加快了查询，但它们可能会慢下来写操作（INSERT、UPDATE、DELETE）的速度，因为每次写操作都要更新索引。因此，我们需要维持平衡并只在经常搜索的列上使用索引。</p><h1 id="主题：MySQL-中的普通索引"><a href="#主题：MySQL-中的普通索引" class="headerlink" title="主题：MySQL 中的普通索引"></a><strong>主题</strong>：MySQL 中的普通索引</h1><p>现在我们对索引有了良好的理解并了解了它在 MySQL 中的角色，让我们来深入探讨一种特定的索引类型，即 <strong>普通索引</strong>（也称为 <strong>非唯一索引</strong>）。</p><p>普通索引（Non-unique Index）允许你通过数据库表的一个或多个列来加速查询过程。与唯一索引不同，普通索引不会对值的唯一性进行约束。换句话说，普通索引允许在索引列上重复的值。</p><p>例如，假设我们有一个 <code>Students</code> 表，其中包含列 <code>ID</code>、<code>Name</code>、<code>Age</code> 和 <code>Address</code>。当我们正在查询数据时，我们通常使用 <code>WHERE</code> 子句来过滤数据。例如：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`SELECT * FROM Students WHERE Age = 20`</span><br></pre></td></tr></tbody></table></figure><p>在没有索引的情况下，MySQL 将需要浏览 <code>Students</code> 表的每一行，以找到 <code>Age</code> 等于 20 的行。这可能会耗时且不高效。如果我们为 <code>Age</code> 列创建一个普通索引，MySQL 可以使用这个索引来快速定位相关的行。</p><p>在 MySQL 中创建一个普通索引非常简单，你可以使用 <code>CREATE INDEX</code> 命令，然后提供索引的名称、表和列。</p><p>下面是如何在 <code>Students</code> 表上为 <code>Age</code> 列创建一个普通索引的例子：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX age_index ON Students (Age);</span><br></pre></td></tr></tbody></table></figure><p>请记，虽然普通索引可能会加快读操作，但它们也会占用存储空间并可能会慢下来写操作（INSERT、UPDATE、DELETE），因为它们需要更新每次写操作时。因此，它们应该被谨慎和策略地使用。</p><h1 id="主题：MySQL中的唯一索引"><a href="#主题：MySQL中的唯一索引" class="headerlink" title="主题：MySQL中的唯一索引"></a><strong>主题</strong>：MySQL中的唯一索引</h1><p>我们已经有了关于正常索引的深入了解，现在是时候讨论MySQL中的<strong>唯一索引</strong>了。</p><p>唯一索引是一种索引，它强制约束，要求所有值在索引中都不相同。这意味着，唯一索引不允许在索引所在的列（或列组合）上出现重复值，使它们非常有用，当你想要防止某些字段的重复时。</p><p>例如，考虑一个名为Users 的表，其中每个用户都有一个唯一的电子邮件地址。在这种情况下，在电子邮件列上创建一个唯一索引将确保两个用户不能具有相同的电子邮件地址。</p><p>创建唯一索引的语法与创建正常索引的语法略有差异：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_name);</span><br></pre></td></tr></tbody></table></figure><p>请替换 <code>index_name</code> 为您希望为索引命名的名称，<code>table_name</code> 为要在其上创建索引的表的名称，并将 <code>column_name</code> 替换为要在其上创建索引的列的名称。</p><p>例如，要在 Users 表上创建一个唯一索引，您可以使用以下语法：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX email_index ON Users (Email);</span><br></pre></td></tr></tbody></table></figure><p>每次在 Users 表中插入或更新一个电子邮件时，MySQL都会检查唯一索引，并如果发现另一行具有相同的电子邮件值，就不会允许更改。</p><p>请记住，唯一索引不仅可以帮助保持数据完整性，还可以帮助提高数据检索操作的性能。</p><h1 id="主题：正常索引与唯一索引的差异"><a href="#主题：正常索引与唯一索引的差异" class="headerlink" title="主题：正常索引与唯一索引的差异"></a><strong>主题</strong>：正常索引与唯一索引的差异</h1><p>我们已经详细讨论了数据库中的索引，并讨论了两种特定类型的索引：<strong>正常索引</strong>（或非唯一索引）和<strong>唯一索引</strong>。 两者都有不同的角色，了解差异是至关重要的。</p><ol><li><strong>唯一性</strong>：根据名称本身就可以看出差异——正常索引在列或列组合上允许重复值。 相反，唯一索引不允许插入具有重复索引列值的新行。</li><li><strong>用途</strong>：正常索引主要用于提高MySQL的操作效率。 唯一索引，然而，具有双重目的。 它们可以同时提高操作效率并维护数据一致性，因为它们会拒绝具有重复值的新行。</li><li><strong>约束</strong>：当您在具有唯一索引的表中插入一行时，MySQL先检查是否会违反唯一性约束。 如果是这样，MySQL就会拒绝更改并发出错误。 与正常索引相比，MySQL不会执行这些检查。</li></ol><p>了解何时使用哪种类型的索引是至关重要的。 当您想要加速大型数据集上的查询时，正常索引就足够了。 但是，如果您需要确保列中的每个值都是唯一的，则应使用唯一索引，尽管它会消耗更多的资源来强制唯一性约束。</p><h1 id="主题：优化-SQL-查询使用索引"><a href="#主题：优化-SQL-查询使用索引" class="headerlink" title="主题：优化 SQL 查询使用索引"></a><strong>主题</strong>：优化 SQL 查询使用索引</h1><p>使用索引来提高数据库的性能并组织数据是使用 MySQL 索引的主要目标之一。 当正确使用时，索引可以显著加快数据检索操作的速度。 下面是一些提示，可帮助您优化 SQL 查询使用索引：</p><ol><li><strong>索引搜索字段</strong>：这似乎很简单，但值得重复。 如果您经常在表中搜索特定字段，请考虑索引该字段。 这可能会大大提高数据库的性能。</li><li><strong>考虑索引大小</strong>：索引的数据量越小，速度越快。 因此，具有较小数据类型的索引列通常会更快。 例如，INT 比 VARCHAR 更快，VARCHAR 比 TEXT 更快。</li><li><strong>限制写操作上的索引</strong>：索引可能会慢下写操作（例如 INSERT、UPDATE 和 DELETE 语句），因为每次修改数据时，索引也需要更新。 如果表经常更新，请考虑减少索引的数量。</li><li><strong>复合索引</strong>：它们由多个列组成，并可以加速在 WHERE 子句中过滤多列时的数据检索。 注意，它们按左侧前缀的顺序工作。 这意味着索引列的顺序很重要。</li><li><strong>使用 EXPLAIN 计划</strong>：MySQL 的 EXPLAIN 语句可以显示 MySQL 优化器如何执行您的查询，帮助您了解数据库是否能使用索引，并允许您进一步优化您的查询。</li></ol><p>这就完成了关于如何优化 SQL 查询使用索引的课程。</p><h1 id="主题：索引的常见陷阱"><a href="#主题：索引的常见陷阱" class="headerlink" title="主题：索引的常见陷阱"></a><strong>主题</strong>：索引的常见陷阱</h1><p>MySQL 中的索引是强大的工具，可以显著加快查询的速度。 然而，您应该注意以下几点，在使用它们时要小心。</p><ol><li><strong>过多的索引</strong>：有过多的索引可能会反效果。 每个索引都会增加 MySQL 更新和管理这些索引所花费的时间。 这可能会慢下写操作。 因此，要确保只有必要的索引。</li><li><strong>不了解卡尔数</strong>：卡尔数是索引中的唯一值数量。 如果卡尔数低（意味着有许多重复值），索引可能不会非常有效。 您应该关注索引的卡尔数并考虑是否应该使用另一列作为索引。</li><li><strong>索引错误的列</strong>：索引应该基于经常搜索或排序的列。 索引错误的列可能会导致不高效的查询。</li><li><strong>忽略查询执行计划</strong>：MySQL 的 EXPLAIN 语句可以提供有价值的信息，帮助您了解如何执行您的查询并识别使用的索引。 忽略这些信息可能会导致不高效的索引或优化的机会被错过。</li><li><strong>使用大 VARCHAR 或 TEXT 索引</strong>：大 VARCHAR 或 TEXT 列的索引可能会消耗大量内存并慢下查询。 在这种情况下，索引前缀（<code>INDEX(column(10))</code>)可能会有用。</li></ol><p>记住，有效的索引的秘诀在于了解数据并了解应用如何查询它。 有适当数量的良好选择的索引可以使数据库的性能显著提高。</p><h1 id="主题：回顾和评估"><a href="#主题：回顾和评估" class="headerlink" title="主题：回顾和评估"></a><strong>主题</strong>：回顾和评估</h1><p>我们已经学习了 MySQL 索引的许多内容，包括它们是什么、它们的类型（普通和唯一索引）、它们是如何用于查询优化的、以及一些常见的误解和陷阱。</p><p>现在是时候进行快速评估了。这将帮助强化你的学习并帮助突出任何我们可能需要重新访问的地方。</p><p><strong>例题</strong>：</p><p>为了测试你的理解，让我们通过一个例题来进行。</p><p>我们有一个名为 students 的 MySQL 数据库表，其结构如下：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| id (INT) | name (VARCHAR) | class (VARCHAR) | age (INT) |</span><br></pre></td></tr></tbody></table></figure><p>你经常需要查找来自特定 class 的学生。如何优化这个查询？</p><p><strong>解决方案</strong>：</p><p>为了优化这个查询，我们可以为 class 列添加一个索引。由于我们经常搜索这个字段，为其添加索引可以显著增加查询的性能。</p><p>下面是创建索引的 SQL 语句：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_students_class ON students (class);</span><br></pre></td></tr></tbody></table></figure><p>现在，让我们测试你的理解：</p><ol><li><strong>简单问题</strong>（难度：3/10）：要为 age 列添加索引，你将使用哪个 SQL 语句？</li></ol><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_students_age ON students(age);</span><br></pre></td></tr></tbody></table></figure><ol><li><strong>复杂熟问题</strong>（难度：6/10）：在添加索引之前，你应该考虑哪些因素？</li></ol><ul><li>列的卡尔伴：高卡尔伴列（具有许多独特值的列）最适合索引化。</li><li>应用程序的读写比率：如果应用程序执行更多的读操作，索引化是有益的。但是，如果应用程序执行更多的写操作（插入、更新、删除），索引的维护成本可能会超过好处。</li><li>列的数据类型：索引小数据类型列的速度更快。</li></ul><ol><li><strong>复杂未知问题</strong>（难度：9/10）：数据库表 students 还有一个名为 registration_date 的列（日期类型），并且你正在运行查询来找到注册于特定年份的学生。你可以使用哪种索引来优化这个查询，并且怎样创建它？</li></ol><p>在这种情况下，你可以创建一个函数或表达式的索引，在 MySQL 8.0 或更高版本中称为函数索引。</p><p>要在 MySQL 8.0 或更高版本中创建函数索引，可以使用以下语句：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_students_registration_year ON students((YEAR(registration_date));</span><br></pre></td></tr></tbody></table></figure><p>这样，MySQL 就可以直接将年份映射到索引中的行，从而加快查询的速度。</p><p>请注意，在 MySQL 8.0 或更高版本中创建函数或表达式索引是受支持的。如果你使用的是早期版本的 MySQL，你将需要添加一个单独的列来存储年份，然后索引该列。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview11/">https://programmerscareer.com/mysql-interview11/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;让我们深入探讨 MySQL 中的“唯一索引”和 “普通索引”的评论和评估。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试：简述脏读和幻读的发生场景，InnoDB 是如何解决幻读的？</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview12/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview12/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>你曾被要求类似问题在面试中吗？或者将来会遇到，让我们一起探索和掌握它。</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：1-1-数据库事务中的问题介绍"><a href="#主题：1-1-数据库事务中的问题介绍" class="headerlink" title="主题：1.1 数据库事务中的问题介绍"></a><strong>主题</strong>：1.1 数据库事务中的问题介绍</h1><p>在深入数据库事务的复杂性时，需要承认这些操作不总是简单的。它们的主要目的是执行一系列操作，使数据库从一个一致的状态变化到另一个一致的状态。然而，同时进行事务时，我们遇到了许多问题，需要解决以维持一致性和完整性。</p><p>其中一个挑战是并发事务的问题。为了维持事务的 <strong>ACID</strong> 属性（原子性、一致性、隔离性和持久性），数据库系统必须正确地处理并发事务的执行。如果未能确保正确管理，可能会导致以下问题：</p><ol><li><strong>脏读</strong>：这种问题发生在一个事务读取另一个事务还未提交的变更时。如果后者事务被回滚，则前者事务读取了一个无效的值。</li><li><strong>不可重复的读取</strong>：这是当一个事务多次读取同一行时，每次读取都会得到不同的数据，因为其他事务正在更新该行同时进行。</li><li><strong>幻读</strong>：这是当一个事务执行两次相同的查询时，第二次结果集包含未在第一次结果集中的行，由另一个事务添加。</li></ol><p>这些事务控制问题会破坏数据库事务的顺畅功能并影响数据完整性。在以下课程中，我们将深入探讨脏读和幻读的场景，并了解解决方案，包括 MySQL InnoDB 引擎提供的解决方案。</p><h1 id="主题：1-2-理解脏读"><a href="#主题：1-2-理解脏读" class="headerlink" title="主题：1.2 理解脏读"></a><strong>主题</strong>：1.2 理解脏读</h1><p>在数据库的上下文中，“脏读”是指一个事务读取另一个事务还未提交的脏数据。例如，事务 1 修改了某行，但尚未提交。现在，在事务 1 提交之前，事务 2 读取了未提交的变更。这就是脏读。</p><p>为什么这是一个问题？ 假设事务 1 最终回滚。在这种情况下，变更被撤销，但事务 2 已经读取了脏数据，导致不一致性并可能导致无效的结果在数据库中。</p><p>下面是一个简单的例子：</p><p><strong>步骤 1：</strong></p><ul><li>事务 1 在 <code>orders</code> 表中修改了 <code>order_status</code> 字段，将其从 ‘Pending’ 更新为 ‘Shipped’。</li></ul><p><strong>步骤 2：</strong></p><ul><li>在事务 1 提交之前，事务 2 读取了 <code>order_status</code> 并发现它是 ‘Shipped’。</li></ul><p><strong>步骤 3：</strong></p><ul><li>事务 1 遇到错误并执行 ROLLBACK 操作，将 <code>order_status</code> 更改回 ‘Pending’。</li></ul><p><strong>步骤 4：</strong></p><ul><li>然而，事务 2 继续进行，并读取 ‘Shipped’ 状态，尽管这从未存在过。</li></ul><p>脏读可能会导致严重的错误，特别是在数据分析或报告过程中，准确性是至关重要的。</p><p>中文翻译:</p><h1 id="主题：1-3-理解幻读"><a href="#主题：1-3-理解幻读" class="headerlink" title="主题：1.3 理解幻读"></a><strong>主题</strong>：1.3 理解幻读</h1><p>像脏读一样，幻读也是数据库事务中的并发问题。幻读通常发生在事务重新查询它已经查询过的数据，但发现新行，这些行在初始读取之后被其他事务插入或更新。</p><p>这些“幻”行是由另一个事务在我们的初始事务开始之后并在其结束之前插入或更新所导致的。</p><p>为了更清楚地理解这一点，让我们考虑一个简单的例子：</p><p><strong>步骤 1：</strong></p><ul><li>事务 1 从 <code>orders</code> 表中检索所有 <code>order_status</code> 为 ‘Pending’ 的行。</li></ul><p><strong>步骤 2：</strong></p><ul><li>在这之间，事务 2 在 <code>orders</code> 表中插入了一个新行，其 <code>order_status</code> 为 ‘Pending’，并提交。</li></ul><p><strong>步骤 3：</strong></p><ul><li>现在，事务 1 再次运行相同的检索查询。这次，它发现事务 2 插入的行——这是一个幻行。</li></ul><p>幻读问题主要发生在较低的隔离级别中，例如“读已提交”，但不是较高的隔离级别，例如“序列化”。这是由于使用排他范围锁来阻止在读范围内插入新行所导致的。</p><p>然而，这些较高的隔离级别也会遇到问题，例如较低的并发和较高的争用。因此，事务隔离级别的选择通常需要权衡性能和一致性之间的交换。但是，不要担心，InnoDB 提供了处理这些情况的方法。</p><h1 id="主题：1-4-InnoDB-在处理幻读方面的作用"><a href="#主题：1-4-InnoDB-在处理幻读方面的作用" class="headerlink" title="主题：1.4 InnoDB 在处理幻读方面的作用"></a><strong>主题</strong>：1.4 InnoDB 在处理幻读方面的作用</h1><p>InnoDB 存储引擎在 MySQL 中起着关键的作用，处理数据库事务问题，包括幻读。它通过使用 <strong>多版本并发控制 (MVCC)</strong> 来允许多个事务同时访问同一行，而不会影响彼此的工作。</p><p>每个事务看到数据库在其工作开始时的一个快照，使并发事务相互隔离。这对 MySQL InnoDB 中的 “I” (一致性) 部分起着重要作用。</p><p>此外，您还可以在 MySQL 中设置不同的隔离级别来自定衡读一致性、并发和性能之间的平衡。这些隔离级别包括 READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</p><p>重复读级别是 InnoDB 的默认级别，它保证了所有在同一事务中的读取都会看到数据库在事务开始时的一个快照。这个特性有效地防止了幻读。</p><p>然而，在某些业务场景中，序列化级别可能是必需的，提供最高的数据一致性，但是以代价较低的并发和性能。</p><p>在本课程的后期，我们将详细讨论 InnoDB 如何实现 ACID 属性并自定化这些事务属性，根据用户需求进行调整。</p><h1 id="主题：1-5事务隔离级别"><a href="#主题：1-5事务隔离级别" class="headerlink" title="主题：1.5事务隔离级别"></a><strong>主题</strong>：1.5事务隔离级别</h1><p>事务隔离级别在数据库管理系统中如何管理并保护事务免受潜在问题（脏读、不可重复读和幻读）的中心角色。</p><p>在 MySQL 中，有四种预设的隔离级别，每种级别具有性能和保护之间的不同权衡：</p><ol><li><strong>读未提交</strong>：这是隔离级别的最低水平，它允许事务看到其他事务未提交的更改。这意味着事务可能会看到“脏”数据，其他事务可能会后悔。</li><li><strong>读已提交</strong>：这个级别保证了任何读取的数据都已提交。因此，它防止脏读。然而，如果事务多次读取同一行，它可能会看到不同的值，如果另一事务修改了该行之间，这可能会导致不可重复读。</li><li><strong>可重复读</strong>：这是 InnoDB 的默认隔离级别。它防止脏读和不可重复读，并确保所有读取的相同行在同一事务内返回相同的结果，除非该行自身被该事务修改。</li><li><strong>序列化</strong>：这是隔离级别的最高水平。它锁定读取的行，防止其他事务（读或写）访问它们，直到第一事务完成。虽然这种级别可以防止脏读、不可重复读和幻读，但它显著降低了并发性。</li></ol><p>了解这些隔离级别是管理并发事务有效的关键。在下一主题中，我们将讨论一些实现并发控制的技术和实践。</p><h1 id="主题：1-6并发控制的策略"><a href="#主题：1-6并发控制的策略" class="headerlink" title="主题：1.6并发控制的策略"></a><strong>主题</strong>：1.6并发控制的策略</h1><p>数据库中的并发控制的目的是允许多个事务同时访问数据库，而不会发生冲突或错误。为了有效地实现并发控制，我们可以利用以下策略：</p><ol><li><strong>锁定基于的协议</strong>：这是一种常见的方法，其中给定事务在需要时为数据项锁定访问。有两种锁：排他锁和共享锁。前者不允许其他事务访问数据项，后者允许，但仅限于读取目的。</li><li><strong>时间戳基于的协议</strong>：这种方法涉及为每个事务分配一个时间戳，确保早期事务具有优先权，特别是在冲突时。</li><li><strong>有效性基于的协议</strong>：也称为乐观并发控制，这种方法允许事务执行无限制并在提交时进行有效性检查。</li><li>**多版本并发控制 (MVCC)**：主要用于 InnoDB，MVCC允许每个与数据库连接的用户从事务开始时看到一致的快照集。</li><li><strong>数据项的粒度</strong>：这决定了锁定的数据项的大小——从单行到整个数据库。</li></ol><p>每种策略都有其优势和劣势。例如，锁定基于的协议可能会创造性能问题由于锁争，而 MVCC可能会为 InnoDB 提供高并发和减少了锁定的需求，但可能会增加存储的成本。</p><p>要选择一种策略，应考虑应用程序的需要和考虑，例如性能、一致性和复杂性。</p><h1 id="主题：1-7-回和评估"><a href="#主题：1-7-回和评估" class="headerlink" title="主题：1.7 回和评估"></a><strong>主题</strong>：1.7 回和评估</h1><p>你已经做得非常好地探索了数据库事务的关键方面，了解了并发控制的概念，它所倾向的问题，并使用各种策略来处理这些问题。</p><p>到目前为止，我们已经了解了并发控制的必要性，即处理同时发生的事务。我们已经识别了潜在的挑战，例如脏读、不可重复读和幻读，这些基本上涉及事务如何处理来自其他事务的数据更改。</p><p>我们深入探讨了脏读是什么，它是如何发生的，以及对数据库事务的影响。同样，我们对幻读发生的情况进行了详细讨论，并讨论了它可能会导致的问题。</p><p>我们研究了 MySQL 中 InnoDB 存储引擎的角色，特别是它是如何实现“一致读取”来处理幻读。</p><p>我们进一步深入探讨了事务隔离级别的概念，了解配置不同的事务隔离级别可以影响脏和幻读的发生。</p><p>我们还讨论了处理并发问题的各种策略，例如事务调度和使用各种类型的锁定基于的协议。</p><p>现在，让我们回一下这些关键概念，通过评估来评估你对脏读、幻读和 InnoDB 解决这些问题的方法的理解。</p><p>好的，让我们来解决三个评估问题。试着解决每一个，然后我会提供答案。</p><h2 id="简单问题（难度：3-10）"><a href="#简单问题（难度：3-10）" class="headerlink" title="简单问题（难度：3/10）"></a>简单问题（难度：3/10）</h2><p>假设同时发生两个事务，事务 1 读取了数据对象，事务 2 后来更新了它。识别这种读取问题可能会发生的。</p><h2 id="复杂熟问题（难度：6-10）"><a href="#复杂熟问题（难度：6-10）" class="headerlink" title="复杂熟问题（难度：6/10）"></a>复杂熟问题（难度：6/10）</h2><p>在数据库事务的上下文中，MySQL 中的 InnoDB 存储引擎是如何处理幻读的？描述一下 ‘一致读取’ 是如何帮助管理这些幻读。</p><h2 id="复杂未熟问题（难度：9-10）"><a href="#复杂未熟问题（难度：9-10）" class="headerlink" title="复杂未熟问题（难度：9/10）"></a>复杂未熟问题（难度：9/10）</h2><p>你是银行系统的数据库管理员。同时发生两个事务，其中一个是客户 ‘A’ 向客户 ‘B’ 转账，另一个是银行计算客户 ‘A’ 的总余额。由于这些事务的并发性，银行余额计算发生在转账事务未完成之前。解释可能会发生的问题。</p><h2 id="简单问题（难度：3-10）-1"><a href="#简单问题（难度：3-10）-1" class="headerlink" title="简单问题（难度：3/10）"></a>简单问题（难度：3/10）</h2><p>这是一个“脏读”的问题。在数据库管理中，脏读是指事务 1（Transaction 1）可以读取数据库中的行，该行已经由另一事务（Transaction 2）修改，但尚未提交。因此，如果 Transaction 2 回滚更改，Transaction 1 将读取被视为不存在的数据。</p><h2 id="复杂熟问题（难度：6-10）-1"><a href="#复杂熟问题（难度：6-10）-1" class="headerlink" title="复杂熟问题（难度：6/10）"></a>复杂熟问题（难度：6/10）</h2><p>InnoDB 存储引擎在 MySQL 中使用了“一致读取”来处理幻读。一致读取是 InnoDB 选择操作使用的非锁定读取，它为提供数据库的一致性快照提供了支持。它通过应用多版本并发控制（MVCC）来实现，其中存储多个版本的记录。这样，用户就可以无锁定延迟浏览数据库。</p><h2 id="复杂未熟问题（难度：9-10）-1"><a href="#复杂未熟问题（难度：9-10）-1" class="headerlink" title="复杂未熟问题（难度：9/10）"></a>复杂未熟问题（难度：9/10）</h2><p>在给定的场景中，可能会发生不可重复读的问题。不可重复读是指事务读取了同一行两次并获取了不同的数据。在这种情况下，银行余额计算事务可能先计算了余额，然后再次读取数据后客户 ‘A’ 转账了金额。因此，第一次和第二次读取会导致不同的客户 ‘A’ 的余额。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview12/">https://programmerscareer.com/mysql-interview12/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;你曾被要求类似问题在面试中吗？或者将来会遇到，让我们一起探索和掌握它。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试：聚簇索引和非聚簇索引有什么区别？</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview13/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview13/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>你曾被提过类似问题在面试中问过吗？或者将来会遇到，让我们一起探索和掌握它！</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题：1-1-聚集索引和非聚集索引的介绍"><a href="#主题：1-1-聚集索引和非聚集索引的介绍" class="headerlink" title="主题：1.1 聚集索引和非聚集索引的介绍"></a><strong>主题</strong>：1.1 聚集索引和非聚集索引的介绍</h1><p>了解数据存储和检索的方式对数据库的性能有着重要的影响。特别是了解 MySQL 是如何使用索引的非常重要。这就是聚集索引和非聚集索引的概念发挥作用的地方。</p><p>索引是数据库的一个重要组成部分。它们是查找表，数据库引擎使用它们来加速数据检索，就像书的索引一样，它可以帮助你快速定位信息，而不必阅读每一页。</p><p>现在，让我们详细地讨论聚集和非聚集索引：</p><p><strong>聚集索引</strong>：</p><p>就像名字所表明的那样，聚集索引决定了表中数据的物理排列顺序。为了更好地理解这一点，请考虑聚集索引是字典。在字典中，单词不是随机排列的，而是按字母顺序排列，这样你就可以快速跳到特定的字母部分并找到单词。在数据库的上下文中，这个“单词”是数据行。MySQL 就是按聚集索引的顺序组织数据行，以加快检索。请注意，表中只能有一个聚集索引。</p><p><strong>非聚集索引</strong>：</p><p>非聚集索引不决定表中数据的物理排列顺序。然而，它们保存了数据的“指针”。为了更好地理解，如果聚集索引是字典，那么非聚集索引就是书的索引。书的索引指向包含信息的页面，但它们本身不包含信息。这意味着数据库引擎必须执行额外的工作，以“去”数据行，与聚集索引相比，非聚集索引的数据检索可能会慢一些。然而，你可以有多个非聚集索引，这可能对数据检索的多种场景有所帮助。</p><h1 id="主题：1-2-聚集索引详解"><a href="#主题：1-2-聚集索引详解" class="headerlink" title="主题：1.2 聚集索引详解"></a><strong>主题</strong>：1.2 聚集索引详解</h1><p>聚集索引与数据的物理存储有关。当你为表创建一个聚集索引时，表中的行按索引键的顺序存储在磁盘上。表中只能有一个聚集索引，并且如果你没有显式定义一个聚集索引，SQL Server 将自动为你创建一个。这被称为堆。</p><p>聚集索引的结构也被称为 B+ 树结构。堆栈树的根节点位于树的顶部，然后分支出多个叶节点位于底部。这些叶节点包含数据行在索引的顺序中。</p><p>主键约束自动创建一个聚集索引，但在某些情况下，你可能希望手动创建一个聚集索引，这取决于你的要求。例如，如果你有一个员工数据表并经常按员工聘用日期进行查询，则可能会为聘用日期列创建一个聚集索引，以加快这些查询。</p><p>此外，在表中具有聚集索引的记录更新时，数据库可能会更慢，这是因为当记录更新在表中具有聚集索引时，数据库可能需要物理移动整行，以维护排序顺序。</p><h1 id="主题：1-3-非聚集索引的介绍"><a href="#主题：1-3-非聚集索引的介绍" class="headerlink" title="主题：1.3 非聚集索引的介绍"></a><strong>主题</strong>：1.3 非聚集索引的介绍</h1><p>现在我们已经对聚集索引有了深入的理解，了解它是如何排列和存储数据的。但是，并不总是想要根据单个聚集索引来检索数据。这就是非聚集索引的作用所在。</p><p>非聚集索引与聚集索引有着明显的区别。首先，创建非聚集索引不会重新排列表中数据的物理顺序。相反，它会创建一个独立的数据库对象，其中包含一个排序的列表，指向表中的数据。</p><p>为了说明这一点，请考虑一本书——相对于浏览整本书以找到特定主题，你通常会转到书的索引，是不是？它会直接将你导向包含指定主题的页面。这种快速导航就是非聚集索引所执行的功能！</p><p>非聚集索引的架构与聚集索引相似——B-树数据结构中的根节点、中间级节点和叶节点。然而，非聚集索引的叶节点仅包含索引列和指向数据表中相应行的指针。你可以为单个表创建多个非聚集索引，每个索引都为特定查询提供了加速。</p><p>在 MySQL 中，非聚集索引就是所有的辅助索引，其中每个索引都包含主键列的副本，用于指向搜索键匹配的行。</p><h1 id="主题：1-4-聚集和非聚集索引的差异"><a href="#主题：1-4-聚集和非聚集索引的差异" class="headerlink" title="主题：1.4 聚集和非聚集索引的差异"></a><strong>主题</strong>：1.4 聚集和非聚集索引的差异</h1><p>现在我们已经对聚集和非聚集索引有了深入的理解，让我们来明确它们之间的主要差异：</p><ol><li><strong>数据的排列顺序</strong>：聚集索引决定了表中数据的物理排列顺序。另一方面，非聚集索引不会改变数据记录的存储方式，但会创建一个数据库对象，该对象指向原始记录。</li><li><strong>索引数量</strong>：表中只能有一个聚集索引，但是可以有多个非聚集索引。请记，越多的索引，就需要越多的磁盘空间。</li><li><strong>数据检索速度</strong>：聚集索引可能会比非聚集索引更快地检索数据，但这并不总是如此。如果非聚集索引覆盖了查询（即，查询的数据可以从索引的叶节点中服务），它可能会更快地检索数据，尽管它需要一些额外的跳转。</li><li><strong>更新性能</strong>：聚集索引可能会降低更新的性能，而非聚集索引通常不会影响性能。</li><li><strong>存储空间</strong>：由于非聚集索引是与表数据分开存储的，因此它需要额外的存储空间。每个非聚集索引是一个独立的磁盘结构，其中包含一个排序的列表，其中包含列值，而聚集索引是表数据本身并形成了索引的最低级别。</li></ol><p>在数据库的大图景中——数据检索速度、存储效率、更新速度等等——所有这些因素都依赖于良好的索引。清楚地了解何时和为什么使用聚集和非聚集索引可以帮助您优化数据库性能。</p><h1 id="主题：1-5-选择正确的索引"><a href="#主题：1-5-选择正确的索引" class="headerlink" title="主题：1.5 选择正确的索引"></a><strong>主题</strong>：1.5 选择正确的索引</h1><p>恭喜！现在我们知道什么是聚集索引和非聚集索引，并了解了它们之间的主要差异，让我们深入探讨选择正确的索引进行性能优化。</p><p>在 MySQL 中选择正确的索引来进行性能优化，主要取决于了解将要执行的查询。它不仅仅是选择聚集或非聚集索引，还包括了列和其卡inality 的理解。</p><p>下面是一些关键点来帮助你决定：</p><ol><li><strong>使用聚集索引来处理宽列查询</strong>：由于聚集索引本身就是表数据，因此对宽列查询来说非常有用，因为它可以减少读取的数量。</li><li><strong>使用非聚集索引来处理特定列查询</strong>：非聚集索引在需要检索较小的列集时非常有用。在这种情况下，为这些列创建非聚集索引可能会有好处。</li><li><strong>高卡inality列</strong>：当列具有高卡inality（每行都是唯一的）时，使用它作为聚集索引可能会导致更快的查找。</li><li><strong>低卡inality列</strong>：对于具有低卡inality（许多行共享相同值）的列，使用非聚集索引通常更有效。</li><li><strong>数据修改操作</strong>：如果应用程序包含频繁的插入、更新和删除操作，非聚集索引可能是更好的选择，因为它们不会影响磁盘上的数据排序。</li><li><strong>空间考虑</strong>：由于非聚集索引是独立的磁盘结构，它们会消耗额外的存储空间。如果存储空间是一个限制，聚集索引可能是更好的选择，虽然在某些情况下，它可能会影响速度。</li></ol><p>记住，最佳策略总是取决于特定的工作负载。它是必要的进行持续的监控和分析，并根据性能进行索引策略的调整。</p><h1 id="主题：1-6-示例和用例"><a href="#主题：1-6-示例和用例" class="headerlink" title="主题：1.6 示例和用例"></a><strong>主题</strong>：1.6 示例和用例</h1><p>好的！你已经做得很好了。为了巩固理解，让我们来看看一些实际的例子和用例。</p><p>开始时，让我们考虑一个基本的例子，假设你直接管理一个在线书店。你有一个名为 <code>Books</code> 的表，其中包含以下列：<code>BookID</code>、<code>Title</code>、<code>Author</code>、<code>Genre</code>、<code>Price</code> 和 <code>PublicationDate</code>。</p><ol><li><strong>使用聚集索引</strong>：假设客户经常根据 <code>BookID</code> 在您的商店中搜索书籍。为了提高这些常见的拉取请求的速度，您可以使用 <code>BookID</code> 列上的聚集索引。由于聚集索引确定数据在表中的物理排序，行查找可能会显著加快。</li><li><strong>使用非聚集索引</strong>：如果客户经常根据 <code>Genre</code> 或 <code>Author</code> 搜索书籍，则可能有利于创建非聚集索引在这些列上。正如我们所了解的，非聚集索引特别有用当你需要检索较小的列集时。</li></ol><p><strong>用例</strong>：假设您的数据库具有名为 <code>Customers</code> 的表，其中包含数百万条记录，并经常需要检索客户信息根据 <code>CustomerID</code>。在这种情况下，使用 <code>CustomerID</code> 列上的聚集索引可以显著加快这些查找。然而，如果业务需求要求您根据 <code>LastName</code> 和 <code>ZipCode</code> 检索记录，则非聚集索引在 <code>LastName</code> 和 <code>ZipCode</code> 列上可能更有效。</p><p>请记住，这些只是例子，并且实际的实现可能会大大地变化，取决于因素如数据大小、查询复杂性和硬件能力。了解何时使用聚集和非聚集索引——基于智能数据库设计——是管理 SQL 数据库的重要方面。</p><h1 id="主题：1-7-回顾和评估"><a href="#主题：1-7-回顾和评估" class="headerlink" title="主题：1.7 回顾和评估"></a><strong>主题</strong>：1.7 回顾和评估</h1><p>恭喜！让我们回顾主要的概念并进行评估。</p><ol><li><strong>聚集索引</strong>：这种类型的索引确定了表数据的物理排序。表只能有一个聚集索引。</li><li><strong>非聚集索引</strong>：这种类型的索引是独立的磁盘结构，引用表数据，帮助加速不在聚集索引范围内的查询。表可以有多个非聚集索引。</li><li><strong>高 vs. 低卡inality</strong>：高卡inality指的是具有独特值的列，在大多数，如果不是所有，行上。对高卡inality列使用聚集索引可能会导致更快的查找。低卡inality指的是具有多个行共享相同值的列。对于这些列，非聚集索引通常更有效。</li><li><strong>选择正确的索引</strong>：这取决于各种因素，包括查询类型、卡inality、数据修改需求和空间约束。</li></ol><p>现在，让我们通过几个问题来评估我们的理解：</p><ol><li><strong>聚集索引和非聚集索引之间的主要区别是什么？</strong></li><li><strong>在哪种情况下，非聚集索引比聚集索引更适合？</strong></li><li><strong>高卡inality和低卡inality是什么意思，并且如何影响索引类型的选择？</strong></li></ol><p><strong>问题</strong>：聚集索引和非聚集索引之间的主要区别是什么？<br><strong>答案</strong>：聚集索引和非聚集索引之间的主要区别在于存储和引用数据的方式。聚集索引确定了表数据的物理排序，本身就是表数据，而非聚集索引是独立的结构，指向数据位于数据库的其他地方。</p><p><strong>问题</strong>：在哪种情况下，非聚集索引比聚集索引更适合？<br><strong>答案</strong>：非聚集索引更适合在数据库需要支持大量搜索查询的列上，这些列不在聚集索引范围内。此外，非聚集索引还更适合在表经常更新时，因为更新不会导致整个表需要重新组织，与聚集索引相比。</p><p><strong>问题</strong>：高卡inality和低卡inality是什么意思，并且如何影响索引类型的选择？<br><strong>答案</strong>：卡inality是数据值在列中的独特性。高卡inality意味着列中具有大量独特值，低卡inality意味着列中具有多个重复值。对高卡inality列使用聚集索引可能会导致更快的查找，而对低卡inality列使用非聚集索引通常更有效，因为在这些列上，值是非常重复的。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview13/">https://programmerscareer.com/mysql-interview13/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;你曾被提过类似问题在面试中问过吗？或者将来会遇到，让我们一起探索和掌握它！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试：什么是数据库事务，MySQL 为什么会使用 InnoDB 作为默认选项？</title>
    <link href="https://programmerscareer.com/zh-cn/mysql-interview14/"/>
    <id>https://programmerscareer.com/zh-cn/mysql-interview14/</id>
    <published>2024-01-03T00:54:09.000Z</published>
    <updated>2024-05-12T13:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>你曾被提过类似问题在面试中问过吗？或者将来会遇到，让我们一起探索和掌握它！</p><span id="more"></span><blockquote class="colorquote warning"><p>感谢您阅读这篇文章。更多面试问题:<br><a href="https://programmerscareer.com/zh-cn/software-interview-set/">https://programmerscareer.com/zh-cn/software-interview-set/</a></p></blockquote><h1 id="主题-1-1-—-深入探讨事务"><a href="#主题-1-1-—-深入探讨事务" class="headerlink" title="主题 1.1 — 深入探讨事务"></a>主题 1.1 — 深入探讨事务</h1><p>简单地说，事务是在数据库管理系统（或类似系统）中对数据库进行的单元工作，并以可靠的方式独立处理。</p><p>事务通常表示数据库中的任何更改。更具体地说，事务是一系列数据库操作的逻辑单位。</p><p>考虑转移银行帐户中的资金的例子。这项操作需要两个步骤：</p><ol><li>在一个帐户中取款。</li><li>在另一个帐户中存款。</li></ol><p>两个步骤都必须完成，以便事务被认为已完成。如果在这两个操作之间发生了什么，例如服务器故障，事务将被认为是不完整的，并且数据库必须回滚到其前一致状态。</p><p>这样，事务帮助数据库保持<strong>完整性</strong>，确保相关操作的集合要么全部发生，要么全部不发生。事务的概念与 ACID（原子性、一致性、隔离性、持久性）密切相关，为数据的可靠处理提供了框架。</p><h1 id="主题-1-2-—-MySQL-和事务"><a href="#主题-1-2-—-MySQL-和事务" class="headerlink" title="主题 1.2 — MySQL 和事务"></a>主题 1.2 — MySQL 和事务</h1><p>MySQL 是一个数据库管理系统，提供了处理事务的支持。这意味着 MySQL 允许您将某些操作组合在一起，以便要么所有操作都执行，要么不执行。这在数据库中的中间步骤失败可能导致数据库不一致的场景中尤其重要。</p><p>再次考虑转移银行帐户中的资金的例子。现在，让我们说我们正在使用 MySQL 数据库来管理这些事务。让我们按步进：</p><ol><li>用户 A 启动了一项事务，请求转移 $100 给用户 B。</li><li>MySQL 开始了事务。</li><li>MySQL 从用户 A 的帐户平衡中扣除 $100。</li><li>MySQL 尝试为用户 B 的帐户添加 $100。</li><li>我们考虑两种情况：</li></ol><ul><li>如果操作成功，MySQL 提交了事务，数据库显示了两个用户的更新帐户平衡。</li><li>如果出现故障（可能是由于服务器崩溃或未预期的问题），MySQL 回滚了事务。结果是数据库保持了其初始状态，没有对用户 A 或用户 B 的帐户平衡进行更改。数据库保持一致性。</li></ul><p>这样，MySQL 在保持 ACID 原则的情况下，为数据库处理提供了关键角色。</p><p>请记，MySQL 的事务处理功能不是每个设置都提供，而是需要特定类型的存储引擎。我们将在以后的主题中进一步探讨这一点。</p><h1 id="主题-1-3-—-了解-InnoDB"><a href="#主题-1-3-—-了解-InnoDB" class="headerlink" title="主题 1.3 — 了解 InnoDB"></a>主题 1.3 — 了解 InnoDB</h1><p>现在，我们已经了解了事务在维护数据库完整性的重要性并了解了 MySQL 是如何处理事务的，是时候探讨 InnoDB 了。</p><p>InnoDB 是 MySQL 的存储引擎。初始版本的 MySQL 用户需要选择两种主要类型的存储引擎——MyISAM 和 InnoDB。每个引擎都有自己的优势和劣势。然而，MyISAM，一个更早的引擎，不支持事务。InnoDB，另一方面，提供了完整的事务支持，涉及多条语句的提交和回滚。InnoDB 还提供行级锁定，增加了多用户并发和性能，并具有我们已经讨论过的一些特性。</p><p>自 MySQL 5.5 版本的发布以来，InnoDB 已经成为默认的 MySQL 存储引擎，除非另外指定。这种决定主要基于 InnoDB 的稳定性和全功能性。</p><p>因此，InnoDB 的强事务支持，以及其他特性，使它成为广泛和复杂的数据库系统的强大选择。</p><h1 id="主题-1-4-—-InnoDB-的优势"><a href="#主题-1-4-—-InnoDB-的优势" class="headerlink" title="主题 1.4 — InnoDB 的优势"></a>主题 <strong>1.4 — InnoDB 的优势</strong></h1><p>InnoDB 的主要优势在于其强大的事务处理和行级锁定功能。这使它成为广泛和复杂的数据库系统的强大选择，特别是在具有高数量并发用户的情况下。</p><p>让我们来详细分析一些这些优势：</p><ol><li><strong>可靠性和持久性——ACID 遵从性：</strong> 就像我之前提到的一样，InnoDB 的事务遵从 ACID 模型，由其提交、回滚和崩溃恢复功能支持。它确保您的事务是可靠的，并且数据是持久的。</li><li><strong>行级锁定：</strong> InnoDB 使用行级锁定，而 MyISAM 使用表级锁定。行级锁定更有效，因为它允许更高的并发性和在多用户环境中的更好的性能。</li><li><strong>InnoDB 缓冲池：</strong> InnoDB 使用缓冲池来缓存其表的数据和索引。这个特性减少了 I/O 操作，使系统更快和更具有性能。</li><li><strong>外键约束：</strong> InnoDB 支持使用外键约束来维护参考完整性。当数据在一个表中依赖数据在另一个表中时，您可以通过外键约束来防止错误地删除关键数据。</li><li><strong>自动崩溃恢复：</strong> InnoDB 具有自动崩溃恢复的功能。在崩溃期间更新的关键数据不会丢失，因为引擎自动重放其日志。</li></ol><p>这些只是 InnoDB 为 MySQL 数据库带来的许多优势的一些。根据您的特定需求，可能还有更多与您的使用场景相关的好处。</p><h1 id="主题1-5-—-InnoDB-与-MyISAM"><a href="#主题1-5-—-InnoDB-与-MyISAM" class="headerlink" title="主题1.5 — InnoDB 与 MyISAM"></a>主题1.5 — InnoDB 与 MyISAM</h1><p>InnoDB 和 MyISAM 都是 MySQL 的存储引擎，但它们有显著的差异。了解这些差异对决定适合特定用例的存储引擎至关重要。</p><p>让我们根据以下几个关键参数进行比较：</p><ol><li><strong>事务：</strong> 我们以前已经讨论过，InnoDB 支持事务，而 MyISAM 不支持。如果您需要事务性整性，则应选择 InnoDB。</li><li><strong>锁定：</strong> InnoDB 实现了行级锁定，而 MyISAM 实现了表级锁定。行级锁定允许更高的并发性并提供更好的性能，特别是对频繁、小数据修改的操作。</li><li><strong>外键约束：</strong> InnoDB 支持外键约束，而 MyISAM 不支持。</li><li><strong>全文搜索：</strong> MyISAM 具有内置的全文搜索支持，这使它成为主要要求的好选项。</li><li><strong>数据安全性：</strong> InnoDB 使用事务日志来确保数据安全性（ACID 兼容性），而 MyISAM 不使用。</li><li><strong>压缩：</strong> InnoDB 支持表压缩，允许表数据和相关索引进行压缩，以节省磁盘空间并提高 I/O 效率和性能。</li></ol><p>最重要的是要记住，没有一个通用的“正确”选择之间的 InnoDB 和 MyISAM。适合的引擎取决于您的特定情况和要求。</p><h1 id="主题1-6-—-案例研究：真实世界的例子和场景，数据完整性和事务的重要性"><a href="#主题1-6-—-案例研究：真实世界的例子和场景，数据完整性和事务的重要性" class="headerlink" title="主题1.6 — 案例研究：真实世界的例子和场景，数据完整性和事务的重要性"></a>主题1.6 — 案例研究：真实世界的例子和场景，数据完整性和事务的重要性</h1><p>数据完整性和事务是许多真实世界的应用程序中的关键要素。为了说明其重要性在实际场景中，让我们考虑几个案例研究。</p><p><strong>在线银行和金融服务：</strong></p><ol><li>在在线银行系统中，假设一个客户从储蓄账户转移了资金到支票账户。这个过程包括两个单独的任务：减少储蓄账户的余额和增加支票账户的余额。两个任务都需要发生。如果系统在储蓄账户被扣除后但是在支票账户被加载之前出现故障，客户就会损失资金。事务的 ACID 特性确保数据的一致性。</li></ol><p><strong>电子商务平台：</strong></p><ol><li>考虑一个客户在电子商务网站上下单。这个过程包括检查库存、确认付款、更新库存和确认订单。任何错误或故障在一个阶段应该阻止整个过程。事务为这些操作提供了安全的通路，确保数据的一致性。</li></ol><p><strong>航空航班预订系统：</strong></p><ol><li>当一个座位在航班上预订时，系统先检查座位的可用性，然后预订座位，然后接受付款。如果航空预订系统崩溃在座位被预订但是在付款确认之前，航空公司就会损失。通过事务，在后期的故障中，前期的阶段自动回滚，释放座位以供其他客户使用。</li></ol><p>这些是几个场景，其中数据一致性是至关重要的。在关键系统中，InnoDB 的强大功能为数据的一致性提供了非常有用的支持。</p><h1 id="主题1-7-—-MySQL-面试题：数据库事务为什么重要，为什么-InnoDB-是-MySQL-的默认选项？"><a href="#主题1-7-—-MySQL-面试题：数据库事务为什么重要，为什么-InnoDB-是-MySQL-的默认选项？" class="headerlink" title="主题1.7 — MySQL 面试题：数据库事务为什么重要，为什么 InnoDB 是 MySQL 的默认选项？"></a>主题1.7 — MySQL 面试题：数据库事务为什么重要，为什么 InnoDB 是 MySQL 的默认选项？</h1><p>事务是数据库系统的一个重要概念。它们用于保护组织的信息，在系统故障（例如电力中断、软件崩溃或更危险的内容攻击）发生时进行保护。</p><p>事务是一系列的单个逻辑单元的操作序列。操作可以包括读取数据库记录、修改这些记录或者在特定参数内进行数据操作。</p><p>在数据库系统中，事务被管理使用 ACID 的缩写，它代表原子性、一致性、隔离性和持久性。</p><ul><li><strong>原子性：</strong>保证事务中所做的所有更改都被提交到数据库中，或者如果发生错误，则不会提交任何更改。</li><li><strong>一致性：</strong>确保事务不会在运行后将数据库置于不一致的状态。</li><li><strong>隔离性：</strong>确保一个事务不会干另一个事务。</li><li><strong>持久性：</strong>确保已提交的更新持久化，即使发生电力中断或系统崩溃。</li></ul><p>现在，为什么 InnoDB 是 MySQL 的默认选项？</p><p>InnoDB 存储引擎提供了一种强大和可靠的方式来处理事务。它具有许多特性，例如 ACID 兼容事务支持、行级锁定和实际实现，例如外键，使其成为 MySQL 的默认引擎。</p><p>此外，InnoDB 提供了崩溃恢复功能并提供硬件加速，例如固态硬盘 (SSD) 或硬盘。</p><p>简而言，InnoDB 的优势在于其广泛适用的特性集，包括事务、可靠性和性能优化，适合大多数工作负载。</p><h1 id="主题1-8-—-复习和评估"><a href="#主题1-8-—-复习和评估" class="headerlink" title="主题1.8 — 复习和评估"></a>主题1.8 — 复习和评估</h1><p>在本课程中，我们已经讨论了：</p><ul><li><strong>事务</strong> 的重要性在维护数据完整性，</li><li>MySQL 如何支持事务并为其提供好处，</li><li>InnoDB 的介绍、其优势和为什么它是 MySQL 的默认存储引擎，</li><li>InnoDB 和 MyISAM 之间的差异，</li><li>在实际场景中，数据完整性和事务的重要性，</li><li>并提供了一些常见的 MySQL 面试问题和答案。</li></ul><p>为了复习，我将提供一组问题和问题，它们将从简单到复杂，所以请思考深入地。</p><p><strong>问题 1 (3/10 难度)：</strong></p><p>ACID 是事务的四个属性的缩写，它们是什么？</p><p><strong>问题 2 (6/10 难度)：</strong></p><p>为什么事务在数据库中的数据完整性方面重要？</p><p><strong>问题 3 (9/10 难度)：</strong></p><p>为什么 InnoDB 是 MySQL 的默认选项，并在哪些方面优于 MyISAM？在回答中包含 InnoDB 的好处。</p><blockquote class="colorquote danger"><p>English post: <a href="https://programmerscareer.com/mysql-interview14/">https://programmerscareer.com/mysql-interview14/</a><br>作者：<a href="https://twitter.com/WesleyWei0316">Wesley Wei – Twitter</a> <a href="https://wesley-wei.medium.com/">Wesley Wei – Medium</a><br>注意：本文为作者原创，转载请注明出处。  </p></blockquote></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;你曾被提过类似问题在面试中问过吗？或者将来会遇到，让我们一起探索和掌握它！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://programmerscareer.com/categories/mysql/"/>
    
    
    <category term="interview" scheme="https://programmerscareer.com/tags/interview/"/>
    
  </entry>
  
</feed>
